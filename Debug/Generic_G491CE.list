
Generic_G491CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfa4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800d184  0800d184  0001d184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d324  0800d324  00020148  2**0
                  CONTENTS
  4 .ARM          00000000  0800d324  0800d324  00020148  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d324  0800d324  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d324  0800d324  0001d324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d328  0800d328  0001d328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  0800d32c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000297c  20000148  0800d474  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ac4  0800d474  00022ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aa0d  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057ec  00000000  00000000  0004ab85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002378  00000000  00000000  00050378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002130  00000000  00000000  000526f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007aeb  00000000  00000000  00054820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028490  00000000  00000000  0005c30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f23f9  00000000  00000000  0008479b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00176b94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099f8  00000000  00000000  00176be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000148 	.word	0x20000148
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d16c 	.word	0x0800d16c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000014c 	.word	0x2000014c
 800021c:	0800d16c 	.word	0x0800d16c

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fe13 	bl	8000e4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f832 	bl	8000290 <SystemClock_Config>
//  MODIFY_REG(FLASH->OPTR, FLASH_OPTR_nSWBOOT0_Msk, OB_BOOT0_FROM_OB);

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fa56 	bl	80006dc <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000230:	f00c fa44 	bl	800c6bc <MX_USB_Device_Init>
  MX_ADC1_Init();
 8000234:	f000 f8a4 	bl	8000380 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000238:	f000 f91c 	bl	8000474 <MX_ADC2_Init>
  MX_ADC3_Init();
 800023c:	f000 f982 	bl	8000544 <MX_ADC3_Init>
  MX_SPI3_Init();
 8000240:	f000 fa0e 	bl	8000660 <MX_SPI3_Init>
  MX_CORDIC_Init();
 8000244:	f000 f9e4 	bl	8000610 <MX_CORDIC_Init>
  MX_FMAC_Init();
 8000248:	f000 f9f6 	bl	8000638 <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800024c:	f009 fcda 	bl	8009c04 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BlinkTask1 */
  BlinkTask1Handle = osThreadNew(BlinkTask1Function, NULL, &BlinkTask1_attributes);
 8000250:	4a09      	ldr	r2, [pc, #36]	; (8000278 <main+0x58>)
 8000252:	2100      	movs	r1, #0
 8000254:	4809      	ldr	r0, [pc, #36]	; (800027c <main+0x5c>)
 8000256:	f009 fd1f 	bl	8009c98 <osThreadNew>
 800025a:	4603      	mov	r3, r0
 800025c:	4a08      	ldr	r2, [pc, #32]	; (8000280 <main+0x60>)
 800025e:	6013      	str	r3, [r2, #0]

  /* creation of BlinkTask2 */
  BlinkTask2Handle = osThreadNew(BlinkTask2Function, NULL, &BlinkTask2_attributes);
 8000260:	4a08      	ldr	r2, [pc, #32]	; (8000284 <main+0x64>)
 8000262:	2100      	movs	r1, #0
 8000264:	4808      	ldr	r0, [pc, #32]	; (8000288 <main+0x68>)
 8000266:	f009 fd17 	bl	8009c98 <osThreadNew>
 800026a:	4603      	mov	r3, r0
 800026c:	4a07      	ldr	r2, [pc, #28]	; (800028c <main+0x6c>)
 800026e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000270:	f009 fcec 	bl	8009c4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000274:	e7fe      	b.n	8000274 <main+0x54>
 8000276:	bf00      	nop
 8000278:	0800d264 	.word	0x0800d264
 800027c:	08000889 	.word	0x08000889
 8000280:	2000036c 	.word	0x2000036c
 8000284:	0800d288 	.word	0x0800d288
 8000288:	080008b7 	.word	0x080008b7
 800028c:	20000370 	.word	0x20000370

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b09a      	sub	sp, #104	; 0x68
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800029a:	2238      	movs	r2, #56	; 0x38
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f00c fe9a 	bl	800cfd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	f107 031c 	add.w	r3, r7, #28
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
  RCC_CRSInitTypeDef pInit = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]
 80002c2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002c4:	2000      	movs	r0, #0
 80002c6:	f003 ff31 	bl	800412c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80002ca:	2322      	movs	r3, #34	; 0x22
 80002cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d4:	2340      	movs	r3, #64	; 0x40
 80002d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002d8:	2301      	movs	r3, #1
 80002da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002dc:	2302      	movs	r3, #2
 80002de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002e0:	2302      	movs	r3, #2
 80002e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80002e4:	2304      	movs	r3, #4
 80002e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 85;
 80002e8:	2355      	movs	r3, #85	; 0x55
 80002ea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ec:	2302      	movs	r3, #2
 80002ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002f0:	2302      	movs	r3, #2
 80002f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002f4:	2302      	movs	r3, #2
 80002f6:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002fc:	4618      	mov	r0, r3
 80002fe:	f003 ffc9 	bl	8004294 <HAL_RCC_OscConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000308:	f000 fafe 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030c:	230f      	movs	r3, #15
 800030e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000310:	2303      	movs	r3, #3
 8000312:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000320:	f107 031c 	add.w	r3, r7, #28
 8000324:	2104      	movs	r1, #4
 8000326:	4618      	mov	r0, r3
 8000328:	f004 facc 	bl	80048c4 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000332:	f000 fae9 	bl	8000908 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000336:	4b11      	ldr	r3, [pc, #68]	; (800037c <SystemClock_Config+0xec>)
 8000338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800033a:	4a10      	ldr	r2, [pc, #64]	; (800037c <SystemClock_Config+0xec>)
 800033c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000340:	6593      	str	r3, [r2, #88]	; 0x58
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <SystemClock_Config+0xec>)
 8000344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800034a:	603b      	str	r3, [r7, #0]
 800034c:	683b      	ldr	r3, [r7, #0]

  /** Configures CRS
  */
  pInit.Prescaler = RCC_CRS_SYNC_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	607b      	str	r3, [r7, #4]
  pInit.Source = RCC_CRS_SYNC_SOURCE_USB;
 8000352:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000356:	60bb      	str	r3, [r7, #8]
  pInit.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
  pInit.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 800035c:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 8000360:	613b      	str	r3, [r7, #16]
  pInit.ErrorLimitValue = 34;
 8000362:	2322      	movs	r3, #34	; 0x22
 8000364:	617b      	str	r3, [r7, #20]
  pInit.HSI48CalibrationValue = 32;
 8000366:	2320      	movs	r3, #32
 8000368:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&pInit);
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	4618      	mov	r0, r3
 800036e:	f004 ff1d 	bl	80051ac <HAL_RCCEx_CRSConfig>
}
 8000372:	bf00      	nop
 8000374:	3768      	adds	r7, #104	; 0x68
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000

08000380 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08c      	sub	sp, #48	; 0x30
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2220      	movs	r2, #32
 8000396:	2100      	movs	r1, #0
 8000398:	4618      	mov	r0, r3
 800039a:	f00c fe1d 	bl	800cfd8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800039e:	4b32      	ldr	r3, [pc, #200]	; (8000468 <MX_ADC1_Init+0xe8>)
 80003a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80003a6:	4b30      	ldr	r3, [pc, #192]	; (8000468 <MX_ADC1_Init+0xe8>)
 80003a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80003ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003ae:	4b2e      	ldr	r3, [pc, #184]	; (8000468 <MX_ADC1_Init+0xe8>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b4:	4b2c      	ldr	r3, [pc, #176]	; (8000468 <MX_ADC1_Init+0xe8>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80003ba:	4b2b      	ldr	r3, [pc, #172]	; (8000468 <MX_ADC1_Init+0xe8>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c0:	4b29      	ldr	r3, [pc, #164]	; (8000468 <MX_ADC1_Init+0xe8>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003c6:	4b28      	ldr	r3, [pc, #160]	; (8000468 <MX_ADC1_Init+0xe8>)
 80003c8:	2204      	movs	r2, #4
 80003ca:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003cc:	4b26      	ldr	r3, [pc, #152]	; (8000468 <MX_ADC1_Init+0xe8>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003d2:	4b25      	ldr	r3, [pc, #148]	; (8000468 <MX_ADC1_Init+0xe8>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80003d8:	4b23      	ldr	r3, [pc, #140]	; (8000468 <MX_ADC1_Init+0xe8>)
 80003da:	2201      	movs	r2, #1
 80003dc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003de:	4b22      	ldr	r3, [pc, #136]	; (8000468 <MX_ADC1_Init+0xe8>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003e6:	4b20      	ldr	r3, [pc, #128]	; (8000468 <MX_ADC1_Init+0xe8>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003ec:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <MX_ADC1_Init+0xe8>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003f2:	4b1d      	ldr	r3, [pc, #116]	; (8000468 <MX_ADC1_Init+0xe8>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003fa:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <MX_ADC1_Init+0xe8>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000400:	4b19      	ldr	r3, [pc, #100]	; (8000468 <MX_ADC1_Init+0xe8>)
 8000402:	2200      	movs	r2, #0
 8000404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000408:	4817      	ldr	r0, [pc, #92]	; (8000468 <MX_ADC1_Init+0xe8>)
 800040a:	f000 ff53 	bl	80012b4 <HAL_ADC_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000414:	f000 fa78 	bl	8000908 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000418:	2300      	movs	r3, #0
 800041a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800041c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000420:	4619      	mov	r1, r3
 8000422:	4811      	ldr	r0, [pc, #68]	; (8000468 <MX_ADC1_Init+0xe8>)
 8000424:	f001 fd4c 	bl	8001ec0 <HAL_ADCEx_MultiModeConfigChannel>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800042e:	f000 fa6b 	bl	8000908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_ADC1_Init+0xec>)
 8000434:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000436:	2306      	movs	r3, #6
 8000438:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <MX_ADC1_Init+0xf0>)
 8000440:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000442:	2304      	movs	r3, #4
 8000444:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	4619      	mov	r1, r3
 800044e:	4806      	ldr	r0, [pc, #24]	; (8000468 <MX_ADC1_Init+0xe8>)
 8000450:	f001 f8e4 	bl	800161c <HAL_ADC_ConfigChannel>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800045a:	f000 fa55 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800045e:	bf00      	nop
 8000460:	3730      	adds	r7, #48	; 0x30
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000164 	.word	0x20000164
 800046c:	3ac04000 	.word	0x3ac04000
 8000470:	407f0000 	.word	0x407f0000

08000474 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800047a:	463b      	mov	r3, r7
 800047c:	2220      	movs	r2, #32
 800047e:	2100      	movs	r1, #0
 8000480:	4618      	mov	r0, r3
 8000482:	f00c fda9 	bl	800cfd8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000486:	4b2b      	ldr	r3, [pc, #172]	; (8000534 <MX_ADC2_Init+0xc0>)
 8000488:	4a2b      	ldr	r2, [pc, #172]	; (8000538 <MX_ADC2_Init+0xc4>)
 800048a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800048c:	4b29      	ldr	r3, [pc, #164]	; (8000534 <MX_ADC2_Init+0xc0>)
 800048e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000492:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000494:	4b27      	ldr	r3, [pc, #156]	; (8000534 <MX_ADC2_Init+0xc0>)
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800049a:	4b26      	ldr	r3, [pc, #152]	; (8000534 <MX_ADC2_Init+0xc0>)
 800049c:	2200      	movs	r2, #0
 800049e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80004a0:	4b24      	ldr	r3, [pc, #144]	; (8000534 <MX_ADC2_Init+0xc0>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004a6:	4b23      	ldr	r3, [pc, #140]	; (8000534 <MX_ADC2_Init+0xc0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ac:	4b21      	ldr	r3, [pc, #132]	; (8000534 <MX_ADC2_Init+0xc0>)
 80004ae:	2204      	movs	r2, #4
 80004b0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80004b2:	4b20      	ldr	r3, [pc, #128]	; (8000534 <MX_ADC2_Init+0xc0>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004b8:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <MX_ADC2_Init+0xc0>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80004be:	4b1d      	ldr	r3, [pc, #116]	; (8000534 <MX_ADC2_Init+0xc0>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <MX_ADC2_Init+0xc0>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004cc:	4b19      	ldr	r3, [pc, #100]	; (8000534 <MX_ADC2_Init+0xc0>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <MX_ADC2_Init+0xc0>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80004d8:	4b16      	ldr	r3, [pc, #88]	; (8000534 <MX_ADC2_Init+0xc0>)
 80004da:	2200      	movs	r2, #0
 80004dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <MX_ADC2_Init+0xc0>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <MX_ADC2_Init+0xc0>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004ee:	4811      	ldr	r0, [pc, #68]	; (8000534 <MX_ADC2_Init+0xc0>)
 80004f0:	f000 fee0 	bl	80012b4 <HAL_ADC_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80004fa:	f000 fa05 	bl	8000908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_ADC2_Init+0xc8>)
 8000500:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000502:	2306      	movs	r3, #6
 8000504:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000506:	2300      	movs	r3, #0
 8000508:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <MX_ADC2_Init+0xcc>)
 800050c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800050e:	2304      	movs	r3, #4
 8000510:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000516:	463b      	mov	r3, r7
 8000518:	4619      	mov	r1, r3
 800051a:	4806      	ldr	r0, [pc, #24]	; (8000534 <MX_ADC2_Init+0xc0>)
 800051c:	f001 f87e 	bl	800161c <HAL_ADC_ConfigChannel>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000526:	f000 f9ef 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800052a:	bf00      	nop
 800052c:	3720      	adds	r7, #32
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200001d0 	.word	0x200001d0
 8000538:	50000100 	.word	0x50000100
 800053c:	32601000 	.word	0x32601000
 8000540:	407f0000 	.word	0x407f0000

08000544 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800054a:	463b      	mov	r3, r7
 800054c:	2220      	movs	r2, #32
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f00c fd41 	bl	800cfd8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000556:	4b2b      	ldr	r3, [pc, #172]	; (8000604 <MX_ADC3_Init+0xc0>)
 8000558:	4a2b      	ldr	r2, [pc, #172]	; (8000608 <MX_ADC3_Init+0xc4>)
 800055a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800055c:	4b29      	ldr	r3, [pc, #164]	; (8000604 <MX_ADC3_Init+0xc0>)
 800055e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000562:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000564:	4b27      	ldr	r3, [pc, #156]	; (8000604 <MX_ADC3_Init+0xc0>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800056a:	4b26      	ldr	r3, [pc, #152]	; (8000604 <MX_ADC3_Init+0xc0>)
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000570:	4b24      	ldr	r3, [pc, #144]	; (8000604 <MX_ADC3_Init+0xc0>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000576:	4b23      	ldr	r3, [pc, #140]	; (8000604 <MX_ADC3_Init+0xc0>)
 8000578:	2200      	movs	r2, #0
 800057a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800057c:	4b21      	ldr	r3, [pc, #132]	; (8000604 <MX_ADC3_Init+0xc0>)
 800057e:	2204      	movs	r2, #4
 8000580:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000582:	4b20      	ldr	r3, [pc, #128]	; (8000604 <MX_ADC3_Init+0xc0>)
 8000584:	2200      	movs	r2, #0
 8000586:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <MX_ADC3_Init+0xc0>)
 800058a:	2200      	movs	r2, #0
 800058c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800058e:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <MX_ADC3_Init+0xc0>)
 8000590:	2201      	movs	r2, #1
 8000592:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_ADC3_Init+0xc0>)
 8000596:	2200      	movs	r2, #0
 8000598:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <MX_ADC3_Init+0xc0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a2:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_ADC3_Init+0xc0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <MX_ADC3_Init+0xc0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_ADC3_Init+0xc0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <MX_ADC3_Init+0xc0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80005be:	4811      	ldr	r0, [pc, #68]	; (8000604 <MX_ADC3_Init+0xc0>)
 80005c0:	f000 fe78 	bl	80012b4 <HAL_ADC_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80005ca:	f000 f99d 	bl	8000908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_ADC3_Init+0xc8>)
 80005d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005d2:	2306      	movs	r3, #6
 80005d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005da:	237f      	movs	r3, #127	; 0x7f
 80005dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005de:	2304      	movs	r3, #4
 80005e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <MX_ADC3_Init+0xc0>)
 80005ec:	f001 f816 	bl	800161c <HAL_ADC_ConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 80005f6:	f000 f987 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	3720      	adds	r7, #32
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	2000023c 	.word	0x2000023c
 8000608:	50000400 	.word	0x50000400
 800060c:	14f00020 	.word	0x14f00020

08000610 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_CORDIC_Init+0x20>)
 8000616:	4a07      	ldr	r2, [pc, #28]	; (8000634 <MX_CORDIC_Init+0x24>)
 8000618:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_CORDIC_Init+0x20>)
 800061c:	f001 fd38 	bl	8002090 <HAL_CORDIC_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000626:	f000 f96f 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200002a8 	.word	0x200002a8
 8000634:	40020c00 	.word	0x40020c00

08000638 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_FMAC_Init+0x20>)
 800063e:	4a07      	ldr	r2, [pc, #28]	; (800065c <MX_FMAC_Init+0x24>)
 8000640:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_FMAC_Init+0x20>)
 8000644:	f001 fe36 	bl	80022b4 <HAL_FMAC_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 800064e:	f000 f95b 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200002d0 	.word	0x200002d0
 800065c:	40021400 	.word	0x40021400

08000660 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_SPI3_Init+0x74>)
 8000666:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <MX_SPI3_Init+0x78>)
 8000668:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_SPI3_Init+0x74>)
 800066c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000670:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_SPI3_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_SPI3_Init+0x74>)
 800067a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800067e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_SPI3_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_SPI3_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_SPI3_Init+0x74>)
 800068e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000692:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_SPI3_Init+0x74>)
 8000696:	2238      	movs	r2, #56	; 0x38
 8000698:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_SPI3_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_SPI3_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_SPI3_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_SPI3_Init+0x74>)
 80006ae:	2207      	movs	r2, #7
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_SPI3_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_SPI3_Init+0x74>)
 80006ba:	2208      	movs	r2, #8
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_SPI3_Init+0x74>)
 80006c0:	f004 fdb6 	bl	8005230 <HAL_SPI_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80006ca:	f000 f91d 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000308 	.word	0x20000308
 80006d8:	40003c00 	.word	0x40003c00

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	4b61      	ldr	r3, [pc, #388]	; (8000878 <MX_GPIO_Init+0x19c>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a60      	ldr	r2, [pc, #384]	; (8000878 <MX_GPIO_Init+0x19c>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b5e      	ldr	r3, [pc, #376]	; (8000878 <MX_GPIO_Init+0x19c>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800070a:	4b5b      	ldr	r3, [pc, #364]	; (8000878 <MX_GPIO_Init+0x19c>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a5a      	ldr	r2, [pc, #360]	; (8000878 <MX_GPIO_Init+0x19c>)
 8000710:	f043 0320 	orr.w	r3, r3, #32
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b58      	ldr	r3, [pc, #352]	; (8000878 <MX_GPIO_Init+0x19c>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0320 	and.w	r3, r3, #32
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b55      	ldr	r3, [pc, #340]	; (8000878 <MX_GPIO_Init+0x19c>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4a54      	ldr	r2, [pc, #336]	; (8000878 <MX_GPIO_Init+0x19c>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4b52      	ldr	r3, [pc, #328]	; (8000878 <MX_GPIO_Init+0x19c>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b4f      	ldr	r3, [pc, #316]	; (8000878 <MX_GPIO_Init+0x19c>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a4e      	ldr	r2, [pc, #312]	; (8000878 <MX_GPIO_Init+0x19c>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b4c      	ldr	r3, [pc, #304]	; (8000878 <MX_GPIO_Init+0x19c>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f24c 0140 	movw	r1, #49216	; 0xc040
 8000758:	4848      	ldr	r0, [pc, #288]	; (800087c <MX_GPIO_Init+0x1a0>)
 800075a:	f001 ffd9 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2102      	movs	r1, #2
 8000762:	4847      	ldr	r0, [pc, #284]	; (8000880 <MX_GPIO_Init+0x1a4>)
 8000764:	f001 ffd4 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000768:	2200      	movs	r2, #0
 800076a:	f248 71df 	movw	r1, #34783	; 0x87df
 800076e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000772:	f001 ffcd 	bl	8002710 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 8000776:	2200      	movs	r2, #0
 8000778:	f24c 31d8 	movw	r1, #50136	; 0xc3d8
 800077c:	4841      	ldr	r0, [pc, #260]	; (8000884 <MX_GPIO_Init+0x1a8>)
 800077e:	f001 ffc7 	bl	8002710 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4839      	ldr	r0, [pc, #228]	; (800087c <MX_GPIO_Init+0x1a0>)
 8000798:	f001 fe38 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 800079c:	f24c 0340 	movw	r3, #49216	; 0xc040
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	4831      	ldr	r0, [pc, #196]	; (800087c <MX_GPIO_Init+0x1a0>)
 80007b6:	f001 fe29 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ba:	2301      	movs	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007be:	2312      	movs	r3, #18
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007ca:	2304      	movs	r3, #4
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	482a      	ldr	r0, [pc, #168]	; (8000880 <MX_GPIO_Init+0x1a4>)
 80007d6:	f001 fe19 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007da:	2302      	movs	r3, #2
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4823      	ldr	r0, [pc, #140]	; (8000880 <MX_GPIO_Init+0x1a4>)
 80007f2:	f001 fe0b 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA7 PA8
                           PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007f6:	f248 73df 	movw	r3, #34783	; 0x87df
 80007fa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000812:	f001 fdfb 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000816:	2310      	movs	r3, #16
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800081a:	2312      	movs	r3, #18
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000826:	2304      	movs	r3, #4
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4812      	ldr	r0, [pc, #72]	; (800087c <MX_GPIO_Init+0x1a0>)
 8000832:	f001 fdeb 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	480e      	ldr	r0, [pc, #56]	; (8000884 <MX_GPIO_Init+0x1a8>)
 800084c:	f001 fdde 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB3 PB4
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 8000850:	f24c 33d8 	movw	r3, #50136	; 0xc3d8
 8000854:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4806      	ldr	r0, [pc, #24]	; (8000884 <MX_GPIO_Init+0x1a8>)
 800086a:	f001 fdcf 	bl	800240c <HAL_GPIO_Init>

}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	; 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000
 800087c:	48000800 	.word	0x48000800
 8000880:	48001400 	.word	0x48001400
 8000884:	48000400 	.word	0x48000400

08000888 <BlinkTask1Function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BlinkTask1Function */
void BlinkTask1Function(void *argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000898:	f001 ff3a 	bl	8002710 <HAL_GPIO_WritePin>
      vTaskDelay(100);
 800089c:	2064      	movs	r0, #100	; 0x64
 800089e:	f00a fa19 	bl	800acd4 <vTaskDelay>
      // LED OFF
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f001 ff31 	bl	8002710 <HAL_GPIO_WritePin>
      vTaskDelay(100);
 80008ae:	2064      	movs	r0, #100	; 0x64
 80008b0:	f00a fa10 	bl	800acd4 <vTaskDelay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80008b4:	e7ec      	b.n	8000890 <BlinkTask1Function+0x8>

080008b6 <BlinkTask2Function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BlinkTask2Function */
void BlinkTask2Function(void *argument)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlinkTask2Function */
  /* Infinite loop */
  for(;;)
  {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	2140      	movs	r1, #64	; 0x40
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f001 ff23 	bl	8002710 <HAL_GPIO_WritePin>
      vTaskDelay(100);
 80008ca:	2064      	movs	r0, #100	; 0x64
 80008cc:	f00a fa02 	bl	800acd4 <vTaskDelay>
      // LED OFF
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2140      	movs	r1, #64	; 0x40
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d8:	f001 ff1a 	bl	8002710 <HAL_GPIO_WritePin>
      vTaskDelay(100);
 80008dc:	2064      	movs	r0, #100	; 0x64
 80008de:	f00a f9f9 	bl	800acd4 <vTaskDelay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80008e2:	e7ec      	b.n	80008be <BlinkTask2Function+0x8>

080008e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d101      	bne.n	80008fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008f6:	f000 fac3 	bl	8000e80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40001000 	.word	0x40001000

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_MspInit+0x50>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	4a11      	ldr	r2, [pc, #68]	; (8000964 <HAL_MspInit+0x50>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6613      	str	r3, [r2, #96]	; 0x60
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_MspInit+0x50>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_MspInit+0x50>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <HAL_MspInit+0x50>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6593      	str	r3, [r2, #88]	; 0x58
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_MspInit+0x50>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	210f      	movs	r1, #15
 800094e:	f06f 0001 	mvn.w	r0, #1
 8000952:	f001 fc87 	bl	8002264 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000956:	f003 fc8d 	bl	8004274 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b0a2      	sub	sp, #136	; 0x88
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	2250      	movs	r2, #80	; 0x50
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f00c fb25 	bl	800cfd8 <memset>
  if(hadc->Instance==ADC1)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000996:	d13e      	bne.n	8000a16 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000998:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800099e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80009a2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a8:	4618      	mov	r0, r3
 80009aa:	f004 f9c3 	bl	8004d34 <HAL_RCCEx_PeriphCLKConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009b4:	f7ff ffa8 	bl	8000908 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80009b8:	4b64      	ldr	r3, [pc, #400]	; (8000b4c <HAL_ADC_MspInit+0x1e4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	4a63      	ldr	r2, [pc, #396]	; (8000b4c <HAL_ADC_MspInit+0x1e4>)
 80009c0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009c2:	4b62      	ldr	r3, [pc, #392]	; (8000b4c <HAL_ADC_MspInit+0x1e4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d10b      	bne.n	80009e2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009ca:	4b61      	ldr	r3, [pc, #388]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a60      	ldr	r2, [pc, #384]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 80009d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b5e      	ldr	r3, [pc, #376]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009de:	623b      	str	r3, [r7, #32]
 80009e0:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b5b      	ldr	r3, [pc, #364]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a5a      	ldr	r2, [pc, #360]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b58      	ldr	r3, [pc, #352]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	61fb      	str	r3, [r7, #28]
 80009f8:	69fb      	ldr	r3, [r7, #28]
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 80009fa:	f641 0303 	movw	r3, #6147	; 0x1803
 80009fe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a00:	2303      	movs	r3, #3
 8000a02:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4851      	ldr	r0, [pc, #324]	; (8000b54 <HAL_ADC_MspInit+0x1ec>)
 8000a10:	f001 fcfc 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000a14:	e095      	b.n	8000b42 <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a4f      	ldr	r2, [pc, #316]	; (8000b58 <HAL_ADC_MspInit+0x1f0>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d156      	bne.n	8000ace <HAL_ADC_MspInit+0x166>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a26:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a2a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	4618      	mov	r0, r3
 8000a32:	f004 f97f 	bl	8004d34 <HAL_RCCEx_PeriphCLKConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8000a3c:	f7ff ff64 	bl	8000908 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a40:	4b42      	ldr	r3, [pc, #264]	; (8000b4c <HAL_ADC_MspInit+0x1e4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	4a41      	ldr	r2, [pc, #260]	; (8000b4c <HAL_ADC_MspInit+0x1e4>)
 8000a48:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a4a:	4b40      	ldr	r3, [pc, #256]	; (8000b4c <HAL_ADC_MspInit+0x1e4>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d10b      	bne.n	8000a6a <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a52:	4b3f      	ldr	r3, [pc, #252]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a3e      	ldr	r2, [pc, #248]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 8000a58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b3c      	ldr	r3, [pc, #240]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a38      	ldr	r2, [pc, #224]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b36      	ldr	r3, [pc, #216]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a32      	ldr	r2, [pc, #200]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000aaa:	4619      	mov	r1, r3
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f001 fcac 	bl	800240c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4823      	ldr	r0, [pc, #140]	; (8000b54 <HAL_ADC_MspInit+0x1ec>)
 8000ac8:	f001 fca0 	bl	800240c <HAL_GPIO_Init>
}
 8000acc:	e039      	b.n	8000b42 <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC3)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a22      	ldr	r2, [pc, #136]	; (8000b5c <HAL_ADC_MspInit+0x1f4>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d134      	bne.n	8000b42 <HAL_ADC_MspInit+0x1da>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000ade:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ae2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 f923 	bl	8004d34 <HAL_RCCEx_PeriphCLKConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <HAL_ADC_MspInit+0x190>
      Error_Handler();
 8000af4:	f7ff ff08 	bl	8000908 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afc:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 8000afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 8000b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 8000b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_ADC_MspInit+0x1e8>)
 8000b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b36:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_ADC_MspInit+0x1ec>)
 8000b3e:	f001 fc65 	bl	800240c <HAL_GPIO_Init>
}
 8000b42:	bf00      	nop
 8000b44:	3788      	adds	r7, #136	; 0x88
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000374 	.word	0x20000374
 8000b50:	40021000 	.word	0x40021000
 8000b54:	48000400 	.word	0x48000400
 8000b58:	50000100 	.word	0x50000100
 8000b5c:	50000400 	.word	0x50000400

08000b60 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_CORDIC_MspInit+0x38>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d10b      	bne.n	8000b8a <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_CORDIC_MspInit+0x3c>)
 8000b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b76:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <HAL_CORDIC_MspInit+0x3c>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	6493      	str	r3, [r2, #72]	; 0x48
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <HAL_CORDIC_MspInit+0x3c>)
 8000b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_FMAC_MspInit+0x38>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d10b      	bne.n	8000bca <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_FMAC_MspInit+0x3c>)
 8000bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bb6:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <HAL_FMAC_MspInit+0x3c>)
 8000bb8:	f043 0310 	orr.w	r3, r3, #16
 8000bbc:	6493      	str	r3, [r2, #72]	; 0x48
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <HAL_FMAC_MspInit+0x3c>)
 8000bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bc2:	f003 0310 	and.w	r3, r3, #16
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40021400 	.word	0x40021400
 8000bdc:	40021000 	.word	0x40021000

08000be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a25      	ldr	r2, [pc, #148]	; (8000c94 <HAL_SPI_MspInit+0xb4>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d144      	bne.n	8000c8c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <HAL_SPI_MspInit+0xb8>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	4a24      	ldr	r2, [pc, #144]	; (8000c98 <HAL_SPI_MspInit+0xb8>)
 8000c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0e:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <HAL_SPI_MspInit+0xb8>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <HAL_SPI_MspInit+0xb8>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	4a1e      	ldr	r2, [pc, #120]	; (8000c98 <HAL_SPI_MspInit+0xb8>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_SPI_MspInit+0xb8>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_SPI_MspInit+0xb8>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <HAL_SPI_MspInit+0xb8>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_SPI_MspInit+0xb8>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c5c:	2306      	movs	r3, #6
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	480d      	ldr	r0, [pc, #52]	; (8000c9c <HAL_SPI_MspInit+0xbc>)
 8000c68:	f001 fbd0 	bl	800240c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c6c:	2320      	movs	r3, #32
 8000c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c7c:	2306      	movs	r3, #6
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <HAL_SPI_MspInit+0xc0>)
 8000c88:	f001 fbc0 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	; 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40003c00 	.word	0x40003c00
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	48000800 	.word	0x48000800
 8000ca0:	48000400 	.word	0x48000400

08000ca4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08c      	sub	sp, #48	; 0x30
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cba:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <HAL_InitTick+0xcc>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	4a2c      	ldr	r2, [pc, #176]	; (8000d70 <HAL_InitTick+0xcc>)
 8000cc0:	f043 0310 	orr.w	r3, r3, #16
 8000cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <HAL_InitTick+0xcc>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	f003 0310 	and.w	r3, r3, #16
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cd2:	f107 020c 	add.w	r2, r7, #12
 8000cd6:	f107 0310 	add.w	r3, r7, #16
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f003 ffb1 	bl	8004c44 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ce2:	f003 ff99 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8000ce6:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cea:	4a22      	ldr	r2, [pc, #136]	; (8000d74 <HAL_InitTick+0xd0>)
 8000cec:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf0:	0c9b      	lsrs	r3, r3, #18
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <HAL_InitTick+0xd4>)
 8000cf8:	4a20      	ldr	r2, [pc, #128]	; (8000d7c <HAL_InitTick+0xd8>)
 8000cfa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <HAL_InitTick+0xd4>)
 8000cfe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d02:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d04:	4a1c      	ldr	r2, [pc, #112]	; (8000d78 <HAL_InitTick+0xd4>)
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <HAL_InitTick+0xd4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <HAL_InitTick+0xd4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000d16:	4818      	ldr	r0, [pc, #96]	; (8000d78 <HAL_InitTick+0xd4>)
 8000d18:	f004 fb35 	bl	8005386 <HAL_TIM_Base_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d11b      	bne.n	8000d62 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d2a:	4813      	ldr	r0, [pc, #76]	; (8000d78 <HAL_InitTick+0xd4>)
 8000d2c:	f004 fb8c 	bl	8005448 <HAL_TIM_Base_Start_IT>
 8000d30:	4603      	mov	r3, r0
 8000d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d111      	bne.n	8000d62 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d3e:	2036      	movs	r0, #54	; 0x36
 8000d40:	f001 faaa 	bl	8002298 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b0f      	cmp	r3, #15
 8000d48:	d808      	bhi.n	8000d5c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	2036      	movs	r0, #54	; 0x36
 8000d50:	f001 fa88 	bl	8002264 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_InitTick+0xdc>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e002      	b.n	8000d62 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3730      	adds	r7, #48	; 0x30
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000
 8000d74:	431bde83 	.word	0x431bde83
 8000d78:	20000378 	.word	0x20000378
 8000d7c:	40001000 	.word	0x40001000
 8000d80:	20000004 	.word	0x20000004

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <USB_LP_IRQHandler+0x10>)
 8000db6:	f001 fdec 	bl	8002992 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200023a8 	.word	0x200023a8

08000dc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <TIM6_DAC_IRQHandler+0x10>)
 8000dca:	f004 fbad 	bl	8005528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000378 	.word	0x20000378

08000dd8 <SystemInit>:

// Define our function pointer
//void (*SysMemBootJump)(void);

void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
//	  while (1);
//  }

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dfe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e02:	490e      	ldr	r1, [pc, #56]	; (8000e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <LoopForever+0xe>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e18:	4c0b      	ldr	r4, [pc, #44]	; (8000e48 <LoopForever+0x16>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e26:	f7ff ffd7 	bl	8000dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f00c f8a1 	bl	800cf70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e2e:	f7ff f9f7 	bl	8000220 <main>

08000e32 <LoopForever>:

LoopForever:
    b LoopForever
 8000e32:	e7fe      	b.n	8000e32 <LoopForever>
  ldr   r0, =_estack
 8000e34:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 8000e40:	0800d32c 	.word	0x0800d32c
  ldr r2, =_sbss
 8000e44:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8000e48:	20002ac4 	.word	0x20002ac4

08000e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_2_IRQHandler>

08000e4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f001 f9f8 	bl	800224e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5e:	200f      	movs	r0, #15
 8000e60:	f7ff ff20 	bl	8000ca4 <HAL_InitTick>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d002      	beq.n	8000e70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	71fb      	strb	r3, [r7, #7]
 8000e6e:	e001      	b.n	8000e74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e70:	f7ff fd50 	bl	8000914 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e74:	79fb      	ldrb	r3, [r7, #7]

}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <HAL_IncTick+0x1c>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a03      	ldr	r2, [pc, #12]	; (8000e9c <HAL_IncTick+0x1c>)
 8000e90:	6013      	str	r3, [r2, #0]
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	200003c4 	.word	0x200003c4
 8000ea0:	20000008 	.word	0x20000008

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	200003c4 	.word	0x200003c4

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff ffee 	bl	8000ea4 <HAL_GetTick>
 8000ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ed4:	d004      	beq.n	8000ee0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_Delay+0x40>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	4413      	add	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee0:	bf00      	nop
 8000ee2:	f7ff ffdf 	bl	8000ea4 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d8f7      	bhi.n	8000ee2 <HAL_Delay+0x26>
  {
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000008 	.word	0x20000008

08000f00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	609a      	str	r2, [r3, #8]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3360      	adds	r3, #96	; 0x60
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <LL_ADC_SetOffset+0x44>)
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	430a      	orrs	r2, r1
 8000f96:	4313      	orrs	r3, r2
 8000f98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fa0:	bf00      	nop
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	03fff000 	.word	0x03fff000

08000fb0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3360      	adds	r3, #96	; 0x60
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3360      	adds	r3, #96	; 0x60
 8000fec:	461a      	mov	r2, r3
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	431a      	orrs	r2, r3
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001006:	bf00      	nop
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001012:	b480      	push	{r7}
 8001014:	b087      	sub	sp, #28
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3360      	adds	r3, #96	; 0x60
 8001022:	461a      	mov	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	431a      	orrs	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800103c:	bf00      	nop
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001048:	b480      	push	{r7}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3360      	adds	r3, #96	; 0x60
 8001058:	461a      	mov	r2, r3
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	431a      	orrs	r2, r3
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001072:	bf00      	nop
 8001074:	371c      	adds	r7, #28
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	431a      	orrs	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	615a      	str	r2, [r3, #20]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3330      	adds	r3, #48	; 0x30
 80010b4:	461a      	mov	r2, r3
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	4413      	add	r3, r2
 80010c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f003 031f 	and.w	r3, r3, #31
 80010ce:	211f      	movs	r1, #31
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	401a      	ands	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	0e9b      	lsrs	r3, r3, #26
 80010dc:	f003 011f 	and.w	r1, r3, #31
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	f003 031f 	and.w	r3, r3, #31
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	431a      	orrs	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010f0:	bf00      	nop
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3314      	adds	r3, #20
 800110c:	461a      	mov	r2, r3
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	0e5b      	lsrs	r3, r3, #25
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	4413      	add	r3, r2
 800111a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	0d1b      	lsrs	r3, r3, #20
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	2107      	movs	r1, #7
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	401a      	ands	r2, r3
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	0d1b      	lsrs	r3, r3, #20
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	431a      	orrs	r2, r3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001146:	bf00      	nop
 8001148:	371c      	adds	r7, #28
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d10a      	bne.n	800117e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001174:	431a      	orrs	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800117c:	e00a      	b.n	8001194 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800118a:	43db      	mvns	r3, r3
 800118c:	401a      	ands	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	407f0000 	.word	0x407f0000

080011a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6093      	str	r3, [r2, #8]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011dc:	d101      	bne.n	80011e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001200:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001204:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800122c:	d101      	bne.n	8001232 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <LL_ADC_IsEnabled+0x18>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <LL_ADC_IsEnabled+0x1a>
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	2b04      	cmp	r3, #4
 8001278:	d101      	bne.n	800127e <LL_ADC_REG_IsConversionOngoing+0x18>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	2b08      	cmp	r3, #8
 800129e:	d101      	bne.n	80012a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e1a1      	b.n	8001612 <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d109      	bne.n	80012f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fb43 	bl	8000968 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff67 	bl	80011c8 <LL_ADC_IsDeepPowerDownEnabled>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d004      	beq.n	800130a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff4d 	bl	80011a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff82 	bl	8001218 <LL_ADC_IsInternalRegulatorEnabled>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d115      	bne.n	8001346 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff66 	bl	80011f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001324:	4b9a      	ldr	r3, [pc, #616]	; (8001590 <HAL_ADC_Init+0x2dc>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	099b      	lsrs	r3, r3, #6
 800132a:	4a9a      	ldr	r2, [pc, #616]	; (8001594 <HAL_ADC_Init+0x2e0>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	099b      	lsrs	r3, r3, #6
 8001332:	3301      	adds	r3, #1
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001338:	e002      	b.n	8001340 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	3b01      	subs	r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f9      	bne.n	800133a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff64 	bl	8001218 <LL_ADC_IsInternalRegulatorEnabled>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10d      	bne.n	8001372 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135a:	f043 0210 	orr.w	r2, r3, #16
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001366:	f043 0201 	orr.w	r2, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff75 	bl	8001266 <LL_ADC_REG_IsConversionOngoing>
 800137c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 813a 	bne.w	8001600 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2b00      	cmp	r3, #0
 8001390:	f040 8136 	bne.w	8001600 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001398:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800139c:	f043 0202 	orr.w	r2, r3, #2
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff49 	bl	8001240 <LL_ADC_IsEnabled>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d137      	bne.n	8001424 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013bc:	d004      	beq.n	80013c8 <HAL_ADC_Init+0x114>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a75      	ldr	r2, [pc, #468]	; (8001598 <HAL_ADC_Init+0x2e4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d10f      	bne.n	80013e8 <HAL_ADC_Init+0x134>
 80013c8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80013cc:	f7ff ff38 	bl	8001240 <LL_ADC_IsEnabled>
 80013d0:	4604      	mov	r4, r0
 80013d2:	4871      	ldr	r0, [pc, #452]	; (8001598 <HAL_ADC_Init+0x2e4>)
 80013d4:	f7ff ff34 	bl	8001240 <LL_ADC_IsEnabled>
 80013d8:	4603      	mov	r3, r0
 80013da:	4323      	orrs	r3, r4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bf0c      	ite	eq
 80013e0:	2301      	moveq	r3, #1
 80013e2:	2300      	movne	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	e008      	b.n	80013fa <HAL_ADC_Init+0x146>
 80013e8:	486c      	ldr	r0, [pc, #432]	; (800159c <HAL_ADC_Init+0x2e8>)
 80013ea:	f7ff ff29 	bl	8001240 <LL_ADC_IsEnabled>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf0c      	ite	eq
 80013f4:	2301      	moveq	r3, #1
 80013f6:	2300      	movne	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d012      	beq.n	8001424 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001406:	d004      	beq.n	8001412 <HAL_ADC_Init+0x15e>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a62      	ldr	r2, [pc, #392]	; (8001598 <HAL_ADC_Init+0x2e4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d101      	bne.n	8001416 <HAL_ADC_Init+0x162>
 8001412:	4a63      	ldr	r2, [pc, #396]	; (80015a0 <HAL_ADC_Init+0x2ec>)
 8001414:	e000      	b.n	8001418 <HAL_ADC_Init+0x164>
 8001416:	4a63      	ldr	r2, [pc, #396]	; (80015a4 <HAL_ADC_Init+0x2f0>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	4619      	mov	r1, r3
 800141e:	4610      	mov	r0, r2
 8001420:	f7ff fd6e 	bl	8000f00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7f5b      	ldrb	r3, [r3, #29]
 8001428:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800142e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001434:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800143a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001442:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800144e:	2b01      	cmp	r3, #1
 8001450:	d106      	bne.n	8001460 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	3b01      	subs	r3, #1
 8001458:	045b      	lsls	r3, r3, #17
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	2b00      	cmp	r3, #0
 8001466:	d009      	beq.n	800147c <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	4b49      	ldr	r3, [pc, #292]	; (80015a8 <HAL_ADC_Init+0x2f4>)
 8001484:	4013      	ands	r3, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	69b9      	ldr	r1, [r7, #24]
 800148c:	430b      	orrs	r3, r1
 800148e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fedb 	bl	8001266 <LL_ADC_REG_IsConversionOngoing>
 80014b0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fee8 	bl	800128c <LL_ADC_INJ_IsConversionOngoing>
 80014bc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d17b      	bne.n	80015bc <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d178      	bne.n	80015bc <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014ce:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014d6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014e6:	f023 0302 	bic.w	r3, r3, #2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6812      	ldr	r2, [r2, #0]
 80014ee:	69b9      	ldr	r1, [r7, #24]
 80014f0:	430b      	orrs	r3, r1
 80014f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d017      	beq.n	800152c <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800150a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001514:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001518:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6911      	ldr	r1, [r2, #16]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	430b      	orrs	r3, r1
 8001526:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800152a:	e013      	b.n	8001554 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	691a      	ldr	r2, [r3, #16]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800153a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800154c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001550:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800155a:	2b01      	cmp	r3, #1
 800155c:	d126      	bne.n	80015ac <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001568:	f023 0304 	bic.w	r3, r3, #4
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001574:	4311      	orrs	r1, r2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800157a:	4311      	orrs	r1, r2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001580:	430a      	orrs	r2, r1
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0201 	orr.w	r2, r2, #1
 800158c:	611a      	str	r2, [r3, #16]
 800158e:	e015      	b.n	80015bc <HAL_ADC_Init+0x308>
 8001590:	20000000 	.word	0x20000000
 8001594:	053e2d63 	.word	0x053e2d63
 8001598:	50000100 	.word	0x50000100
 800159c:	50000400 	.word	0x50000400
 80015a0:	50000300 	.word	0x50000300
 80015a4:	50000700 	.word	0x50000700
 80015a8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	691a      	ldr	r2, [r3, #16]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d10c      	bne.n	80015de <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f023 010f 	bic.w	r1, r3, #15
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	1e5a      	subs	r2, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	631a      	str	r2, [r3, #48]	; 0x30
 80015dc:	e007      	b.n	80015ee <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 020f 	bic.w	r2, r2, #15
 80015ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f2:	f023 0303 	bic.w	r3, r3, #3
 80015f6:	f043 0201 	orr.w	r2, r3, #1
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80015fe:	e007      	b.n	8001610 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001604:	f043 0210 	orr.w	r2, r3, #16
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001610:	7ffb      	ldrb	r3, [r7, #31]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	; 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd90      	pop	{r4, r7, pc}
 800161a:	bf00      	nop

0800161c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b0b6      	sub	sp, #216	; 0xd8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001636:	2b01      	cmp	r3, #1
 8001638:	d102      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x24>
 800163a:	2302      	movs	r3, #2
 800163c:	f000 bc04 	b.w	8001e48 <HAL_ADC_ConfigChannel+0x82c>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fe0a 	bl	8001266 <LL_ADC_REG_IsConversionOngoing>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	f040 83e8 	bne.w	8001e2a <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	6859      	ldr	r1, [r3, #4]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	f7ff fd1c 	bl	80010a4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fdf8 	bl	8001266 <LL_ADC_REG_IsConversionOngoing>
 8001676:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fe04 	bl	800128c <LL_ADC_INJ_IsConversionOngoing>
 8001684:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001688:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800168c:	2b00      	cmp	r3, #0
 800168e:	f040 81d9 	bne.w	8001a44 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001692:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001696:	2b00      	cmp	r3, #0
 8001698:	f040 81d4 	bne.w	8001a44 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016a4:	d10f      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	4619      	mov	r1, r3
 80016b2:	f7ff fd23 	bl	80010fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fcdd 	bl	800107e <LL_ADC_SetSamplingTimeCommonConfig>
 80016c4:	e00e      	b.n	80016e4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	6819      	ldr	r1, [r3, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	461a      	mov	r2, r3
 80016d4:	f7ff fd12 	bl	80010fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fccd 	bl	800107e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	695a      	ldr	r2, [r3, #20]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	2b04      	cmp	r3, #4
 8001704:	d022      	beq.n	800174c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	6919      	ldr	r1, [r3, #16]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001716:	f7ff fc27 	bl	8000f68 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	6919      	ldr	r1, [r3, #16]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	461a      	mov	r2, r3
 8001728:	f7ff fc73 	bl	8001012 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6818      	ldr	r0, [r3, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	6919      	ldr	r1, [r3, #16]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	7f1b      	ldrb	r3, [r3, #28]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d102      	bne.n	8001742 <HAL_ADC_ConfigChannel+0x126>
 800173c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001740:	e000      	b.n	8001744 <HAL_ADC_ConfigChannel+0x128>
 8001742:	2300      	movs	r3, #0
 8001744:	461a      	mov	r2, r3
 8001746:	f7ff fc7f 	bl	8001048 <LL_ADC_SetOffsetSaturation>
 800174a:	e17b      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fc2c 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10a      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x15c>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fc21 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	0e9b      	lsrs	r3, r3, #26
 8001772:	f003 021f 	and.w	r2, r3, #31
 8001776:	e01e      	b.n	80017b6 <HAL_ADC_ConfigChannel+0x19a>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fc16 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001784:	4603      	mov	r3, r0
 8001786:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800178e:	fa93 f3a3 	rbit	r3, r3
 8001792:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001796:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800179a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800179e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80017a6:	2320      	movs	r3, #32
 80017a8:	e004      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80017aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017ae:	fab3 f383 	clz	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d105      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x1b2>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	0e9b      	lsrs	r3, r3, #26
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	e018      	b.n	8001800 <HAL_ADC_ConfigChannel+0x1e4>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80017da:	fa93 f3a3 	rbit	r3, r3
 80017de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80017e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80017ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80017f2:	2320      	movs	r3, #32
 80017f4:	e004      	b.n	8001800 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80017f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017fa:	fab3 f383 	clz	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001800:	429a      	cmp	r2, r3
 8001802:	d106      	bne.n	8001812 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fbe5 	bl	8000fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2101      	movs	r1, #1
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fbc9 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10a      	bne.n	800183e <HAL_ADC_ConfigChannel+0x222>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2101      	movs	r1, #1
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fbbe 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	0e9b      	lsrs	r3, r3, #26
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	e01e      	b.n	800187c <HAL_ADC_ConfigChannel+0x260>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2101      	movs	r1, #1
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fbb3 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001854:	fa93 f3a3 	rbit	r3, r3
 8001858:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800185c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001860:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001864:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800186c:	2320      	movs	r3, #32
 800186e:	e004      	b.n	800187a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001870:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001874:	fab3 f383 	clz	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001884:	2b00      	cmp	r3, #0
 8001886:	d105      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x278>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0e9b      	lsrs	r3, r3, #26
 800188e:	f003 031f 	and.w	r3, r3, #31
 8001892:	e018      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x2aa>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018a0:	fa93 f3a3 	rbit	r3, r3
 80018a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80018a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80018b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80018b8:	2320      	movs	r3, #32
 80018ba:	e004      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80018bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018c0:	fab3 f383 	clz	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d106      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2200      	movs	r2, #0
 80018d0:	2101      	movs	r1, #1
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fb82 	bl	8000fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2102      	movs	r1, #2
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fb66 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10a      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x2e8>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2102      	movs	r1, #2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fb5b 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	0e9b      	lsrs	r3, r3, #26
 80018fe:	f003 021f 	and.w	r2, r3, #31
 8001902:	e01e      	b.n	8001942 <HAL_ADC_ConfigChannel+0x326>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2102      	movs	r1, #2
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fb50 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 8001910:	4603      	mov	r3, r0
 8001912:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800191a:	fa93 f3a3 	rbit	r3, r3
 800191e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001922:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001926:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800192a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001932:	2320      	movs	r3, #32
 8001934:	e004      	b.n	8001940 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001936:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194a:	2b00      	cmp	r3, #0
 800194c:	d105      	bne.n	800195a <HAL_ADC_ConfigChannel+0x33e>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	0e9b      	lsrs	r3, r3, #26
 8001954:	f003 031f 	and.w	r3, r3, #31
 8001958:	e016      	b.n	8001988 <HAL_ADC_ConfigChannel+0x36c>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001966:	fa93 f3a3 	rbit	r3, r3
 800196a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800196c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800196e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001972:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800197a:	2320      	movs	r3, #32
 800197c:	e004      	b.n	8001988 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800197e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001982:	fab3 f383 	clz	r3, r3
 8001986:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001988:	429a      	cmp	r2, r3
 800198a:	d106      	bne.n	800199a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2200      	movs	r2, #0
 8001992:	2102      	movs	r1, #2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fb21 	bl	8000fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2103      	movs	r1, #3
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fb05 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10a      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x3aa>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2103      	movs	r1, #3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fafa 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	0e9b      	lsrs	r3, r3, #26
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	e017      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x3da>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2103      	movs	r1, #3
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff faef 	bl	8000fb0 <LL_ADC_GetOffsetChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019d8:	fa93 f3a3 	rbit	r3, r3
 80019dc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80019de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019e0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80019e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80019e8:	2320      	movs	r3, #32
 80019ea:	e003      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80019ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d105      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x3f2>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	0e9b      	lsrs	r3, r3, #26
 8001a08:	f003 031f 	and.w	r3, r3, #31
 8001a0c:	e011      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x416>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001a26:	2320      	movs	r3, #32
 8001a28:	e003      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d106      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2103      	movs	r1, #3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff facc 	bl	8000fdc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fbf9 	bl	8001240 <LL_ADC_IsEnabled>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f040 813d 	bne.w	8001cd0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6819      	ldr	r1, [r3, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	461a      	mov	r2, r3
 8001a64:	f7ff fb76 	bl	8001154 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4aa2      	ldr	r2, [pc, #648]	; (8001cf8 <HAL_ADC_ConfigChannel+0x6dc>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	f040 812e 	bne.w	8001cd0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10b      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x480>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0e9b      	lsrs	r3, r3, #26
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	2b09      	cmp	r3, #9
 8001a92:	bf94      	ite	ls
 8001a94:	2301      	movls	r3, #1
 8001a96:	2300      	movhi	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	e019      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x4b4>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa4:	fa93 f3a3 	rbit	r3, r3
 8001aa8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aac:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001ab4:	2320      	movs	r3, #32
 8001ab6:	e003      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	2b09      	cmp	r3, #9
 8001ac8:	bf94      	ite	ls
 8001aca:	2301      	movls	r3, #1
 8001acc:	2300      	movhi	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d079      	beq.n	8001bc8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x4d4>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0e9b      	lsrs	r3, r3, #26
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	069b      	lsls	r3, r3, #26
 8001aea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aee:	e015      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x500>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b00:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	e003      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	3301      	adds	r3, #1
 8001b16:	069b      	lsls	r3, r3, #26
 8001b18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d109      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x520>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0e9b      	lsrs	r3, r3, #26
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	2101      	movs	r1, #1
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	e017      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x550>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b4c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001b54:	2320      	movs	r3, #32
 8001b56:	e003      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	3301      	adds	r3, #1
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	2101      	movs	r1, #1
 8001b68:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6c:	ea42 0103 	orr.w	r1, r2, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10a      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x576>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0e9b      	lsrs	r3, r3, #26
 8001b82:	3301      	adds	r3, #1
 8001b84:	f003 021f 	and.w	r2, r3, #31
 8001b88:	4613      	mov	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	051b      	lsls	r3, r3, #20
 8001b90:	e018      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x5a8>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b9a:	fa93 f3a3 	rbit	r3, r3
 8001b9e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001baa:	2320      	movs	r3, #32
 8001bac:	e003      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	e07e      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d107      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x5c8>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0e9b      	lsrs	r3, r3, #26
 8001bda:	3301      	adds	r3, #1
 8001bdc:	069b      	lsls	r3, r3, #26
 8001bde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001be2:	e015      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x5f4>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001bfc:	2320      	movs	r3, #32
 8001bfe:	e003      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	3301      	adds	r3, #1
 8001c0a:	069b      	lsls	r3, r3, #26
 8001c0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d109      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x614>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0e9b      	lsrs	r3, r3, #26
 8001c22:	3301      	adds	r3, #1
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	e017      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x644>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	61fb      	str	r3, [r7, #28]
  return result;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001c48:	2320      	movs	r3, #32
 8001c4a:	e003      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	3301      	adds	r3, #1
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	ea42 0103 	orr.w	r1, r2, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10d      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x670>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	0e9b      	lsrs	r3, r3, #26
 8001c76:	3301      	adds	r3, #1
 8001c78:	f003 021f 	and.w	r2, r3, #31
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	3b1e      	subs	r3, #30
 8001c84:	051b      	lsls	r3, r3, #20
 8001c86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	e01b      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x6a8>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	613b      	str	r3, [r7, #16]
  return result;
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	e003      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f003 021f 	and.w	r2, r3, #31
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	3b1e      	subs	r3, #30
 8001cbe:	051b      	lsls	r3, r3, #20
 8001cc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	6892      	ldr	r2, [r2, #8]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f7ff fa16 	bl	80010fc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_ADC_ConfigChannel+0x6e0>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80af 	beq.w	8001e3c <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ce6:	d004      	beq.n	8001cf2 <HAL_ADC_ConfigChannel+0x6d6>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <HAL_ADC_ConfigChannel+0x6e4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d10a      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x6ec>
 8001cf2:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <HAL_ADC_ConfigChannel+0x6e8>)
 8001cf4:	e009      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x6ee>
 8001cf6:	bf00      	nop
 8001cf8:	407f0000 	.word	0x407f0000
 8001cfc:	80080000 	.word	0x80080000
 8001d00:	50000100 	.word	0x50000100
 8001d04:	50000300 	.word	0x50000300
 8001d08:	4b51      	ldr	r3, [pc, #324]	; (8001e50 <HAL_ADC_ConfigChannel+0x834>)
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f91e 	bl	8000f4c <LL_ADC_GetCommonPathInternalCh>
 8001d10:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a4e      	ldr	r2, [pc, #312]	; (8001e54 <HAL_ADC_ConfigChannel+0x838>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d004      	beq.n	8001d28 <HAL_ADC_ConfigChannel+0x70c>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a4d      	ldr	r2, [pc, #308]	; (8001e58 <HAL_ADC_ConfigChannel+0x83c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d134      	bne.n	8001d92 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d12e      	bne.n	8001d92 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d3c:	d17e      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d46:	d004      	beq.n	8001d52 <HAL_ADC_ConfigChannel+0x736>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a43      	ldr	r2, [pc, #268]	; (8001e5c <HAL_ADC_ConfigChannel+0x840>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x73a>
 8001d52:	4a43      	ldr	r2, [pc, #268]	; (8001e60 <HAL_ADC_ConfigChannel+0x844>)
 8001d54:	e000      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x73c>
 8001d56:	4a3e      	ldr	r2, [pc, #248]	; (8001e50 <HAL_ADC_ConfigChannel+0x834>)
 8001d58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d60:	4619      	mov	r1, r3
 8001d62:	4610      	mov	r0, r2
 8001d64:	f7ff f8df 	bl	8000f26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d68:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <HAL_ADC_ConfigChannel+0x848>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	099b      	lsrs	r3, r3, #6
 8001d6e:	4a3e      	ldr	r2, [pc, #248]	; (8001e68 <HAL_ADC_ConfigChannel+0x84c>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	099b      	lsrs	r3, r3, #6
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d82:	e002      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f9      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d90:	e054      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a35      	ldr	r2, [pc, #212]	; (8001e6c <HAL_ADC_ConfigChannel+0x850>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d120      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x7c2>
 8001d9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d11a      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001db0:	d144      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dba:	d004      	beq.n	8001dc6 <HAL_ADC_ConfigChannel+0x7aa>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a26      	ldr	r2, [pc, #152]	; (8001e5c <HAL_ADC_ConfigChannel+0x840>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d101      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x7ae>
 8001dc6:	4a26      	ldr	r2, [pc, #152]	; (8001e60 <HAL_ADC_ConfigChannel+0x844>)
 8001dc8:	e000      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x7b0>
 8001dca:	4a21      	ldr	r2, [pc, #132]	; (8001e50 <HAL_ADC_ConfigChannel+0x834>)
 8001dcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	f7ff f8a5 	bl	8000f26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ddc:	e02e      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a23      	ldr	r2, [pc, #140]	; (8001e70 <HAL_ADC_ConfigChannel+0x854>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d129      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001de8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d123      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <HAL_ADC_ConfigChannel+0x840>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d01e      	beq.n	8001e3c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e06:	d004      	beq.n	8001e12 <HAL_ADC_ConfigChannel+0x7f6>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <HAL_ADC_ConfigChannel+0x840>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x7fa>
 8001e12:	4a13      	ldr	r2, [pc, #76]	; (8001e60 <HAL_ADC_ConfigChannel+0x844>)
 8001e14:	e000      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x7fc>
 8001e16:	4a0e      	ldr	r2, [pc, #56]	; (8001e50 <HAL_ADC_ConfigChannel+0x834>)
 8001e18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e20:	4619      	mov	r1, r3
 8001e22:	4610      	mov	r0, r2
 8001e24:	f7ff f87f 	bl	8000f26 <LL_ADC_SetCommonPathInternalCh>
 8001e28:	e008      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2e:	f043 0220 	orr.w	r2, r3, #32
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001e44:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	37d8      	adds	r7, #216	; 0xd8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	50000700 	.word	0x50000700
 8001e54:	c3210000 	.word	0xc3210000
 8001e58:	90c00010 	.word	0x90c00010
 8001e5c:	50000100 	.word	0x50000100
 8001e60:	50000300 	.word	0x50000300
 8001e64:	20000000 	.word	0x20000000
 8001e68:	053e2d63 	.word	0x053e2d63
 8001e6c:	c7520000 	.word	0xc7520000
 8001e70:	cb840000 	.word	0xcb840000

08001e74 <LL_ADC_IsEnabled>:
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <LL_ADC_IsEnabled+0x18>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <LL_ADC_IsEnabled+0x1a>
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_ADC_REG_IsConversionOngoing>:
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d101      	bne.n	8001eb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b0a1      	sub	sp, #132	; 0x84
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e0cb      	b.n	8002076 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001eea:	2300      	movs	r3, #0
 8001eec:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ef6:	d102      	bne.n	8001efe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ef8:	4b61      	ldr	r3, [pc, #388]	; (8002080 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	e001      	b.n	8001f02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10b      	bne.n	8001f20 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	f043 0220 	orr.w	r2, r3, #32
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0aa      	b.n	8002076 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ffb9 	bl	8001e9a <LL_ADC_REG_IsConversionOngoing>
 8001f28:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ffb3 	bl	8001e9a <LL_ADC_REG_IsConversionOngoing>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 808c 	bne.w	8002054 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f040 8088 	bne.w	8002054 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f4c:	d004      	beq.n	8001f58 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a4b      	ldr	r2, [pc, #300]	; (8002080 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8001f58:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8001f5a:	e000      	b.n	8001f5e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8001f5c:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8001f5e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d041      	beq.n	8001fec <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f7a:	035b      	lsls	r3, r3, #13
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f8c:	d004      	beq.n	8001f98 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a3b      	ldr	r2, [pc, #236]	; (8002080 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d10f      	bne.n	8001fb8 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8001f98:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f9c:	f7ff ff6a 	bl	8001e74 <LL_ADC_IsEnabled>
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	4837      	ldr	r0, [pc, #220]	; (8002080 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8001fa4:	f7ff ff66 	bl	8001e74 <LL_ADC_IsEnabled>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4323      	orrs	r3, r4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf0c      	ite	eq
 8001fb0:	2301      	moveq	r3, #1
 8001fb2:	2300      	movne	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	e008      	b.n	8001fca <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8001fb8:	4834      	ldr	r0, [pc, #208]	; (800208c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001fba:	f7ff ff5b 	bl	8001e74 <LL_ADC_IsEnabled>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2301      	moveq	r3, #1
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d04c      	beq.n	8002068 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fd6:	f023 030f 	bic.w	r3, r3, #15
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	6811      	ldr	r1, [r2, #0]
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	6892      	ldr	r2, [r2, #8]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fe8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fea:	e03d      	b.n	8002068 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001fec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ff6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002000:	d004      	beq.n	800200c <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d10f      	bne.n	800202c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 800200c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002010:	f7ff ff30 	bl	8001e74 <LL_ADC_IsEnabled>
 8002014:	4604      	mov	r4, r0
 8002016:	481a      	ldr	r0, [pc, #104]	; (8002080 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002018:	f7ff ff2c 	bl	8001e74 <LL_ADC_IsEnabled>
 800201c:	4603      	mov	r3, r0
 800201e:	4323      	orrs	r3, r4
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	e008      	b.n	800203e <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 800202c:	4817      	ldr	r0, [pc, #92]	; (800208c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800202e:	f7ff ff21 	bl	8001e74 <LL_ADC_IsEnabled>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d012      	beq.n	8002068 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800204a:	f023 030f 	bic.w	r3, r3, #15
 800204e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002050:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002052:	e009      	b.n	8002068 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	f043 0220 	orr.w	r2, r3, #32
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002066:	e000      	b.n	800206a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002068:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002072:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002076:	4618      	mov	r0, r3
 8002078:	3784      	adds	r7, #132	; 0x84
 800207a:	46bd      	mov	sp, r7
 800207c:	bd90      	pop	{r4, r7, pc}
 800207e:	bf00      	nop
 8002080:	50000100 	.word	0x50000100
 8002084:	50000300 	.word	0x50000300
 8002088:	50000700 	.word	0x50000700
 800208c:	50000400 	.word	0x50000400

08002090 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e023      	b.n	80020ea <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe fd52 	bl	8000b60 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002110:	4013      	ands	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800211c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <__NVIC_GetPriorityGrouping+0x18>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f003 0307 	and.w	r3, r3, #7
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	2b00      	cmp	r3, #0
 8002168:	db0b      	blt.n	8002182 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	4907      	ldr	r1, [pc, #28]	; (8002190 <__NVIC_EnableIRQ+0x38>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2001      	movs	r0, #1
 800217a:	fa00 f202 	lsl.w	r2, r0, r2
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000e100 	.word	0xe000e100

08002194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db0a      	blt.n	80021be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	490c      	ldr	r1, [pc, #48]	; (80021e0 <__NVIC_SetPriority+0x4c>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021bc:	e00a      	b.n	80021d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4908      	ldr	r1, [pc, #32]	; (80021e4 <__NVIC_SetPriority+0x50>)
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3b04      	subs	r3, #4
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	761a      	strb	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f1c3 0307 	rsb	r3, r3, #7
 8002202:	2b04      	cmp	r3, #4
 8002204:	bf28      	it	cs
 8002206:	2304      	movcs	r3, #4
 8002208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3304      	adds	r3, #4
 800220e:	2b06      	cmp	r3, #6
 8002210:	d902      	bls.n	8002218 <NVIC_EncodePriority+0x30>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3b03      	subs	r3, #3
 8002216:	e000      	b.n	800221a <NVIC_EncodePriority+0x32>
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	401a      	ands	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002230:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43d9      	mvns	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	4313      	orrs	r3, r2
         );
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	; 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ff4c 	bl	80020f4 <__NVIC_SetPriorityGrouping>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002272:	f7ff ff63 	bl	800213c <__NVIC_GetPriorityGrouping>
 8002276:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	6978      	ldr	r0, [r7, #20]
 800227e:	f7ff ffb3 	bl	80021e8 <NVIC_EncodePriority>
 8002282:	4602      	mov	r2, r0
 8002284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff82 	bl	8002194 <__NVIC_SetPriority>
}
 8002290:	bf00      	nop
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ff56 	bl	8002158 <__NVIC_EnableIRQ>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e033      	b.n	800232e <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fc60 	bl	8000ba0 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f854 	bl	8002394 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f822 	bl	8002336 <FMAC_Reset>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d10c      	bne.n	8002312 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fc:	f043 0210 	orr.w	r2, r3, #16
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	22a0      	movs	r2, #160	; 0xa0
 8002308:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	e008      	b.n	8002324 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800232c:	7bfb      	ldrb	r3, [r7, #15]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800233e:	f7fe fdb1 	bl	8000ea4 <HAL_GetTick>
 8002342:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002352:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8002354:	e00f      	b.n	8002376 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8002356:	f7fe fda5 	bl	8000ea4 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002364:	d907      	bls.n	8002376 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e00a      	b.n	800238c <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1e8      	bne.n	8002356 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f807 	bl	80023b0 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f81b 	bl	80023de <FMAC_ResetOutputStateAndDataPointers>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2220      	movs	r2, #32
 80023ce:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800241a:	e15a      	b.n	80026d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	4013      	ands	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 814c 	beq.w	80026cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b01      	cmp	r3, #1
 800243e:	d005      	beq.n	800244c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002448:	2b02      	cmp	r3, #2
 800244a:	d130      	bne.n	80024ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2203      	movs	r2, #3
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002482:	2201      	movs	r2, #1
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	f003 0201 	and.w	r2, r3, #1
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d017      	beq.n	80024ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	2203      	movs	r2, #3
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d123      	bne.n	800253e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	08da      	lsrs	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3208      	adds	r2, #8
 80024fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002502:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	220f      	movs	r2, #15
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	08da      	lsrs	r2, r3, #3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3208      	adds	r2, #8
 8002538:	6939      	ldr	r1, [r7, #16]
 800253a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	2203      	movs	r2, #3
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0203 	and.w	r2, r3, #3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 80a6 	beq.w	80026cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002580:	4b5b      	ldr	r3, [pc, #364]	; (80026f0 <HAL_GPIO_Init+0x2e4>)
 8002582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002584:	4a5a      	ldr	r2, [pc, #360]	; (80026f0 <HAL_GPIO_Init+0x2e4>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6613      	str	r3, [r2, #96]	; 0x60
 800258c:	4b58      	ldr	r3, [pc, #352]	; (80026f0 <HAL_GPIO_Init+0x2e4>)
 800258e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002598:	4a56      	ldr	r2, [pc, #344]	; (80026f4 <HAL_GPIO_Init+0x2e8>)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	089b      	lsrs	r3, r3, #2
 800259e:	3302      	adds	r3, #2
 80025a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	220f      	movs	r2, #15
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025c2:	d01f      	beq.n	8002604 <HAL_GPIO_Init+0x1f8>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a4c      	ldr	r2, [pc, #304]	; (80026f8 <HAL_GPIO_Init+0x2ec>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d019      	beq.n	8002600 <HAL_GPIO_Init+0x1f4>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a4b      	ldr	r2, [pc, #300]	; (80026fc <HAL_GPIO_Init+0x2f0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d013      	beq.n	80025fc <HAL_GPIO_Init+0x1f0>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a4a      	ldr	r2, [pc, #296]	; (8002700 <HAL_GPIO_Init+0x2f4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d00d      	beq.n	80025f8 <HAL_GPIO_Init+0x1ec>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a49      	ldr	r2, [pc, #292]	; (8002704 <HAL_GPIO_Init+0x2f8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d007      	beq.n	80025f4 <HAL_GPIO_Init+0x1e8>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a48      	ldr	r2, [pc, #288]	; (8002708 <HAL_GPIO_Init+0x2fc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d101      	bne.n	80025f0 <HAL_GPIO_Init+0x1e4>
 80025ec:	2305      	movs	r3, #5
 80025ee:	e00a      	b.n	8002606 <HAL_GPIO_Init+0x1fa>
 80025f0:	2306      	movs	r3, #6
 80025f2:	e008      	b.n	8002606 <HAL_GPIO_Init+0x1fa>
 80025f4:	2304      	movs	r3, #4
 80025f6:	e006      	b.n	8002606 <HAL_GPIO_Init+0x1fa>
 80025f8:	2303      	movs	r3, #3
 80025fa:	e004      	b.n	8002606 <HAL_GPIO_Init+0x1fa>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e002      	b.n	8002606 <HAL_GPIO_Init+0x1fa>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_GPIO_Init+0x1fa>
 8002604:	2300      	movs	r3, #0
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	f002 0203 	and.w	r2, r2, #3
 800260c:	0092      	lsls	r2, r2, #2
 800260e:	4093      	lsls	r3, r2
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002616:	4937      	ldr	r1, [pc, #220]	; (80026f4 <HAL_GPIO_Init+0x2e8>)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	089b      	lsrs	r3, r3, #2
 800261c:	3302      	adds	r3, #2
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002624:	4b39      	ldr	r3, [pc, #228]	; (800270c <HAL_GPIO_Init+0x300>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43db      	mvns	r3, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002648:	4a30      	ldr	r2, [pc, #192]	; (800270c <HAL_GPIO_Init+0x300>)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800264e:	4b2f      	ldr	r3, [pc, #188]	; (800270c <HAL_GPIO_Init+0x300>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	43db      	mvns	r3, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002672:	4a26      	ldr	r2, [pc, #152]	; (800270c <HAL_GPIO_Init+0x300>)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002678:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_GPIO_Init+0x300>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	43db      	mvns	r3, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800269c:	4a1b      	ldr	r2, [pc, #108]	; (800270c <HAL_GPIO_Init+0x300>)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026a2:	4b1a      	ldr	r3, [pc, #104]	; (800270c <HAL_GPIO_Init+0x300>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026c6:	4a11      	ldr	r2, [pc, #68]	; (800270c <HAL_GPIO_Init+0x300>)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	3301      	adds	r3, #1
 80026d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f47f ae9d 	bne.w	800241c <HAL_GPIO_Init+0x10>
  }
}
 80026e2:	bf00      	nop
 80026e4:	bf00      	nop
 80026e6:	371c      	adds	r7, #28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40010000 	.word	0x40010000
 80026f8:	48000400 	.word	0x48000400
 80026fc:	48000800 	.word	0x48000800
 8002700:	48000c00 	.word	0x48000c00
 8002704:	48001000 	.word	0x48001000
 8002708:	48001400 	.word	0x48001400
 800270c:	40010400 	.word	0x40010400

08002710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
 800271c:	4613      	mov	r3, r2
 800271e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002720:	787b      	ldrb	r3, [r7, #1]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800272c:	e002      	b.n	8002734 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800272e:	887a      	ldrh	r2, [r7, #2]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002742:	b08b      	sub	sp, #44	; 0x2c
 8002744:	af06      	add	r7, sp, #24
 8002746:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e0d7      	b.n	8002902 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f00a f92e 	bl	800c9c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2203      	movs	r2, #3
 8002770:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f003 f978 	bl	8005a6e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800277e:	2300      	movs	r3, #0
 8002780:	73fb      	strb	r3, [r7, #15]
 8002782:	e04c      	b.n	800281e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	440b      	add	r3, r1
 8002794:	3301      	adds	r3, #1
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027ae:	7bfa      	ldrb	r2, [r7, #15]
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	b298      	uxth	r0, r3
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	3336      	adds	r3, #54	; 0x36
 80027c2:	4602      	mov	r2, r0
 80027c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	440b      	add	r3, r1
 80027d6:	3303      	adds	r3, #3
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	3338      	adds	r3, #56	; 0x38
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	440b      	add	r3, r1
 80027fe:	333c      	adds	r3, #60	; 0x3c
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	3340      	adds	r3, #64	; 0x40
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	3301      	adds	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
 800281e:	7bfa      	ldrb	r2, [r7, #15]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	429a      	cmp	r2, r3
 8002826:	d3ad      	bcc.n	8002784 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002828:	2300      	movs	r3, #0
 800282a:	73fb      	strb	r3, [r7, #15]
 800282c:	e044      	b.n	80028b8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800282e:	7bfa      	ldrb	r2, [r7, #15]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	440b      	add	r3, r1
 800283c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	440b      	add	r3, r1
 8002852:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800285a:	7bfa      	ldrb	r2, [r7, #15]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	440b      	add	r3, r1
 8002868:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002870:	7bfa      	ldrb	r2, [r7, #15]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	440b      	add	r3, r1
 800287e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002886:	7bfa      	ldrb	r2, [r7, #15]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	440b      	add	r3, r1
 8002894:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	440b      	add	r3, r1
 80028aa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	3301      	adds	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d3b5      	bcc.n	800282e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	687e      	ldr	r6, [r7, #4]
 80028ca:	466d      	mov	r5, sp
 80028cc:	f106 0410 	add.w	r4, r6, #16
 80028d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	602b      	str	r3, [r5, #0]
 80028d8:	1d33      	adds	r3, r6, #4
 80028da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028dc:	6838      	ldr	r0, [r7, #0]
 80028de:	f003 f8e1 	bl	8005aa4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d102      	bne.n	8002900 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f001 fbeb 	bl	80040d6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800290a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_PCD_Start+0x16>
 800291c:	2302      	movs	r3, #2
 800291e:	e012      	b.n	8002946 <HAL_PCD_Start+0x3c>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f003 f887 	bl	8005a40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f005 f8b3 	bl	8007aa2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_PCD_Stop+0x16>
 8002960:	2302      	movs	r3, #2
 8002962:	e012      	b.n	800298a <HAL_PCD_Stop+0x3c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f003 f87c 	bl	8005a6e <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f005 f8a8 	bl	8007ad0 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f005 f8ab 	bl	8007afa <USB_ReadInterrupts>
 80029a4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 fac6 	bl	8002f42 <PCD_EP_ISR_Handler>

    return;
 80029b6:	e110      	b.n	8002bda <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d013      	beq.n	80029ea <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d4:	b292      	uxth	r2, r2
 80029d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f00a f885 	bl	800caea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80029e0:	2100      	movs	r1, #0
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f8fc 	bl	8002be0 <HAL_PCD_SetAddress>

    return;
 80029e8:	e0f7      	b.n	8002bda <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00c      	beq.n	8002a0e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a06:	b292      	uxth	r2, r2
 8002a08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002a0c:	e0e5      	b.n	8002bda <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00c      	beq.n	8002a32 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a2a:	b292      	uxth	r2, r2
 8002a2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002a30:	e0d3      	b.n	8002bda <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d034      	beq.n	8002aa6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0204 	bic.w	r2, r2, #4
 8002a4e:	b292      	uxth	r2, r2
 8002a50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0208 	bic.w	r2, r2, #8
 8002a66:	b292      	uxth	r2, r2
 8002a68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d107      	bne.n	8002a86 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a7e:	2100      	movs	r1, #0
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f00a f9f5 	bl	800ce70 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f00a f868 	bl	800cb5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a9e:	b292      	uxth	r2, r2
 8002aa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002aa4:	e099      	b.n	8002bda <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d027      	beq.n	8002b00 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0208 	orr.w	r2, r2, #8
 8002ac2:	b292      	uxth	r2, r2
 8002ac4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ada:	b292      	uxth	r2, r2
 8002adc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0204 	orr.w	r2, r2, #4
 8002af2:	b292      	uxth	r2, r2
 8002af4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f00a f815 	bl	800cb28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002afe:	e06c      	b.n	8002bda <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d040      	beq.n	8002b8c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b1c:	b292      	uxth	r2, r2
 8002b1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d12b      	bne.n	8002b84 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0204 	orr.w	r2, r2, #4
 8002b3e:	b292      	uxth	r2, r2
 8002b40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0208 	orr.w	r2, r2, #8
 8002b56:	b292      	uxth	r2, r2
 8002b58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	089b      	lsrs	r3, r3, #2
 8002b70:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f00a f977 	bl	800ce70 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002b82:	e02a      	b.n	8002bda <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f009 ffcf 	bl	800cb28 <HAL_PCD_SuspendCallback>
    return;
 8002b8a:	e026      	b.n	8002bda <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00f      	beq.n	8002bb6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ba8:	b292      	uxth	r2, r2
 8002baa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f009 ff8d 	bl	800cace <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002bb4:	e011      	b.n	8002bda <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00c      	beq.n	8002bda <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bd2:	b292      	uxth	r2, r2
 8002bd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002bd8:	bf00      	nop
  }
}
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_PCD_SetAddress+0x1a>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e013      	b.n	8002c22 <HAL_PCD_SetAddress+0x42>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f004 ff31 	bl	8007a7a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	4608      	mov	r0, r1
 8002c34:	4611      	mov	r1, r2
 8002c36:	461a      	mov	r2, r3
 8002c38:	4603      	mov	r3, r0
 8002c3a:	70fb      	strb	r3, [r7, #3]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	803b      	strh	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	da0e      	bge.n	8002c6e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	4413      	add	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	705a      	strb	r2, [r3, #1]
 8002c6c:	e00e      	b.n	8002c8c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	f003 0207 	and.w	r2, r3, #7
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	4413      	add	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c98:	883a      	ldrh	r2, [r7, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	78ba      	ldrb	r2, [r7, #2]
 8002ca2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	785b      	ldrb	r3, [r3, #1]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d004      	beq.n	8002cb6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cb6:	78bb      	ldrb	r3, [r7, #2]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d102      	bne.n	8002cc2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_PCD_EP_Open+0xa6>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e00e      	b.n	8002cee <HAL_PCD_EP_Open+0xc4>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68f9      	ldr	r1, [r7, #12]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f002 ff02 	bl	8005ae8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002cec:	7afb      	ldrb	r3, [r7, #11]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	460b      	mov	r3, r1
 8002d04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d06:	7afb      	ldrb	r3, [r7, #11]
 8002d08:	f003 0207 	and.w	r2, r3, #7
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2200      	movs	r2, #0
 8002d34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d36:	7afb      	ldrb	r3, [r7, #11]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d42:	7afb      	ldrb	r3, [r7, #11]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d106      	bne.n	8002d5a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6979      	ldr	r1, [r7, #20]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f003 fa5c 	bl	8006210 <USB_EPStartXfer>
 8002d58:	e005      	b.n	8002d66 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6979      	ldr	r1, [r7, #20]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 fa55 	bl	8006210 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d80:	7afb      	ldrb	r3, [r7, #11]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2201      	movs	r2, #1
 8002dba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dbc:	7afb      	ldrb	r3, [r7, #11]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dc8:	7afb      	ldrb	r3, [r7, #11]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6979      	ldr	r1, [r7, #20]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f003 fa19 	bl	8006210 <USB_EPStartXfer>
 8002dde:	e005      	b.n	8002dec <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6979      	ldr	r1, [r7, #20]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f003 fa12 	bl	8006210 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	f003 0207 	and.w	r2, r3, #7
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d901      	bls.n	8002e14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e03e      	b.n	8002e92 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	da0e      	bge.n	8002e3a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	4413      	add	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	705a      	strb	r2, [r3, #1]
 8002e38:	e00c      	b.n	8002e54 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_PCD_EP_SetStall+0x7e>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e00e      	b.n	8002e92 <HAL_PCD_EP_SetStall+0x9c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68f9      	ldr	r1, [r7, #12]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f004 fcfa 	bl	800787c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
 8002ea8:	f003 020f 	and.w	r2, r3, #15
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d901      	bls.n	8002eb8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e040      	b.n	8002f3a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	da0e      	bge.n	8002ede <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	705a      	strb	r2, [r3, #1]
 8002edc:	e00e      	b.n	8002efc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	f003 0207 	and.w	r2, r3, #7
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_PCD_EP_ClrStall+0x82>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e00e      	b.n	8002f3a <HAL_PCD_EP_ClrStall+0xa0>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68f9      	ldr	r1, [r7, #12]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f004 fcf7 	bl	800791e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b096      	sub	sp, #88	; 0x58
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f4a:	e39c      	b.n	8003686 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002f58:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002f66:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f040 815e 	bne.w	800322c <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f70:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d150      	bne.n	800301e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8c:	81fb      	strh	r3, [r7, #14]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	89fb      	ldrh	r3, [r7, #14]
 8002f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3328      	adds	r3, #40	; 0x28
 8002fa4:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fcc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	441a      	add	r2, r3
 8002fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fda:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002fdc:	2100      	movs	r1, #0
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f009 fd5b 	bl	800ca9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 834a 	beq.w	8003686 <PCD_EP_ISR_Handler+0x744>
 8002ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 8345 	bne.w	8003686 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003002:	b2db      	uxtb	r3, r3
 8003004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003008:	b2da      	uxtb	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	b292      	uxth	r2, r2
 8003010:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800301c:	e333      	b.n	8003686 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003024:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003030:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003038:	2b00      	cmp	r3, #0
 800303a:	d032      	beq.n	80030a2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003044:	b29b      	uxth	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	4413      	add	r3, r2
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	4413      	add	r3, r2
 8003056:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003062:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800306e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003070:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003074:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003076:	b29b      	uxth	r3, r3
 8003078:	f004 fd91 	bl	8007b9e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b29a      	uxth	r2, r3
 8003084:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003088:	4013      	ands	r3, r2
 800308a:	823b      	strh	r3, [r7, #16]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	8a3a      	ldrh	r2, [r7, #16]
 8003092:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003096:	b292      	uxth	r2, r2
 8003098:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f009 fcd0 	bl	800ca40 <HAL_PCD_SetupStageCallback>
 80030a0:	e2f1      	b.n	8003686 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80030a2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f280 82ed 	bge.w	8003686 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80030b8:	4013      	ands	r3, r2
 80030ba:	83fb      	strh	r3, [r7, #30]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	8bfa      	ldrh	r2, [r7, #30]
 80030c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030c6:	b292      	uxth	r2, r2
 80030c8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	4413      	add	r3, r2
 80030e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80030f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d019      	beq.n	800312e <PCD_EP_ISR_Handler+0x1ec>
 80030fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d015      	beq.n	800312e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003108:	6959      	ldr	r1, [r3, #20]
 800310a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800310c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800310e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003110:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003112:	b29b      	uxth	r3, r3
 8003114:	f004 fd43 	bl	8007b9e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	441a      	add	r2, r3
 8003122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003124:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003126:	2100      	movs	r1, #0
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f009 fc9b 	bl	800ca64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800313a:	2b00      	cmp	r3, #0
 800313c:	f040 82a3 	bne.w	8003686 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800314e:	b29b      	uxth	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	4413      	add	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b3e      	cmp	r3, #62	; 0x3e
 8003166:	d918      	bls.n	800319a <PCD_EP_ISR_Handler+0x258>
 8003168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	647b      	str	r3, [r7, #68]	; 0x44
 8003170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	2b00      	cmp	r3, #0
 800317a:	d102      	bne.n	8003182 <PCD_EP_ISR_Handler+0x240>
 800317c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800317e:	3b01      	subs	r3, #1
 8003180:	647b      	str	r3, [r7, #68]	; 0x44
 8003182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003184:	b29b      	uxth	r3, r3
 8003186:	029b      	lsls	r3, r3, #10
 8003188:	b29b      	uxth	r3, r3
 800318a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800318e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003192:	b29a      	uxth	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	801a      	strh	r2, [r3, #0]
 8003198:	e029      	b.n	80031ee <PCD_EP_ISR_Handler+0x2ac>
 800319a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d112      	bne.n	80031c8 <PCD_EP_ISR_Handler+0x286>
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	801a      	strh	r2, [r3, #0]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	801a      	strh	r2, [r3, #0]
 80031c6:	e012      	b.n	80031ee <PCD_EP_ISR_Handler+0x2ac>
 80031c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	647b      	str	r3, [r7, #68]	; 0x44
 80031d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <PCD_EP_ISR_Handler+0x2a0>
 80031dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031de:	3301      	adds	r3, #1
 80031e0:	647b      	str	r3, [r7, #68]	; 0x44
 80031e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	029b      	lsls	r3, r3, #10
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fe:	827b      	strh	r3, [r7, #18]
 8003200:	8a7b      	ldrh	r3, [r7, #18]
 8003202:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003206:	827b      	strh	r3, [r7, #18]
 8003208:	8a7b      	ldrh	r3, [r7, #18]
 800320a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800320e:	827b      	strh	r3, [r7, #18]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	8a7b      	ldrh	r3, [r7, #18]
 8003216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800321a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800321e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003226:	b29b      	uxth	r3, r3
 8003228:	8013      	strh	r3, [r2, #0]
 800322a:	e22c      	b.n	8003686 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003240:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003244:	2b00      	cmp	r3, #0
 8003246:	f280 80f6 	bge.w	8003436 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	b29a      	uxth	r2, r3
 800325c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003260:	4013      	ands	r3, r2
 8003262:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003278:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800327c:	b292      	uxth	r2, r2
 800327e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003280:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4413      	add	r3, r2
 8003294:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003298:	7b1b      	ldrb	r3, [r3, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d123      	bne.n	80032e6 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	4413      	add	r3, r2
 80032b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80032c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 808e 	beq.w	80033ec <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d6:	6959      	ldr	r1, [r3, #20]
 80032d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032da:	88da      	ldrh	r2, [r3, #6]
 80032dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80032e0:	f004 fc5d 	bl	8007b9e <USB_ReadPMA>
 80032e4:	e082      	b.n	80033ec <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80032e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e8:	78db      	ldrb	r3, [r3, #3]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d10a      	bne.n	8003304 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80032ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80032f2:	461a      	mov	r2, r3
 80032f4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f9d3 	bl	80036a2 <HAL_PCD_EP_DB_Receive>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003302:	e073      	b.n	80033ec <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	461a      	mov	r2, r3
 800330a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	b29b      	uxth	r3, r3
 8003316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800331a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	441a      	add	r2, r3
 8003330:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800333c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003340:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003344:	b29b      	uxth	r3, r3
 8003346:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d022      	beq.n	80033a8 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800336a:	b29b      	uxth	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4413      	add	r3, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	4413      	add	r3, r2
 800337c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003386:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800338a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800338e:	2b00      	cmp	r3, #0
 8003390:	d02c      	beq.n	80033ec <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003398:	6959      	ldr	r1, [r3, #20]
 800339a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800339c:	891a      	ldrh	r2, [r3, #8]
 800339e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033a2:	f004 fbfc 	bl	8007b9e <USB_ReadPMA>
 80033a6:	e021      	b.n	80033ec <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	461a      	mov	r2, r3
 80033b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4413      	add	r3, r2
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	4413      	add	r3, r2
 80033c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033cc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80033d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d009      	beq.n	80033ec <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033de:	6959      	ldr	r1, [r3, #20]
 80033e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e2:	895a      	ldrh	r2, [r3, #10]
 80033e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033e8:	f004 fbd9 	bl	8007b9e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80033ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033f4:	441a      	add	r2, r3
 80033f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80033fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003402:	441a      	add	r2, r3
 8003404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003406:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <PCD_EP_ISR_Handler+0x4da>
 8003410:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	429a      	cmp	r2, r3
 800341a:	d206      	bcs.n	800342a <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800341c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	4619      	mov	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f009 fb1e 	bl	800ca64 <HAL_PCD_DataOutStageCallback>
 8003428:	e005      	b.n	8003436 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003430:	4618      	mov	r0, r3
 8003432:	f002 feed 	bl	8006210 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003436:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8121 	beq.w	8003686 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8003444:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	b29b      	uxth	r3, r3
 800346a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	441a      	add	r2, r3
 8003484:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800348c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003490:	b29b      	uxth	r3, r3
 8003492:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8003494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003496:	78db      	ldrb	r3, [r3, #3]
 8003498:	2b02      	cmp	r3, #2
 800349a:	f000 80a2 	beq.w	80035e2 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800349e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a0:	2200      	movs	r2, #0
 80034a2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80034a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a6:	7b1b      	ldrb	r3, [r3, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8093 	beq.w	80035d4 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034ae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d046      	beq.n	8003548 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034bc:	785b      	ldrb	r3, [r3, #1]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d126      	bne.n	8003510 <PCD_EP_ISR_Handler+0x5ce>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	4413      	add	r3, r2
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
 80034da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	00da      	lsls	r2, r3, #3
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	4413      	add	r3, r2
 80034e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034e8:	623b      	str	r3, [r7, #32]
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	801a      	strh	r2, [r3, #0]
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003508:	b29a      	uxth	r2, r3
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	801a      	strh	r2, [r3, #0]
 800350e:	e061      	b.n	80035d4 <PCD_EP_ISR_Handler+0x692>
 8003510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003512:	785b      	ldrb	r3, [r3, #1]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d15d      	bne.n	80035d4 <PCD_EP_ISR_Handler+0x692>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003526:	b29b      	uxth	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	4413      	add	r3, r2
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	00da      	lsls	r2, r3, #3
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	4413      	add	r3, r2
 800353a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003542:	2200      	movs	r2, #0
 8003544:	801a      	strh	r2, [r3, #0]
 8003546:	e045      	b.n	80035d4 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800354e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003550:	785b      	ldrb	r3, [r3, #1]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d126      	bne.n	80035a4 <PCD_EP_ISR_Handler+0x662>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003564:	b29b      	uxth	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356a:	4413      	add	r3, r2
 800356c:	637b      	str	r3, [r7, #52]	; 0x34
 800356e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	00da      	lsls	r2, r3, #3
 8003574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003576:	4413      	add	r3, r2
 8003578:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800357c:	633b      	str	r3, [r7, #48]	; 0x30
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003588:	b29a      	uxth	r2, r3
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	801a      	strh	r2, [r3, #0]
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800359c:	b29a      	uxth	r2, r3
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	801a      	strh	r2, [r3, #0]
 80035a2:	e017      	b.n	80035d4 <PCD_EP_ISR_Handler+0x692>
 80035a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a6:	785b      	ldrb	r3, [r3, #1]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d113      	bne.n	80035d4 <PCD_EP_ISR_Handler+0x692>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	461a      	mov	r2, r3
 80035b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ba:	4413      	add	r3, r2
 80035bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	00da      	lsls	r2, r3, #3
 80035c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c6:	4413      	add	r3, r2
 80035c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80035ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d0:	2200      	movs	r2, #0
 80035d2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	4619      	mov	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f009 fa5d 	bl	800ca9a <HAL_PCD_DataInStageCallback>
 80035e0:	e051      	b.n	8003686 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80035e2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d144      	bne.n	8003678 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	4413      	add	r3, r2
 8003608:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003612:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800361e:	429a      	cmp	r2, r3
 8003620:	d907      	bls.n	8003632 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8003622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800362a:	1ad2      	subs	r2, r2, r3
 800362c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800362e:	619a      	str	r2, [r3, #24]
 8003630:	e002      	b.n	8003638 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8003632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003634:	2200      	movs	r2, #0
 8003636:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d106      	bne.n	800364e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	4619      	mov	r1, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f009 fa27 	bl	800ca9a <HAL_PCD_DataInStageCallback>
 800364c:	e01b      	b.n	8003686 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800364e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003656:	441a      	add	r2, r3
 8003658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800365a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800365c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800365e:	69da      	ldr	r2, [r3, #28]
 8003660:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003664:	441a      	add	r2, r3
 8003666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003668:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003670:	4618      	mov	r0, r3
 8003672:	f002 fdcd 	bl	8006210 <USB_EPStartXfer>
 8003676:	e006      	b.n	8003686 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003678:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800367c:	461a      	mov	r2, r3
 800367e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f917 	bl	80038b4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800368e:	b29b      	uxth	r3, r3
 8003690:	b21b      	sxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	f6ff ac5a 	blt.w	8002f4c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3758      	adds	r7, #88	; 0x58
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b088      	sub	sp, #32
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	4613      	mov	r3, r2
 80036ae:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d07c      	beq.n	80037b4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4413      	add	r3, r2
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	4413      	add	r3, r2
 80036d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036de:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	699a      	ldr	r2, [r3, #24]
 80036e4:	8b7b      	ldrh	r3, [r7, #26]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d306      	bcc.n	80036f8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	699a      	ldr	r2, [r3, #24]
 80036ee:	8b7b      	ldrh	r3, [r7, #26]
 80036f0:	1ad2      	subs	r2, r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	619a      	str	r2, [r3, #24]
 80036f6:	e002      	b.n	80036fe <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2200      	movs	r2, #0
 80036fc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d123      	bne.n	800374e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800371c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003720:	833b      	strh	r3, [r7, #24]
 8003722:	8b3b      	ldrh	r3, [r7, #24]
 8003724:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003728:	833b      	strh	r3, [r7, #24]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	441a      	add	r2, r3
 8003738:	8b3b      	ldrh	r3, [r7, #24]
 800373a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800373e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374a:	b29b      	uxth	r3, r3
 800374c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01f      	beq.n	8003798 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	b29b      	uxth	r3, r3
 800376a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800376e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003772:	82fb      	strh	r3, [r7, #22]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	441a      	add	r2, r3
 8003782:	8afb      	ldrh	r3, [r7, #22]
 8003784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800378c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003790:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003794:	b29b      	uxth	r3, r3
 8003796:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003798:	8b7b      	ldrh	r3, [r7, #26]
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 8085 	beq.w	80038aa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	6959      	ldr	r1, [r3, #20]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	891a      	ldrh	r2, [r3, #8]
 80037ac:	8b7b      	ldrh	r3, [r7, #26]
 80037ae:	f004 f9f6 	bl	8007b9e <USB_ReadPMA>
 80037b2:	e07a      	b.n	80038aa <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037bc:	b29b      	uxth	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4413      	add	r3, r2
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	4413      	add	r3, r2
 80037ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	8b7b      	ldrh	r3, [r7, #26]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d306      	bcc.n	80037f2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	699a      	ldr	r2, [r3, #24]
 80037e8:	8b7b      	ldrh	r3, [r7, #26]
 80037ea:	1ad2      	subs	r2, r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	619a      	str	r2, [r3, #24]
 80037f0:	e002      	b.n	80037f8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2200      	movs	r2, #0
 80037f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d123      	bne.n	8003848 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381a:	83fb      	strh	r3, [r7, #30]
 800381c:	8bfb      	ldrh	r3, [r7, #30]
 800381e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003822:	83fb      	strh	r3, [r7, #30]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	441a      	add	r2, r3
 8003832:	8bfb      	ldrh	r3, [r7, #30]
 8003834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800383c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003844:	b29b      	uxth	r3, r3
 8003846:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d11f      	bne.n	8003892 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386c:	83bb      	strh	r3, [r7, #28]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	441a      	add	r2, r3
 800387c:	8bbb      	ldrh	r3, [r7, #28]
 800387e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800388a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800388e:	b29b      	uxth	r3, r3
 8003890:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003892:	8b7b      	ldrh	r3, [r7, #26]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	6959      	ldr	r1, [r3, #20]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	895a      	ldrh	r2, [r3, #10]
 80038a4:	8b7b      	ldrh	r3, [r7, #26]
 80038a6:	f004 f97a 	bl	8007b9e <USB_ReadPMA>
    }
  }

  return count;
 80038aa:	8b7b      	ldrh	r3, [r7, #26]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3720      	adds	r7, #32
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b0a2      	sub	sp, #136	; 0x88
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	4613      	mov	r3, r2
 80038c0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 81c5 	beq.w	8003c58 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4413      	add	r3, r2
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	4413      	add	r3, r2
 80038e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038fe:	429a      	cmp	r2, r3
 8003900:	d907      	bls.n	8003912 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800390a:	1ad2      	subs	r2, r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	619a      	str	r2, [r3, #24]
 8003910:	e002      	b.n	8003918 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2200      	movs	r2, #0
 8003916:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f040 80b9 	bne.w	8003a94 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	785b      	ldrb	r3, [r3, #1]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d126      	bne.n	8003978 <HAL_PCD_EP_DB_Transmit+0xc4>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003938:	b29b      	uxth	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393e:	4413      	add	r3, r2
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	00da      	lsls	r2, r3, #3
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	4413      	add	r3, r2
 800394c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	b29b      	uxth	r3, r3
 8003958:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800395c:	b29a      	uxth	r2, r3
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	801a      	strh	r2, [r3, #0]
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	b29b      	uxth	r3, r3
 8003968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800396c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003970:	b29a      	uxth	r2, r3
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	801a      	strh	r2, [r3, #0]
 8003976:	e01a      	b.n	80039ae <HAL_PCD_EP_DB_Transmit+0xfa>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	785b      	ldrb	r3, [r3, #1]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d116      	bne.n	80039ae <HAL_PCD_EP_DB_Transmit+0xfa>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	633b      	str	r3, [r7, #48]	; 0x30
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800398e:	b29b      	uxth	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003994:	4413      	add	r3, r2
 8003996:	633b      	str	r3, [r7, #48]	; 0x30
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	00da      	lsls	r2, r3, #3
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	4413      	add	r3, r2
 80039a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039aa:	2200      	movs	r2, #0
 80039ac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	623b      	str	r3, [r7, #32]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d126      	bne.n	8003a0a <HAL_PCD_EP_DB_Transmit+0x156>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	4413      	add	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	00da      	lsls	r2, r3, #3
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	4413      	add	r3, r2
 80039de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	801a      	strh	r2, [r3, #0]
 8003a08:	e017      	b.n	8003a3a <HAL_PCD_EP_DB_Transmit+0x186>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	785b      	ldrb	r3, [r3, #1]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d113      	bne.n	8003a3a <HAL_PCD_EP_DB_Transmit+0x186>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	4413      	add	r3, r2
 8003a22:	623b      	str	r3, [r7, #32]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	00da      	lsls	r2, r3, #3
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2200      	movs	r2, #0
 8003a38:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f009 f82a 	bl	800ca9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a46:	88fb      	ldrh	r3, [r7, #6]
 8003a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 82d2 	beq.w	8003ff6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6c:	827b      	strh	r3, [r7, #18]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	441a      	add	r2, r3
 8003a7c:	8a7b      	ldrh	r3, [r7, #18]
 8003a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	8013      	strh	r3, [r2, #0]
 8003a92:	e2b0      	b.n	8003ff6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d021      	beq.n	8003ae2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	441a      	add	r2, r3
 8003aca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	f040 8284 	bne.w	8003ff6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003af6:	441a      	add	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b04:	441a      	add	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	6a1a      	ldr	r2, [r3, #32]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d309      	bcc.n	8003b2a <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	6a1a      	ldr	r2, [r3, #32]
 8003b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b22:	1ad2      	subs	r2, r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	621a      	str	r2, [r3, #32]
 8003b28:	e015      	b.n	8003b56 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d107      	bne.n	8003b42 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003b32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b36:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b40:	e009      	b.n	8003b56 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2200      	movs	r2, #0
 8003b54:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	785b      	ldrb	r3, [r3, #1]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d155      	bne.n	8003c0a <HAL_PCD_EP_DB_Transmit+0x356>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b72:	4413      	add	r3, r2
 8003b74:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	00da      	lsls	r2, r3, #3
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7e:	4413      	add	r3, r2
 8003b80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b84:	637b      	str	r3, [r7, #52]	; 0x34
 8003b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b88:	2b3e      	cmp	r3, #62	; 0x3e
 8003b8a:	d916      	bls.n	8003bba <HAL_PCD_EP_DB_Transmit+0x306>
 8003b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d102      	bne.n	8003ba2 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	029b      	lsls	r3, r3, #10
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb6:	801a      	strh	r2, [r3, #0]
 8003bb8:	e043      	b.n	8003c42 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d112      	bne.n	8003be6 <HAL_PCD_EP_DB_Transmit+0x332>
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bce:	801a      	strh	r2, [r3, #0]
 8003bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be2:	801a      	strh	r2, [r3, #0]
 8003be4:	e02d      	b.n	8003c42 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_PCD_EP_DB_Transmit+0x348>
 8003bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	029b      	lsls	r3, r3, #10
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c06:	801a      	strh	r2, [r3, #0]
 8003c08:	e01b      	b.n	8003c42 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	785b      	ldrb	r3, [r3, #1]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d117      	bne.n	8003c42 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	643b      	str	r3, [r7, #64]	; 0x40
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c26:	4413      	add	r3, r2
 8003c28:	643b      	str	r3, [r7, #64]	; 0x40
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	00da      	lsls	r2, r3, #3
 8003c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c32:	4413      	add	r3, r2
 8003c34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c40:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	6959      	ldr	r1, [r3, #20]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	891a      	ldrh	r2, [r3, #8]
 8003c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	f003 ff62 	bl	8007b1a <USB_WritePMA>
 8003c56:	e1ce      	b.n	8003ff6 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	4413      	add	r3, r2
 8003c72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	699a      	ldr	r2, [r3, #24]
 8003c84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d307      	bcc.n	8003c9c <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	699a      	ldr	r2, [r3, #24]
 8003c90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c94:	1ad2      	subs	r2, r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	619a      	str	r2, [r3, #24]
 8003c9a:	e002      	b.n	8003ca2 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f040 80c4 	bne.w	8003e34 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	785b      	ldrb	r3, [r3, #1]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d126      	bne.n	8003d02 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cc8:	4413      	add	r3, r2
 8003cca:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	00da      	lsls	r2, r3, #3
 8003cd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cda:	667b      	str	r3, [r7, #100]	; 0x64
 8003cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cea:	801a      	strh	r2, [r3, #0]
 8003cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cfe:	801a      	strh	r2, [r3, #0]
 8003d00:	e01a      	b.n	8003d38 <HAL_PCD_EP_DB_Transmit+0x484>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	785b      	ldrb	r3, [r3, #1]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d116      	bne.n	8003d38 <HAL_PCD_EP_DB_Transmit+0x484>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	673b      	str	r3, [r7, #112]	; 0x70
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d1e:	4413      	add	r3, r2
 8003d20:	673b      	str	r3, [r7, #112]	; 0x70
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	00da      	lsls	r2, r3, #3
 8003d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d34:	2200      	movs	r2, #0
 8003d36:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	785b      	ldrb	r3, [r3, #1]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d12f      	bne.n	8003da6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d5e:	4413      	add	r3, r2
 8003d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	00da      	lsls	r2, r3, #3
 8003d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d6e:	4413      	add	r3, r2
 8003d70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d8a:	801a      	strh	r2, [r3, #0]
 8003d8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003da2:	801a      	strh	r2, [r3, #0]
 8003da4:	e017      	b.n	8003dd6 <HAL_PCD_EP_DB_Transmit+0x522>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	785b      	ldrb	r3, [r3, #1]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d113      	bne.n	8003dd6 <HAL_PCD_EP_DB_Transmit+0x522>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dbc:	4413      	add	r3, r2
 8003dbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	00da      	lsls	r2, r3, #3
 8003dc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dc8:	4413      	add	r3, r2
 8003dca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003dce:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f008 fe5c 	bl	800ca9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003de2:	88fb      	ldrh	r3, [r7, #6]
 8003de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f040 8104 	bne.w	8003ff6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e08:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	441a      	add	r2, r3
 8003e1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	8013      	strh	r3, [r2, #0]
 8003e32:	e0e0      	b.n	8003ff6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d121      	bne.n	8003e82 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e58:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	441a      	add	r2, r3
 8003e6a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	f040 80b4 	bne.w	8003ff6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e96:	441a      	add	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	69da      	ldr	r2, [r3, #28]
 8003ea0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ea4:	441a      	add	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	6a1a      	ldr	r2, [r3, #32]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d309      	bcc.n	8003eca <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	6a1a      	ldr	r2, [r3, #32]
 8003ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec2:	1ad2      	subs	r2, r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	621a      	str	r2, [r3, #32]
 8003ec8:	e015      	b.n	8003ef6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d107      	bne.n	8003ee2 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003ed2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ed6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ee0:	e009      	b.n	8003ef6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2200      	movs	r2, #0
 8003eec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	663b      	str	r3, [r7, #96]	; 0x60
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	785b      	ldrb	r3, [r3, #1]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d155      	bne.n	8003fb0 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f18:	4413      	add	r3, r2
 8003f1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	00da      	lsls	r2, r3, #3
 8003f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f24:	4413      	add	r3, r2
 8003f26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f2e:	2b3e      	cmp	r3, #62	; 0x3e
 8003f30:	d916      	bls.n	8003f60 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	677b      	str	r3, [r7, #116]	; 0x74
 8003f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d102      	bne.n	8003f48 <HAL_PCD_EP_DB_Transmit+0x694>
 8003f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f44:	3b01      	subs	r3, #1
 8003f46:	677b      	str	r3, [r7, #116]	; 0x74
 8003f48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	029b      	lsls	r3, r3, #10
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f5c:	801a      	strh	r2, [r3, #0]
 8003f5e:	e040      	b.n	8003fe2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d112      	bne.n	8003f8c <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f74:	801a      	strh	r2, [r3, #0]
 8003f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f88:	801a      	strh	r2, [r3, #0]
 8003f8a:	e02a      	b.n	8003fe2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	677b      	str	r3, [r7, #116]	; 0x74
 8003f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	677b      	str	r3, [r7, #116]	; 0x74
 8003fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	029b      	lsls	r3, r3, #10
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fac:	801a      	strh	r2, [r3, #0]
 8003fae:	e018      	b.n	8003fe2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	785b      	ldrb	r3, [r3, #1]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d114      	bne.n	8003fe2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fc6:	4413      	add	r3, r2
 8003fc8:	663b      	str	r3, [r7, #96]	; 0x60
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	00da      	lsls	r2, r3, #3
 8003fd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	6959      	ldr	r1, [r3, #20]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	895a      	ldrh	r2, [r3, #10]
 8003fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f003 fd92 	bl	8007b1a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	b29b      	uxth	r3, r3
 8004008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800400c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004010:	823b      	strh	r3, [r7, #16]
 8004012:	8a3b      	ldrh	r3, [r7, #16]
 8004014:	f083 0310 	eor.w	r3, r3, #16
 8004018:	823b      	strh	r3, [r7, #16]
 800401a:	8a3b      	ldrh	r3, [r7, #16]
 800401c:	f083 0320 	eor.w	r3, r3, #32
 8004020:	823b      	strh	r3, [r7, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	441a      	add	r2, r3
 8004030:	8a3b      	ldrh	r3, [r7, #16]
 8004032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800403a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800403e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004042:	b29b      	uxth	r3, r3
 8004044:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3788      	adds	r7, #136	; 0x88
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	607b      	str	r3, [r7, #4]
 800405a:	460b      	mov	r3, r1
 800405c:	817b      	strh	r3, [r7, #10]
 800405e:	4613      	mov	r3, r2
 8004060:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004062:	897b      	ldrh	r3, [r7, #10]
 8004064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800406e:	897b      	ldrh	r3, [r7, #10]
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4413      	add	r3, r2
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	e009      	b.n	800409a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004086:	897a      	ldrh	r2, [r7, #10]
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800409a:	893b      	ldrh	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d107      	bne.n	80040b0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2200      	movs	r2, #0
 80040a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	80da      	strh	r2, [r3, #6]
 80040ae:	e00b      	b.n	80040c8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2201      	movs	r2, #1
 80040b4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	0c1b      	lsrs	r3, r3, #16
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800410e:	b29b      	uxth	r3, r3
 8004110:	f043 0302 	orr.w	r3, r3, #2
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
	...

0800412c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d141      	bne.n	80041be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800413a:	4b4b      	ldr	r3, [pc, #300]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004146:	d131      	bne.n	80041ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004148:	4b47      	ldr	r3, [pc, #284]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800414a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800414e:	4a46      	ldr	r2, [pc, #280]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004154:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004158:	4b43      	ldr	r3, [pc, #268]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004160:	4a41      	ldr	r2, [pc, #260]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004166:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004168:	4b40      	ldr	r3, [pc, #256]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2232      	movs	r2, #50	; 0x32
 800416e:	fb02 f303 	mul.w	r3, r2, r3
 8004172:	4a3f      	ldr	r2, [pc, #252]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004174:	fba2 2303 	umull	r2, r3, r2, r3
 8004178:	0c9b      	lsrs	r3, r3, #18
 800417a:	3301      	adds	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800417e:	e002      	b.n	8004186 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	3b01      	subs	r3, #1
 8004184:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004186:	4b38      	ldr	r3, [pc, #224]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004192:	d102      	bne.n	800419a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f2      	bne.n	8004180 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800419a:	4b33      	ldr	r3, [pc, #204]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a6:	d158      	bne.n	800425a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e057      	b.n	800425c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041ac:	4b2e      	ldr	r3, [pc, #184]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041b2:	4a2d      	ldr	r2, [pc, #180]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041bc:	e04d      	b.n	800425a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c4:	d141      	bne.n	800424a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041c6:	4b28      	ldr	r3, [pc, #160]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d2:	d131      	bne.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041d4:	4b24      	ldr	r3, [pc, #144]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041da:	4a23      	ldr	r2, [pc, #140]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041e4:	4b20      	ldr	r3, [pc, #128]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041ec:	4a1e      	ldr	r2, [pc, #120]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041f4:	4b1d      	ldr	r3, [pc, #116]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2232      	movs	r2, #50	; 0x32
 80041fa:	fb02 f303 	mul.w	r3, r2, r3
 80041fe:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	0c9b      	lsrs	r3, r3, #18
 8004206:	3301      	adds	r3, #1
 8004208:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800420a:	e002      	b.n	8004212 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3b01      	subs	r3, #1
 8004210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004212:	4b15      	ldr	r3, [pc, #84]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421e:	d102      	bne.n	8004226 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f2      	bne.n	800420c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004226:	4b10      	ldr	r3, [pc, #64]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004232:	d112      	bne.n	800425a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e011      	b.n	800425c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800423e:	4a0a      	ldr	r2, [pc, #40]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004244:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004248:	e007      	b.n	800425a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004252:	4a05      	ldr	r2, [pc, #20]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004254:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004258:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	40007000 	.word	0x40007000
 800426c:	20000000 	.word	0x20000000
 8004270:	431bde83 	.word	0x431bde83

08004274 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004278:	4b05      	ldr	r3, [pc, #20]	; (8004290 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	4a04      	ldr	r2, [pc, #16]	; (8004290 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800427e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004282:	6093      	str	r3, [r2, #8]
}
 8004284:	bf00      	nop
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40007000 	.word	0x40007000

08004294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e306      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d075      	beq.n	800439e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b2:	4b97      	ldr	r3, [pc, #604]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042bc:	4b94      	ldr	r3, [pc, #592]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	2b0c      	cmp	r3, #12
 80042ca:	d102      	bne.n	80042d2 <HAL_RCC_OscConfig+0x3e>
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d002      	beq.n	80042d8 <HAL_RCC_OscConfig+0x44>
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d10b      	bne.n	80042f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d8:	4b8d      	ldr	r3, [pc, #564]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d05b      	beq.n	800439c <HAL_RCC_OscConfig+0x108>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d157      	bne.n	800439c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e2e1      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f8:	d106      	bne.n	8004308 <HAL_RCC_OscConfig+0x74>
 80042fa:	4b85      	ldr	r3, [pc, #532]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a84      	ldr	r2, [pc, #528]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	e01d      	b.n	8004344 <HAL_RCC_OscConfig+0xb0>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004310:	d10c      	bne.n	800432c <HAL_RCC_OscConfig+0x98>
 8004312:	4b7f      	ldr	r3, [pc, #508]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a7e      	ldr	r2, [pc, #504]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	4b7c      	ldr	r3, [pc, #496]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a7b      	ldr	r2, [pc, #492]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	e00b      	b.n	8004344 <HAL_RCC_OscConfig+0xb0>
 800432c:	4b78      	ldr	r3, [pc, #480]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a77      	ldr	r2, [pc, #476]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	4b75      	ldr	r3, [pc, #468]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a74      	ldr	r2, [pc, #464]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 800433e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d013      	beq.n	8004374 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fc fdaa 	bl	8000ea4 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004354:	f7fc fda6 	bl	8000ea4 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b64      	cmp	r3, #100	; 0x64
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e2a6      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004366:	4b6a      	ldr	r3, [pc, #424]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0xc0>
 8004372:	e014      	b.n	800439e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fc fd96 	bl	8000ea4 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800437c:	f7fc fd92 	bl	8000ea4 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e292      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800438e:	4b60      	ldr	r3, [pc, #384]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0xe8>
 800439a:	e000      	b.n	800439e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d075      	beq.n	8004496 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043aa:	4b59      	ldr	r3, [pc, #356]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
 80043b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043b4:	4b56      	ldr	r3, [pc, #344]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	2b0c      	cmp	r3, #12
 80043c2:	d102      	bne.n	80043ca <HAL_RCC_OscConfig+0x136>
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d002      	beq.n	80043d0 <HAL_RCC_OscConfig+0x13c>
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d11f      	bne.n	8004410 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043d0:	4b4f      	ldr	r3, [pc, #316]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_OscConfig+0x154>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e265      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e8:	4b49      	ldr	r3, [pc, #292]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	4946      	ldr	r1, [pc, #280]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043fc:	4b45      	ldr	r3, [pc, #276]	; (8004514 <HAL_RCC_OscConfig+0x280>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7fc fc4f 	bl	8000ca4 <HAL_InitTick>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d043      	beq.n	8004494 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e251      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d023      	beq.n	8004460 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004418:	4b3d      	ldr	r3, [pc, #244]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a3c      	ldr	r2, [pc, #240]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 800441e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004424:	f7fc fd3e 	bl	8000ea4 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800442c:	f7fc fd3a 	bl	8000ea4 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e23a      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800443e:	4b34      	ldr	r3, [pc, #208]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444a:	4b31      	ldr	r3, [pc, #196]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	061b      	lsls	r3, r3, #24
 8004458:	492d      	ldr	r1, [pc, #180]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 800445a:	4313      	orrs	r3, r2
 800445c:	604b      	str	r3, [r1, #4]
 800445e:	e01a      	b.n	8004496 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004460:	4b2b      	ldr	r3, [pc, #172]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2a      	ldr	r2, [pc, #168]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004466:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800446a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fc fd1a 	bl	8000ea4 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004474:	f7fc fd16 	bl	8000ea4 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e216      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004486:	4b22      	ldr	r3, [pc, #136]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x1e0>
 8004492:	e000      	b.n	8004496 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004494:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d041      	beq.n	8004526 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d01c      	beq.n	80044e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044aa:	4b19      	ldr	r3, [pc, #100]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80044ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b0:	4a17      	ldr	r2, [pc, #92]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ba:	f7fc fcf3 	bl	8000ea4 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c2:	f7fc fcef 	bl	8000ea4 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e1ef      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044d4:	4b0e      	ldr	r3, [pc, #56]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80044d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0ef      	beq.n	80044c2 <HAL_RCC_OscConfig+0x22e>
 80044e2:	e020      	b.n	8004526 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e4:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80044e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ea:	4a09      	ldr	r2, [pc, #36]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80044ec:	f023 0301 	bic.w	r3, r3, #1
 80044f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f4:	f7fc fcd6 	bl	8000ea4 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044fa:	e00d      	b.n	8004518 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044fc:	f7fc fcd2 	bl	8000ea4 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d906      	bls.n	8004518 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e1d2      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000
 8004514:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004518:	4b8c      	ldr	r3, [pc, #560]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 800451a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1ea      	bne.n	80044fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80a6 	beq.w	8004680 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004534:	2300      	movs	r3, #0
 8004536:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004538:	4b84      	ldr	r3, [pc, #528]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_RCC_OscConfig+0x2b4>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x2b6>
 8004548:	2300      	movs	r3, #0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00d      	beq.n	800456a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800454e:	4b7f      	ldr	r3, [pc, #508]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004552:	4a7e      	ldr	r2, [pc, #504]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004558:	6593      	str	r3, [r2, #88]	; 0x58
 800455a:	4b7c      	ldr	r3, [pc, #496]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004566:	2301      	movs	r3, #1
 8004568:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800456a:	4b79      	ldr	r3, [pc, #484]	; (8004750 <HAL_RCC_OscConfig+0x4bc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004572:	2b00      	cmp	r3, #0
 8004574:	d118      	bne.n	80045a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004576:	4b76      	ldr	r3, [pc, #472]	; (8004750 <HAL_RCC_OscConfig+0x4bc>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a75      	ldr	r2, [pc, #468]	; (8004750 <HAL_RCC_OscConfig+0x4bc>)
 800457c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004582:	f7fc fc8f 	bl	8000ea4 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800458a:	f7fc fc8b 	bl	8000ea4 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e18b      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800459c:	4b6c      	ldr	r3, [pc, #432]	; (8004750 <HAL_RCC_OscConfig+0x4bc>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d108      	bne.n	80045c2 <HAL_RCC_OscConfig+0x32e>
 80045b0:	4b66      	ldr	r3, [pc, #408]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b6:	4a65      	ldr	r2, [pc, #404]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045c0:	e024      	b.n	800460c <HAL_RCC_OscConfig+0x378>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b05      	cmp	r3, #5
 80045c8:	d110      	bne.n	80045ec <HAL_RCC_OscConfig+0x358>
 80045ca:	4b60      	ldr	r3, [pc, #384]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d0:	4a5e      	ldr	r2, [pc, #376]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045d2:	f043 0304 	orr.w	r3, r3, #4
 80045d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045da:	4b5c      	ldr	r3, [pc, #368]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e0:	4a5a      	ldr	r2, [pc, #360]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045ea:	e00f      	b.n	800460c <HAL_RCC_OscConfig+0x378>
 80045ec:	4b57      	ldr	r3, [pc, #348]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f2:	4a56      	ldr	r2, [pc, #344]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045f4:	f023 0301 	bic.w	r3, r3, #1
 80045f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045fc:	4b53      	ldr	r3, [pc, #332]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004602:	4a52      	ldr	r2, [pc, #328]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004604:	f023 0304 	bic.w	r3, r3, #4
 8004608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d016      	beq.n	8004642 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fc fc46 	bl	8000ea4 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800461a:	e00a      	b.n	8004632 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461c:	f7fc fc42 	bl	8000ea4 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e140      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004632:	4b46      	ldr	r3, [pc, #280]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ed      	beq.n	800461c <HAL_RCC_OscConfig+0x388>
 8004640:	e015      	b.n	800466e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004642:	f7fc fc2f 	bl	8000ea4 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004648:	e00a      	b.n	8004660 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464a:	f7fc fc2b 	bl	8000ea4 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	f241 3288 	movw	r2, #5000	; 0x1388
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e129      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004660:	4b3a      	ldr	r3, [pc, #232]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1ed      	bne.n	800464a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800466e:	7ffb      	ldrb	r3, [r7, #31]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d105      	bne.n	8004680 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004674:	4b35      	ldr	r3, [pc, #212]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004678:	4a34      	ldr	r2, [pc, #208]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 800467a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b00      	cmp	r3, #0
 800468a:	d03c      	beq.n	8004706 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01c      	beq.n	80046ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004694:	4b2d      	ldr	r3, [pc, #180]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004696:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800469a:	4a2c      	ldr	r2, [pc, #176]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a4:	f7fc fbfe 	bl	8000ea4 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ac:	f7fc fbfa 	bl	8000ea4 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e0fa      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046be:	4b23      	ldr	r3, [pc, #140]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80046c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0ef      	beq.n	80046ac <HAL_RCC_OscConfig+0x418>
 80046cc:	e01b      	b.n	8004706 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046ce:	4b1f      	ldr	r3, [pc, #124]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80046d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046d4:	4a1d      	ldr	r2, [pc, #116]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80046d6:	f023 0301 	bic.w	r3, r3, #1
 80046da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046de:	f7fc fbe1 	bl	8000ea4 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046e6:	f7fc fbdd 	bl	8000ea4 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e0dd      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046f8:	4b14      	ldr	r3, [pc, #80]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80046fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1ef      	bne.n	80046e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 80d1 	beq.w	80048b2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004710:	4b0e      	ldr	r3, [pc, #56]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 030c 	and.w	r3, r3, #12
 8004718:	2b0c      	cmp	r3, #12
 800471a:	f000 808b 	beq.w	8004834 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d15e      	bne.n	80047e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a08      	ldr	r2, [pc, #32]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 800472c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004732:	f7fc fbb7 	bl	8000ea4 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004738:	e00c      	b.n	8004754 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473a:	f7fc fbb3 	bl	8000ea4 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d905      	bls.n	8004754 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e0b3      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
 800474c:	40021000 	.word	0x40021000
 8004750:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004754:	4b59      	ldr	r3, [pc, #356]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1ec      	bne.n	800473a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004760:	4b56      	ldr	r3, [pc, #344]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	4b56      	ldr	r3, [pc, #344]	; (80048c0 <HAL_RCC_OscConfig+0x62c>)
 8004766:	4013      	ands	r3, r2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6a11      	ldr	r1, [r2, #32]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004770:	3a01      	subs	r2, #1
 8004772:	0112      	lsls	r2, r2, #4
 8004774:	4311      	orrs	r1, r2
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800477a:	0212      	lsls	r2, r2, #8
 800477c:	4311      	orrs	r1, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004782:	0852      	lsrs	r2, r2, #1
 8004784:	3a01      	subs	r2, #1
 8004786:	0552      	lsls	r2, r2, #21
 8004788:	4311      	orrs	r1, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800478e:	0852      	lsrs	r2, r2, #1
 8004790:	3a01      	subs	r2, #1
 8004792:	0652      	lsls	r2, r2, #25
 8004794:	4311      	orrs	r1, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800479a:	06d2      	lsls	r2, r2, #27
 800479c:	430a      	orrs	r2, r1
 800479e:	4947      	ldr	r1, [pc, #284]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a4:	4b45      	ldr	r3, [pc, #276]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a44      	ldr	r2, [pc, #272]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 80047aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047b0:	4b42      	ldr	r3, [pc, #264]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4a41      	ldr	r2, [pc, #260]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 80047b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fc fb72 	bl	8000ea4 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fc fb6e 	bl	8000ea4 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e06e      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d6:	4b39      	ldr	r3, [pc, #228]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x530>
 80047e2:	e066      	b.n	80048b2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e4:	4b35      	ldr	r3, [pc, #212]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a34      	ldr	r2, [pc, #208]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 80047ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80047f0:	4b32      	ldr	r3, [pc, #200]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4a31      	ldr	r2, [pc, #196]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 80047f6:	f023 0303 	bic.w	r3, r3, #3
 80047fa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80047fc:	4b2f      	ldr	r3, [pc, #188]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4a2e      	ldr	r2, [pc, #184]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 8004802:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800480a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480c:	f7fc fb4a 	bl	8000ea4 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004814:	f7fc fb46 	bl	8000ea4 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e046      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004826:	4b25      	ldr	r3, [pc, #148]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f0      	bne.n	8004814 <HAL_RCC_OscConfig+0x580>
 8004832:	e03e      	b.n	80048b2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e039      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004840:	4b1e      	ldr	r3, [pc, #120]	; (80048bc <HAL_RCC_OscConfig+0x628>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 0203 	and.w	r2, r3, #3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	429a      	cmp	r2, r3
 8004852:	d12c      	bne.n	80048ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	3b01      	subs	r3, #1
 8004860:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004862:	429a      	cmp	r2, r3
 8004864:	d123      	bne.n	80048ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004872:	429a      	cmp	r2, r3
 8004874:	d11b      	bne.n	80048ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004882:	429a      	cmp	r2, r3
 8004884:	d113      	bne.n	80048ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	085b      	lsrs	r3, r3, #1
 8004892:	3b01      	subs	r3, #1
 8004894:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004896:	429a      	cmp	r2, r3
 8004898:	d109      	bne.n	80048ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	3b01      	subs	r3, #1
 80048a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d001      	beq.n	80048b2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e000      	b.n	80048b4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3720      	adds	r7, #32
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40021000 	.word	0x40021000
 80048c0:	019f800c 	.word	0x019f800c

080048c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e11e      	b.n	8004b1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048dc:	4b91      	ldr	r3, [pc, #580]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 030f 	and.w	r3, r3, #15
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d910      	bls.n	800490c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ea:	4b8e      	ldr	r3, [pc, #568]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f023 020f 	bic.w	r2, r3, #15
 80048f2:	498c      	ldr	r1, [pc, #560]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fa:	4b8a      	ldr	r3, [pc, #552]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d001      	beq.n	800490c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e106      	b.n	8004b1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d073      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b03      	cmp	r3, #3
 800491e:	d129      	bne.n	8004974 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004920:	4b81      	ldr	r3, [pc, #516]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0f4      	b.n	8004b1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004930:	f000 f9ba 	bl	8004ca8 <RCC_GetSysClockFreqFromPLLSource>
 8004934:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4a7c      	ldr	r2, [pc, #496]	; (8004b2c <HAL_RCC_ClockConfig+0x268>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d93f      	bls.n	80049be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800493e:	4b7a      	ldr	r3, [pc, #488]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004952:	2b00      	cmp	r3, #0
 8004954:	d033      	beq.n	80049be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800495a:	2b00      	cmp	r3, #0
 800495c:	d12f      	bne.n	80049be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800495e:	4b72      	ldr	r3, [pc, #456]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004966:	4a70      	ldr	r2, [pc, #448]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 8004968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800496e:	2380      	movs	r3, #128	; 0x80
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	e024      	b.n	80049be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d107      	bne.n	800498c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800497c:	4b6a      	ldr	r3, [pc, #424]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d109      	bne.n	800499c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0c6      	b.n	8004b1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800498c:	4b66      	ldr	r3, [pc, #408]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e0be      	b.n	8004b1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800499c:	f000 f8ce 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 80049a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4a61      	ldr	r2, [pc, #388]	; (8004b2c <HAL_RCC_ClockConfig+0x268>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d909      	bls.n	80049be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049aa:	4b5f      	ldr	r3, [pc, #380]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049b2:	4a5d      	ldr	r2, [pc, #372]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 80049b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80049ba:	2380      	movs	r3, #128	; 0x80
 80049bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049be:	4b5a      	ldr	r3, [pc, #360]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f023 0203 	bic.w	r2, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4957      	ldr	r1, [pc, #348]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d0:	f7fc fa68 	bl	8000ea4 <HAL_GetTick>
 80049d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d8:	f7fc fa64 	bl	8000ea4 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e095      	b.n	8004b1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ee:	4b4e      	ldr	r3, [pc, #312]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 020c 	and.w	r2, r3, #12
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d1eb      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d023      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a18:	4b43      	ldr	r3, [pc, #268]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	4a42      	ldr	r2, [pc, #264]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 8004a1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d007      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004a30:	4b3d      	ldr	r3, [pc, #244]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a38:	4a3b      	ldr	r2, [pc, #236]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 8004a3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a40:	4b39      	ldr	r3, [pc, #228]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	4936      	ldr	r1, [pc, #216]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2b80      	cmp	r3, #128	; 0x80
 8004a58:	d105      	bne.n	8004a66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a5a:	4b33      	ldr	r3, [pc, #204]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	4a32      	ldr	r2, [pc, #200]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 8004a60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a66:	4b2f      	ldr	r3, [pc, #188]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d21d      	bcs.n	8004ab0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a74:	4b2b      	ldr	r3, [pc, #172]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f023 020f 	bic.w	r2, r3, #15
 8004a7c:	4929      	ldr	r1, [pc, #164]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a84:	f7fc fa0e 	bl	8000ea4 <HAL_GetTick>
 8004a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a8c:	f7fc fa0a 	bl	8000ea4 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e03b      	b.n	8004b1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa2:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d1ed      	bne.n	8004a8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	4917      	ldr	r1, [pc, #92]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d009      	beq.n	8004aee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ada:	4b13      	ldr	r3, [pc, #76]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	490f      	ldr	r1, [pc, #60]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aee:	f000 f825 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 8004af2:	4602      	mov	r2, r0
 8004af4:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <HAL_RCC_ClockConfig+0x264>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	490c      	ldr	r1, [pc, #48]	; (8004b30 <HAL_RCC_ClockConfig+0x26c>)
 8004b00:	5ccb      	ldrb	r3, [r1, r3]
 8004b02:	f003 031f 	and.w	r3, r3, #31
 8004b06:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0a:	4a0a      	ldr	r2, [pc, #40]	; (8004b34 <HAL_RCC_ClockConfig+0x270>)
 8004b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b0e:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <HAL_RCC_ClockConfig+0x274>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fc f8c6 	bl	8000ca4 <HAL_InitTick>
 8004b18:	4603      	mov	r3, r0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40022000 	.word	0x40022000
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	04c4b400 	.word	0x04c4b400
 8004b30:	0800d2ac 	.word	0x0800d2ac
 8004b34:	20000000 	.word	0x20000000
 8004b38:	20000004 	.word	0x20000004

08004b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b42:	4b2c      	ldr	r3, [pc, #176]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 030c 	and.w	r3, r3, #12
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d102      	bne.n	8004b54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b4e:	4b2a      	ldr	r3, [pc, #168]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	e047      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b54:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d102      	bne.n	8004b66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b60:	4b26      	ldr	r3, [pc, #152]	; (8004bfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	e03e      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004b66:	4b23      	ldr	r3, [pc, #140]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b0c      	cmp	r3, #12
 8004b70:	d136      	bne.n	8004be0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b72:	4b20      	ldr	r3, [pc, #128]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b7c:	4b1d      	ldr	r3, [pc, #116]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	091b      	lsrs	r3, r3, #4
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	3301      	adds	r3, #1
 8004b88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d10c      	bne.n	8004baa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b90:	4a1a      	ldr	r2, [pc, #104]	; (8004bfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b98:	4a16      	ldr	r2, [pc, #88]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b9a:	68d2      	ldr	r2, [r2, #12]
 8004b9c:	0a12      	lsrs	r2, r2, #8
 8004b9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	617b      	str	r3, [r7, #20]
      break;
 8004ba8:	e00c      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004baa:	4a13      	ldr	r2, [pc, #76]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb2:	4a10      	ldr	r2, [pc, #64]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bb4:	68d2      	ldr	r2, [r2, #12]
 8004bb6:	0a12      	lsrs	r2, r2, #8
 8004bb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bbc:	fb02 f303 	mul.w	r3, r2, r3
 8004bc0:	617b      	str	r3, [r7, #20]
      break;
 8004bc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bc4:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	0e5b      	lsrs	r3, r3, #25
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	3301      	adds	r3, #1
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	e001      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004be4:	693b      	ldr	r3, [r7, #16]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	00f42400 	.word	0x00f42400
 8004bfc:	007a1200 	.word	0x007a1200

08004c00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c04:	4b03      	ldr	r3, [pc, #12]	; (8004c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c06:	681b      	ldr	r3, [r3, #0]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	20000000 	.word	0x20000000

08004c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c1c:	f7ff fff0 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	0a1b      	lsrs	r3, r3, #8
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	4904      	ldr	r1, [pc, #16]	; (8004c40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c2e:	5ccb      	ldrb	r3, [r1, r3]
 8004c30:	f003 031f 	and.w	r3, r3, #31
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	0800d2bc 	.word	0x0800d2bc

08004c44 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	220f      	movs	r2, #15
 8004c52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004c54:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 0203 	and.w	r2, r3, #3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004c78:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	08db      	lsrs	r3, r3, #3
 8004c7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004c86:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <HAL_RCC_GetClockConfig+0x60>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 020f 	and.w	r2, r3, #15
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	601a      	str	r2, [r3, #0]
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	40022000 	.word	0x40022000

08004ca8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cae:	4b1e      	ldr	r3, [pc, #120]	; (8004d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	091b      	lsrs	r3, r3, #4
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d10c      	bne.n	8004ce6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ccc:	4a17      	ldr	r2, [pc, #92]	; (8004d2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	4a14      	ldr	r2, [pc, #80]	; (8004d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cd6:	68d2      	ldr	r2, [r2, #12]
 8004cd8:	0a12      	lsrs	r2, r2, #8
 8004cda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cde:	fb02 f303 	mul.w	r3, r2, r3
 8004ce2:	617b      	str	r3, [r7, #20]
    break;
 8004ce4:	e00c      	b.n	8004d00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ce6:	4a12      	ldr	r2, [pc, #72]	; (8004d30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cee:	4a0e      	ldr	r2, [pc, #56]	; (8004d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cf0:	68d2      	ldr	r2, [r2, #12]
 8004cf2:	0a12      	lsrs	r2, r2, #8
 8004cf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cf8:	fb02 f303 	mul.w	r3, r2, r3
 8004cfc:	617b      	str	r3, [r7, #20]
    break;
 8004cfe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d00:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	0e5b      	lsrs	r3, r3, #25
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004d1a:	687b      	ldr	r3, [r7, #4]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	007a1200 	.word	0x007a1200
 8004d30:	00f42400 	.word	0x00f42400

08004d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d40:	2300      	movs	r3, #0
 8004d42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 8098 	beq.w	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d52:	2300      	movs	r3, #0
 8004d54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d56:	4b43      	ldr	r3, [pc, #268]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10d      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d62:	4b40      	ldr	r3, [pc, #256]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d66:	4a3f      	ldr	r2, [pc, #252]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8004d6e:	4b3d      	ldr	r3, [pc, #244]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d76:	60bb      	str	r3, [r7, #8]
 8004d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d7e:	4b3a      	ldr	r3, [pc, #232]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a39      	ldr	r2, [pc, #228]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d8a:	f7fc f88b 	bl	8000ea4 <HAL_GetTick>
 8004d8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d90:	e009      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d92:	f7fc f887 	bl	8000ea4 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d902      	bls.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	74fb      	strb	r3, [r7, #19]
        break;
 8004da4:	e005      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004da6:	4b30      	ldr	r3, [pc, #192]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0ef      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004db2:	7cfb      	ldrb	r3, [r7, #19]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d159      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004db8:	4b2a      	ldr	r3, [pc, #168]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d01e      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d019      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004dd4:	4b23      	ldr	r3, [pc, #140]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004de0:	4b20      	ldr	r3, [pc, #128]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de6:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004df0:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	4a1b      	ldr	r2, [pc, #108]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e00:	4a18      	ldr	r2, [pc, #96]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d016      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e12:	f7fc f847 	bl	8000ea4 <HAL_GetTick>
 8004e16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e18:	e00b      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1a:	f7fc f843 	bl	8000ea4 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d902      	bls.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	74fb      	strb	r3, [r7, #19]
            break;
 8004e30:	e006      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e32:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0ec      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004e40:	7cfb      	ldrb	r3, [r7, #19]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10b      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e46:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e54:	4903      	ldr	r1, [pc, #12]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e5c:	e008      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e5e:	7cfb      	ldrb	r3, [r7, #19]
 8004e60:	74bb      	strb	r3, [r7, #18]
 8004e62:	e005      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e64:	40021000 	.word	0x40021000
 8004e68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6c:	7cfb      	ldrb	r3, [r7, #19]
 8004e6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e70:	7c7b      	ldrb	r3, [r7, #17]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d105      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e76:	4ba7      	ldr	r3, [pc, #668]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7a:	4aa6      	ldr	r2, [pc, #664]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e8e:	4ba1      	ldr	r3, [pc, #644]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e94:	f023 0203 	bic.w	r2, r3, #3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	499d      	ldr	r1, [pc, #628]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004eb0:	4b98      	ldr	r3, [pc, #608]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f023 020c 	bic.w	r2, r3, #12
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	4995      	ldr	r1, [pc, #596]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ed2:	4b90      	ldr	r3, [pc, #576]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	498c      	ldr	r1, [pc, #560]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ef4:	4b87      	ldr	r3, [pc, #540]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	4984      	ldr	r1, [pc, #528]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f16:	4b7f      	ldr	r3, [pc, #508]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	497b      	ldr	r1, [pc, #492]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0320 	and.w	r3, r3, #32
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f38:	4b76      	ldr	r3, [pc, #472]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	4973      	ldr	r1, [pc, #460]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f5a:	4b6e      	ldr	r3, [pc, #440]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	496a      	ldr	r1, [pc, #424]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f7c:	4b65      	ldr	r3, [pc, #404]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	4962      	ldr	r1, [pc, #392]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f9e:	4b5d      	ldr	r3, [pc, #372]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	4959      	ldr	r1, [pc, #356]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fc0:	4b54      	ldr	r3, [pc, #336]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fce:	4951      	ldr	r1, [pc, #324]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d015      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fe2:	4b4c      	ldr	r3, [pc, #304]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	4948      	ldr	r1, [pc, #288]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005000:	d105      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005002:	4b44      	ldr	r3, [pc, #272]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	4a43      	ldr	r2, [pc, #268]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005008:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800500c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005016:	2b00      	cmp	r3, #0
 8005018:	d015      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800501a:	4b3e      	ldr	r3, [pc, #248]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005020:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005028:	493a      	ldr	r1, [pc, #232]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502a:	4313      	orrs	r3, r2
 800502c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005038:	d105      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800503a:	4b36      	ldr	r3, [pc, #216]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	4a35      	ldr	r2, [pc, #212]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005040:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005044:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d015      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005052:	4b30      	ldr	r3, [pc, #192]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005058:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005060:	492c      	ldr	r1, [pc, #176]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005070:	d105      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005072:	4b28      	ldr	r3, [pc, #160]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	4a27      	ldr	r2, [pc, #156]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800507c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d015      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800508a:	4b22      	ldr	r3, [pc, #136]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005090:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	491e      	ldr	r1, [pc, #120]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a8:	d105      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050aa:	4b1a      	ldr	r3, [pc, #104]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	4a19      	ldr	r2, [pc, #100]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050b4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d015      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050c2:	4b14      	ldr	r3, [pc, #80]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d0:	4910      	ldr	r1, [pc, #64]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050e0:	d105      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050e2:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	4a0b      	ldr	r2, [pc, #44]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ec:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d018      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80050fa:	4b06      	ldr	r3, [pc, #24]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005108:	4902      	ldr	r1, [pc, #8]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	e001      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005114:	40021000 	.word	0x40021000
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800511e:	d105      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005120:	4b21      	ldr	r3, [pc, #132]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4a20      	ldr	r2, [pc, #128]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800512a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d015      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005138:	4b1b      	ldr	r3, [pc, #108]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800513a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005146:	4918      	ldr	r1, [pc, #96]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005156:	d105      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005158:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800515e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005162:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d015      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005170:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005172:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005176:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517e:	490a      	ldr	r1, [pc, #40]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800518e:	d105      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005190:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4a04      	ldr	r2, [pc, #16]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800519a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800519c:	7cbb      	ldrb	r3, [r7, #18]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40021000 	.word	0x40021000

080051ac <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80051b4:	4b1c      	ldr	r3, [pc, #112]	; (8005228 <HAL_RCCEx_CRSConfig+0x7c>)
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	4a1b      	ldr	r2, [pc, #108]	; (8005228 <HAL_RCCEx_CRSConfig+0x7c>)
 80051ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051be:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 80051c0:	4b19      	ldr	r3, [pc, #100]	; (8005228 <HAL_RCCEx_CRSConfig+0x7c>)
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	4a18      	ldr	r2, [pc, #96]	; (8005228 <HAL_RCCEx_CRSConfig+0x7c>)
 80051c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ca:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	041b      	lsls	r3, r3, #16
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80051f4:	4a0d      	ldr	r2, [pc, #52]	; (800522c <HAL_RCCEx_CRSConfig+0x80>)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80051fa:	4b0c      	ldr	r3, [pc, #48]	; (800522c <HAL_RCCEx_CRSConfig+0x80>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	4908      	ldr	r1, [pc, #32]	; (800522c <HAL_RCCEx_CRSConfig+0x80>)
 800520a:	4313      	orrs	r3, r2
 800520c:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800520e:	4b07      	ldr	r3, [pc, #28]	; (800522c <HAL_RCCEx_CRSConfig+0x80>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a06      	ldr	r2, [pc, #24]	; (800522c <HAL_RCCEx_CRSConfig+0x80>)
 8005214:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005218:	6013      	str	r3, [r2, #0]
}
 800521a:	bf00      	nop
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40021000 	.word	0x40021000
 800522c:	40002000 	.word	0x40002000

08005230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e09d      	b.n	800537e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	2b00      	cmp	r3, #0
 8005248:	d108      	bne.n	800525c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005252:	d009      	beq.n	8005268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	61da      	str	r2, [r3, #28]
 800525a:	e005      	b.n	8005268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fb fcac 	bl	8000be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800529e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052a8:	d902      	bls.n	80052b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	e002      	b.n	80052b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80052be:	d007      	beq.n	80052d0 <HAL_SPI_Init+0xa0>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052c8:	d002      	beq.n	80052d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005312:	ea42 0103 	orr.w	r1, r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	0c1b      	lsrs	r3, r3, #16
 800532c:	f003 0204 	and.w	r2, r3, #4
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800534c:	ea42 0103 	orr.w	r1, r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69da      	ldr	r2, [r3, #28]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800536c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e049      	b.n	800542c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f841 	bl	8005434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2202      	movs	r2, #2
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3304      	adds	r3, #4
 80053c2:	4619      	mov	r1, r3
 80053c4:	4610      	mov	r0, r2
 80053c6:	f000 fa57 	bl	8005878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d001      	beq.n	8005460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e04f      	b.n	8005500 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a23      	ldr	r2, [pc, #140]	; (800550c <HAL_TIM_Base_Start_IT+0xc4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d01d      	beq.n	80054be <HAL_TIM_Base_Start_IT+0x76>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548a:	d018      	beq.n	80054be <HAL_TIM_Base_Start_IT+0x76>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <HAL_TIM_Base_Start_IT+0xc8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <HAL_TIM_Base_Start_IT+0x76>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a1e      	ldr	r2, [pc, #120]	; (8005514 <HAL_TIM_Base_Start_IT+0xcc>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00e      	beq.n	80054be <HAL_TIM_Base_Start_IT+0x76>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1c      	ldr	r2, [pc, #112]	; (8005518 <HAL_TIM_Base_Start_IT+0xd0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d009      	beq.n	80054be <HAL_TIM_Base_Start_IT+0x76>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a1b      	ldr	r2, [pc, #108]	; (800551c <HAL_TIM_Base_Start_IT+0xd4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <HAL_TIM_Base_Start_IT+0x76>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a19      	ldr	r2, [pc, #100]	; (8005520 <HAL_TIM_Base_Start_IT+0xd8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d115      	bne.n	80054ea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	4b17      	ldr	r3, [pc, #92]	; (8005524 <HAL_TIM_Base_Start_IT+0xdc>)
 80054c6:	4013      	ands	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b06      	cmp	r3, #6
 80054ce:	d015      	beq.n	80054fc <HAL_TIM_Base_Start_IT+0xb4>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d6:	d011      	beq.n	80054fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e8:	e008      	b.n	80054fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0201 	orr.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	e000      	b.n	80054fe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	40012c00 	.word	0x40012c00
 8005510:	40000400 	.word	0x40000400
 8005514:	40000800 	.word	0x40000800
 8005518:	40013400 	.word	0x40013400
 800551c:	40014000 	.word	0x40014000
 8005520:	40015000 	.word	0x40015000
 8005524:	00010007 	.word	0x00010007

08005528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b02      	cmp	r3, #2
 800553c:	d122      	bne.n	8005584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b02      	cmp	r3, #2
 800554a:	d11b      	bne.n	8005584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0202 	mvn.w	r2, #2
 8005554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f965 	bl	800583a <HAL_TIM_IC_CaptureCallback>
 8005570:	e005      	b.n	800557e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f957 	bl	8005826 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f968 	bl	800584e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0304 	and.w	r3, r3, #4
 800558e:	2b04      	cmp	r3, #4
 8005590:	d122      	bne.n	80055d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b04      	cmp	r3, #4
 800559e:	d11b      	bne.n	80055d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0204 	mvn.w	r2, #4
 80055a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2202      	movs	r2, #2
 80055ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f93b 	bl	800583a <HAL_TIM_IC_CaptureCallback>
 80055c4:	e005      	b.n	80055d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f92d 	bl	8005826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f93e 	bl	800584e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d122      	bne.n	800562c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d11b      	bne.n	800562c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0208 	mvn.w	r2, #8
 80055fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2204      	movs	r2, #4
 8005602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f911 	bl	800583a <HAL_TIM_IC_CaptureCallback>
 8005618:	e005      	b.n	8005626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f903 	bl	8005826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f914 	bl	800584e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0310 	and.w	r3, r3, #16
 8005636:	2b10      	cmp	r3, #16
 8005638:	d122      	bne.n	8005680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b10      	cmp	r3, #16
 8005646:	d11b      	bne.n	8005680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0210 	mvn.w	r2, #16
 8005650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2208      	movs	r2, #8
 8005656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f8e7 	bl	800583a <HAL_TIM_IC_CaptureCallback>
 800566c:	e005      	b.n	800567a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f8d9 	bl	8005826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f8ea 	bl	800584e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b01      	cmp	r3, #1
 800568c:	d10e      	bne.n	80056ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b01      	cmp	r3, #1
 800569a:	d107      	bne.n	80056ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0201 	mvn.w	r2, #1
 80056a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7fb f91c 	bl	80008e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b6:	2b80      	cmp	r3, #128	; 0x80
 80056b8:	d10e      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c4:	2b80      	cmp	r3, #128	; 0x80
 80056c6:	d107      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f978 	bl	80059c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e6:	d10e      	bne.n	8005706 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f2:	2b80      	cmp	r3, #128	; 0x80
 80056f4:	d107      	bne.n	8005706 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f96b 	bl	80059dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d10e      	bne.n	8005732 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571e:	2b40      	cmp	r3, #64	; 0x40
 8005720:	d107      	bne.n	8005732 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800572a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f898 	bl	8005862 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b20      	cmp	r3, #32
 800573e:	d10e      	bne.n	800575e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b20      	cmp	r3, #32
 800574c:	d107      	bne.n	800575e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f06f 0220 	mvn.w	r2, #32
 8005756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f92b 	bl	80059b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800576c:	d10f      	bne.n	800578e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800577c:	d107      	bne.n	800578e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f931 	bl	80059f0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005798:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800579c:	d10f      	bne.n	80057be <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057ac:	d107      	bne.n	80057be <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80057b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f923 	bl	8005a04 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057cc:	d10f      	bne.n	80057ee <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057dc:	d107      	bne.n	80057ee <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80057e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f915 	bl	8005a18 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057fc:	d10f      	bne.n	800581e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005808:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800580c:	d107      	bne.n	800581e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f907 	bl	8005a2c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800581e:	bf00      	nop
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
	...

08005878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a42      	ldr	r2, [pc, #264]	; (8005994 <TIM_Base_SetConfig+0x11c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d013      	beq.n	80058b8 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005896:	d00f      	beq.n	80058b8 <TIM_Base_SetConfig+0x40>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a3f      	ldr	r2, [pc, #252]	; (8005998 <TIM_Base_SetConfig+0x120>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00b      	beq.n	80058b8 <TIM_Base_SetConfig+0x40>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a3e      	ldr	r2, [pc, #248]	; (800599c <TIM_Base_SetConfig+0x124>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d007      	beq.n	80058b8 <TIM_Base_SetConfig+0x40>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a3d      	ldr	r2, [pc, #244]	; (80059a0 <TIM_Base_SetConfig+0x128>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d003      	beq.n	80058b8 <TIM_Base_SetConfig+0x40>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a3c      	ldr	r2, [pc, #240]	; (80059a4 <TIM_Base_SetConfig+0x12c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d108      	bne.n	80058ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a31      	ldr	r2, [pc, #196]	; (8005994 <TIM_Base_SetConfig+0x11c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d01f      	beq.n	8005912 <TIM_Base_SetConfig+0x9a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d8:	d01b      	beq.n	8005912 <TIM_Base_SetConfig+0x9a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a2e      	ldr	r2, [pc, #184]	; (8005998 <TIM_Base_SetConfig+0x120>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d017      	beq.n	8005912 <TIM_Base_SetConfig+0x9a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a2d      	ldr	r2, [pc, #180]	; (800599c <TIM_Base_SetConfig+0x124>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <TIM_Base_SetConfig+0x9a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a2c      	ldr	r2, [pc, #176]	; (80059a0 <TIM_Base_SetConfig+0x128>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00f      	beq.n	8005912 <TIM_Base_SetConfig+0x9a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a2c      	ldr	r2, [pc, #176]	; (80059a8 <TIM_Base_SetConfig+0x130>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00b      	beq.n	8005912 <TIM_Base_SetConfig+0x9a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a2b      	ldr	r2, [pc, #172]	; (80059ac <TIM_Base_SetConfig+0x134>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d007      	beq.n	8005912 <TIM_Base_SetConfig+0x9a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a2a      	ldr	r2, [pc, #168]	; (80059b0 <TIM_Base_SetConfig+0x138>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d003      	beq.n	8005912 <TIM_Base_SetConfig+0x9a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a25      	ldr	r2, [pc, #148]	; (80059a4 <TIM_Base_SetConfig+0x12c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d108      	bne.n	8005924 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a12      	ldr	r2, [pc, #72]	; (8005994 <TIM_Base_SetConfig+0x11c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d013      	beq.n	8005978 <TIM_Base_SetConfig+0x100>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a13      	ldr	r2, [pc, #76]	; (80059a0 <TIM_Base_SetConfig+0x128>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00f      	beq.n	8005978 <TIM_Base_SetConfig+0x100>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a13      	ldr	r2, [pc, #76]	; (80059a8 <TIM_Base_SetConfig+0x130>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00b      	beq.n	8005978 <TIM_Base_SetConfig+0x100>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a12      	ldr	r2, [pc, #72]	; (80059ac <TIM_Base_SetConfig+0x134>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d007      	beq.n	8005978 <TIM_Base_SetConfig+0x100>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a11      	ldr	r2, [pc, #68]	; (80059b0 <TIM_Base_SetConfig+0x138>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_Base_SetConfig+0x100>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a0c      	ldr	r2, [pc, #48]	; (80059a4 <TIM_Base_SetConfig+0x12c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d103      	bne.n	8005980 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	615a      	str	r2, [r3, #20]
}
 8005986:	bf00      	nop
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40000400 	.word	0x40000400
 800599c:	40000800 	.word	0x40000800
 80059a0:	40013400 	.word	0x40013400
 80059a4:	40015000 	.word	0x40015000
 80059a8:	40014000 	.word	0x40014000
 80059ac:	40014400 	.word	0x40014400
 80059b0:	40014800 	.word	0x40014800

080059b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a50:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a76:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	43db      	mvns	r3, r3
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	f107 0014 	add.w	r0, r7, #20
 8005ab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	b004      	add	sp, #16
 8005ae4:	4770      	bx	lr
	...

08005ae8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b09d      	sub	sp, #116	; 0x74
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	78db      	ldrb	r3, [r3, #3]
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d81f      	bhi.n	8005b5a <USB_ActivateEndpoint+0x72>
 8005b1a:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <USB_ActivateEndpoint+0x38>)
 8005b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b20:	08005b31 	.word	0x08005b31
 8005b24:	08005b4d 	.word	0x08005b4d
 8005b28:	08005b63 	.word	0x08005b63
 8005b2c:	08005b3f 	.word	0x08005b3f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005b30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005b34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005b3c:	e012      	b.n	8005b64 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b3e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005b42:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005b46:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005b4a:	e00b      	b.n	8005b64 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005b50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005b58:	e004      	b.n	8005b64 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005b60:	e000      	b.n	8005b64 <USB_ActivateEndpoint+0x7c>
      break;
 8005b62:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	441a      	add	r2, r3
 8005b6e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	b21b      	sxth	r3, r3
 8005b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9e:	b21a      	sxth	r2, r3
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	b21b      	sxth	r3, r3
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	b21b      	sxth	r3, r3
 8005baa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	441a      	add	r2, r3
 8005bb8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	7b1b      	ldrb	r3, [r3, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f040 8149 	bne.w	8005e6c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	785b      	ldrb	r3, [r3, #1]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 8084 	beq.w	8005cec <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	61bb      	str	r3, [r7, #24]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	00da      	lsls	r2, r3, #3
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	88db      	ldrh	r3, [r3, #6]
 8005c0c:	085b      	lsrs	r3, r3, #1
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	827b      	strh	r3, [r7, #18]
 8005c26:	8a7b      	ldrh	r3, [r7, #18]
 8005c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01b      	beq.n	8005c68 <USB_ActivateEndpoint+0x180>
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c46:	823b      	strh	r3, [r7, #16]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	441a      	add	r2, r3
 8005c52:	8a3b      	ldrh	r3, [r7, #16]
 8005c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	78db      	ldrb	r3, [r3, #3]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d020      	beq.n	8005cb2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c86:	81bb      	strh	r3, [r7, #12]
 8005c88:	89bb      	ldrh	r3, [r7, #12]
 8005c8a:	f083 0320 	eor.w	r3, r3, #32
 8005c8e:	81bb      	strh	r3, [r7, #12]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	441a      	add	r2, r3
 8005c9a:	89bb      	ldrh	r3, [r7, #12]
 8005c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	8013      	strh	r3, [r2, #0]
 8005cb0:	e2a6      	b.n	8006200 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cc8:	81fb      	strh	r3, [r7, #14]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	441a      	add	r2, r3
 8005cd4:	89fb      	ldrh	r3, [r7, #14]
 8005cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	8013      	strh	r3, [r2, #0]
 8005cea:	e289      	b.n	8006200 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	633b      	str	r3, [r7, #48]	; 0x30
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	4413      	add	r3, r2
 8005cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	00da      	lsls	r2, r3, #3
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	4413      	add	r3, r2
 8005d0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	88db      	ldrh	r3, [r3, #6]
 8005d14:	085b      	lsrs	r3, r3, #1
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	4413      	add	r3, r2
 8005d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	00da      	lsls	r2, r3, #3
 8005d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d42:	627b      	str	r3, [r7, #36]	; 0x24
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b3e      	cmp	r3, #62	; 0x3e
 8005d4a:	d918      	bls.n	8005d7e <USB_ActivateEndpoint+0x296>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f003 031f 	and.w	r3, r3, #31
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d102      	bne.n	8005d66 <USB_ActivateEndpoint+0x27e>
 8005d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d62:	3b01      	subs	r3, #1
 8005d64:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	029b      	lsls	r3, r3, #10
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	801a      	strh	r2, [r3, #0]
 8005d7c:	e029      	b.n	8005dd2 <USB_ActivateEndpoint+0x2ea>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d112      	bne.n	8005dac <USB_ActivateEndpoint+0x2c4>
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	801a      	strh	r2, [r3, #0]
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	801a      	strh	r2, [r3, #0]
 8005daa:	e012      	b.n	8005dd2 <USB_ActivateEndpoint+0x2ea>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	085b      	lsrs	r3, r3, #1
 8005db2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <USB_ActivateEndpoint+0x2de>
 8005dc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	029b      	lsls	r3, r3, #10
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	847b      	strh	r3, [r7, #34]	; 0x22
 8005de0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d01b      	beq.n	8005e22 <USB_ActivateEndpoint+0x33a>
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e00:	843b      	strh	r3, [r7, #32]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	441a      	add	r2, r3
 8005e0c:	8c3b      	ldrh	r3, [r7, #32]
 8005e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e38:	83fb      	strh	r3, [r7, #30]
 8005e3a:	8bfb      	ldrh	r3, [r7, #30]
 8005e3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e40:	83fb      	strh	r3, [r7, #30]
 8005e42:	8bfb      	ldrh	r3, [r7, #30]
 8005e44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e48:	83fb      	strh	r3, [r7, #30]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	441a      	add	r2, r3
 8005e54:	8bfb      	ldrh	r3, [r7, #30]
 8005e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	8013      	strh	r3, [r2, #0]
 8005e6a:	e1c9      	b.n	8006200 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	78db      	ldrb	r3, [r3, #3]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d11e      	bne.n	8005eb2 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	441a      	add	r2, r3
 8005e98:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	8013      	strh	r3, [r2, #0]
 8005eb0:	e01d      	b.n	8005eee <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	441a      	add	r2, r3
 8005ed6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	461a      	mov	r2, r3
 8005efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005efe:	4413      	add	r3, r2
 8005f00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	00da      	lsls	r2, r3, #3
 8005f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f10:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	891b      	ldrh	r3, [r3, #8]
 8005f16:	085b      	lsrs	r3, r3, #1
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f20:	801a      	strh	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	657b      	str	r3, [r7, #84]	; 0x54
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f32:	4413      	add	r3, r2
 8005f34:	657b      	str	r3, [r7, #84]	; 0x54
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	00da      	lsls	r2, r3, #3
 8005f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f3e:	4413      	add	r3, r2
 8005f40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f44:	653b      	str	r3, [r7, #80]	; 0x50
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	895b      	ldrh	r3, [r3, #10]
 8005f4a:	085b      	lsrs	r3, r3, #1
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f54:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	785b      	ldrb	r3, [r3, #1]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f040 8093 	bne.w	8006086 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005f70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01b      	beq.n	8005fb4 <USB_ActivateEndpoint+0x4cc>
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f92:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	441a      	add	r2, r3
 8005f9e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005fc2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01b      	beq.n	8006004 <USB_ActivateEndpoint+0x51c>
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe2:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	441a      	add	r2, r3
 8005fee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ffc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006000:	b29b      	uxth	r3, r3
 8006002:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	b29b      	uxth	r3, r3
 8006012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601a:	873b      	strh	r3, [r7, #56]	; 0x38
 800601c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800601e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006022:	873b      	strh	r3, [r7, #56]	; 0x38
 8006024:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006026:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800602a:	873b      	strh	r3, [r7, #56]	; 0x38
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	441a      	add	r2, r3
 8006036:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800603c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006048:	b29b      	uxth	r3, r3
 800604a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800605e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006062:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	441a      	add	r2, r3
 800606e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800607c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006080:	b29b      	uxth	r3, r3
 8006082:	8013      	strh	r3, [r2, #0]
 8006084:	e0bc      	b.n	8006200 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006096:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800609a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d01d      	beq.n	80060de <USB_ActivateEndpoint+0x5f6>
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	441a      	add	r2, r3
 80060c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80060ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060da:	b29b      	uxth	r3, r3
 80060dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80060ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80060f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01d      	beq.n	8006136 <USB_ActivateEndpoint+0x64e>
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006110:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	441a      	add	r2, r3
 800611e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800612e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006132:	b29b      	uxth	r3, r3
 8006134:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	78db      	ldrb	r3, [r3, #3]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d024      	beq.n	8006188 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	b29b      	uxth	r3, r3
 800614c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006154:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006158:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800615c:	f083 0320 	eor.w	r3, r3, #32
 8006160:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	441a      	add	r2, r3
 800616e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800617a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006182:	b29b      	uxth	r3, r3
 8006184:	8013      	strh	r3, [r2, #0]
 8006186:	e01d      	b.n	80061c4 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29b      	uxth	r3, r3
 8006196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800619e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	441a      	add	r2, r3
 80061ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80061b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	441a      	add	r2, r3
 80061e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80061ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006200:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006204:	4618      	mov	r0, r3
 8006206:	3774      	adds	r7, #116	; 0x74
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b0c2      	sub	sp, #264	; 0x108
 8006214:	af00      	add	r7, sp, #0
 8006216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800621a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800621e:	6018      	str	r0, [r3, #0]
 8006220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006228:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800622a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	785b      	ldrb	r3, [r3, #1]
 8006236:	2b01      	cmp	r3, #1
 8006238:	f040 867b 	bne.w	8006f32 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800623c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	699a      	ldr	r2, [r3, #24]
 8006248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	429a      	cmp	r2, r3
 8006256:	d908      	bls.n	800626a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006268:	e007      	b.n	800627a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800626a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800627a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	7b1b      	ldrb	r3, [r3, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d13a      	bne.n	8006300 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800628a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6959      	ldr	r1, [r3, #20]
 8006296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800629a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	88da      	ldrh	r2, [r3, #6]
 80062a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80062ac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80062b0:	6800      	ldr	r0, [r0, #0]
 80062b2:	f001 fc32 	bl	8007b1a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80062b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	613b      	str	r3, [r7, #16]
 80062c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	461a      	mov	r2, r3
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	4413      	add	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]
 80062da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	00da      	lsls	r2, r3, #3
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	4413      	add	r3, r2
 80062ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	801a      	strh	r2, [r3, #0]
 80062fc:	f000 bde3 	b.w	8006ec6 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	78db      	ldrb	r3, [r3, #3]
 800630c:	2b02      	cmp	r3, #2
 800630e:	f040 843a 	bne.w	8006b86 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6a1a      	ldr	r2, [r3, #32]
 800631e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	429a      	cmp	r2, r3
 800632c:	f240 83b7 	bls.w	8006a9e <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006334:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006356:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800635a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	441a      	add	r2, r3
 8006374:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800637c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006380:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006388:	b29b      	uxth	r3, r3
 800638a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800638c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6a1a      	ldr	r2, [r3, #32]
 8006398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800639c:	1ad2      	subs	r2, r2, r3
 800639e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 81b3 	beq.w	8006738 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	633b      	str	r3, [r7, #48]	; 0x30
 80063de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	785b      	ldrb	r3, [r3, #1]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d16d      	bne.n	80064ca <USB_EPStartXfer+0x2ba>
 80063ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80063fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006408:	b29b      	uxth	r3, r3
 800640a:	461a      	mov	r2, r3
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	4413      	add	r3, r2
 8006410:	62bb      	str	r3, [r7, #40]	; 0x28
 8006412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	00da      	lsls	r2, r3, #3
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	4413      	add	r3, r2
 8006424:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
 800642a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800642e:	2b3e      	cmp	r3, #62	; 0x3e
 8006430:	d91c      	bls.n	800646c <USB_EPStartXfer+0x25c>
 8006432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006436:	095b      	lsrs	r3, r3, #5
 8006438:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800643c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006440:	f003 031f 	and.w	r3, r3, #31
 8006444:	2b00      	cmp	r3, #0
 8006446:	d104      	bne.n	8006452 <USB_EPStartXfer+0x242>
 8006448:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800644c:	3b01      	subs	r3, #1
 800644e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006452:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006456:	b29b      	uxth	r3, r3
 8006458:	029b      	lsls	r3, r3, #10
 800645a:	b29b      	uxth	r3, r3
 800645c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006464:	b29a      	uxth	r2, r3
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	801a      	strh	r2, [r3, #0]
 800646a:	e053      	b.n	8006514 <USB_EPStartXfer+0x304>
 800646c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006470:	2b00      	cmp	r3, #0
 8006472:	d112      	bne.n	800649a <USB_EPStartXfer+0x28a>
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	b29b      	uxth	r3, r3
 800647a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800647e:	b29a      	uxth	r2, r3
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	801a      	strh	r2, [r3, #0]
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	b29b      	uxth	r3, r3
 800648a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800648e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006492:	b29a      	uxth	r2, r3
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	801a      	strh	r2, [r3, #0]
 8006498:	e03c      	b.n	8006514 <USB_EPStartXfer+0x304>
 800649a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800649e:	085b      	lsrs	r3, r3, #1
 80064a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80064a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d004      	beq.n	80064ba <USB_EPStartXfer+0x2aa>
 80064b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80064b4:	3301      	adds	r3, #1
 80064b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80064ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80064be:	b29b      	uxth	r3, r3
 80064c0:	029b      	lsls	r3, r3, #10
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	801a      	strh	r2, [r3, #0]
 80064c8:	e024      	b.n	8006514 <USB_EPStartXfer+0x304>
 80064ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	785b      	ldrb	r3, [r3, #1]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d11c      	bne.n	8006514 <USB_EPStartXfer+0x304>
 80064da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	461a      	mov	r2, r3
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	4413      	add	r3, r2
 80064f0:	633b      	str	r3, [r7, #48]	; 0x30
 80064f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	00da      	lsls	r2, r3, #3
 8006500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006502:	4413      	add	r3, r2
 8006504:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800650a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800650e:	b29a      	uxth	r2, r3
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	895b      	ldrh	r3, [r3, #10]
 8006520:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6959      	ldr	r1, [r3, #20]
 8006530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006534:	b29b      	uxth	r3, r3
 8006536:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800653a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800653e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006542:	6800      	ldr	r0, [r0, #0]
 8006544:	f001 fae9 	bl	8007b1a <USB_WritePMA>
            ep->xfer_buff += len;
 8006548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	695a      	ldr	r2, [r3, #20]
 8006554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006558:	441a      	add	r2, r3
 800655a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6a1a      	ldr	r2, [r3, #32]
 8006572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	429a      	cmp	r2, r3
 8006580:	d90f      	bls.n	80065a2 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6a1a      	ldr	r2, [r3, #32]
 800658e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006592:	1ad2      	subs	r2, r2, r3
 8006594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	621a      	str	r2, [r3, #32]
 80065a0:	e00e      	b.n	80065c0 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80065a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80065b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2200      	movs	r2, #0
 80065be:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	785b      	ldrb	r3, [r3, #1]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d16d      	bne.n	80066ac <USB_EPStartXfer+0x49c>
 80065d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	61bb      	str	r3, [r7, #24]
 80065dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	4413      	add	r3, r2
 80065f2:	61bb      	str	r3, [r7, #24]
 80065f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	00da      	lsls	r2, r3, #3
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	4413      	add	r3, r2
 8006606:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006610:	2b3e      	cmp	r3, #62	; 0x3e
 8006612:	d91c      	bls.n	800664e <USB_EPStartXfer+0x43e>
 8006614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006618:	095b      	lsrs	r3, r3, #5
 800661a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800661e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006622:	f003 031f 	and.w	r3, r3, #31
 8006626:	2b00      	cmp	r3, #0
 8006628:	d104      	bne.n	8006634 <USB_EPStartXfer+0x424>
 800662a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800662e:	3b01      	subs	r3, #1
 8006630:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006638:	b29b      	uxth	r3, r3
 800663a:	029b      	lsls	r3, r3, #10
 800663c:	b29b      	uxth	r3, r3
 800663e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006646:	b29a      	uxth	r2, r3
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	801a      	strh	r2, [r3, #0]
 800664c:	e059      	b.n	8006702 <USB_EPStartXfer+0x4f2>
 800664e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006652:	2b00      	cmp	r3, #0
 8006654:	d112      	bne.n	800667c <USB_EPStartXfer+0x46c>
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	b29b      	uxth	r3, r3
 800665c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006660:	b29a      	uxth	r2, r3
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	801a      	strh	r2, [r3, #0]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006674:	b29a      	uxth	r2, r3
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	801a      	strh	r2, [r3, #0]
 800667a:	e042      	b.n	8006702 <USB_EPStartXfer+0x4f2>
 800667c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006680:	085b      	lsrs	r3, r3, #1
 8006682:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d004      	beq.n	800669c <USB_EPStartXfer+0x48c>
 8006692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006696:	3301      	adds	r3, #1
 8006698:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800669c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	029b      	lsls	r3, r3, #10
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	801a      	strh	r2, [r3, #0]
 80066aa:	e02a      	b.n	8006702 <USB_EPStartXfer+0x4f2>
 80066ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	785b      	ldrb	r3, [r3, #1]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d122      	bne.n	8006702 <USB_EPStartXfer+0x4f2>
 80066bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	623b      	str	r3, [r7, #32]
 80066c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	4413      	add	r3, r2
 80066de:	623b      	str	r3, [r7, #32]
 80066e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	00da      	lsls	r2, r3, #3
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	4413      	add	r3, r2
 80066f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066f6:	61fb      	str	r3, [r7, #28]
 80066f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	891b      	ldrh	r3, [r3, #8]
 800670e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6959      	ldr	r1, [r3, #20]
 800671e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006722:	b29b      	uxth	r3, r3
 8006724:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006728:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800672c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006730:	6800      	ldr	r0, [r0, #0]
 8006732:	f001 f9f2 	bl	8007b1a <USB_WritePMA>
 8006736:	e3c6      	b.n	8006ec6 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800673c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	785b      	ldrb	r3, [r3, #1]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d16d      	bne.n	8006824 <USB_EPStartXfer+0x614>
 8006748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	64bb      	str	r3, [r7, #72]	; 0x48
 8006754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006758:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006762:	b29b      	uxth	r3, r3
 8006764:	461a      	mov	r2, r3
 8006766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006768:	4413      	add	r3, r2
 800676a:	64bb      	str	r3, [r7, #72]	; 0x48
 800676c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	00da      	lsls	r2, r3, #3
 800677a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800677c:	4413      	add	r3, r2
 800677e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006782:	647b      	str	r3, [r7, #68]	; 0x44
 8006784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006788:	2b3e      	cmp	r3, #62	; 0x3e
 800678a:	d91c      	bls.n	80067c6 <USB_EPStartXfer+0x5b6>
 800678c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800679a:	f003 031f 	and.w	r3, r3, #31
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <USB_EPStartXfer+0x59c>
 80067a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067a6:	3b01      	subs	r3, #1
 80067a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	029b      	lsls	r3, r3, #10
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067be:	b29a      	uxth	r2, r3
 80067c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	e059      	b.n	800687a <USB_EPStartXfer+0x66a>
 80067c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d112      	bne.n	80067f4 <USB_EPStartXfer+0x5e4>
 80067ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067d8:	b29a      	uxth	r2, r3
 80067da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067dc:	801a      	strh	r2, [r3, #0]
 80067de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067f0:	801a      	strh	r2, [r3, #0]
 80067f2:	e042      	b.n	800687a <USB_EPStartXfer+0x66a>
 80067f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f8:	085b      	lsrs	r3, r3, #1
 80067fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d004      	beq.n	8006814 <USB_EPStartXfer+0x604>
 800680a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800680e:	3301      	adds	r3, #1
 8006810:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006814:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006818:	b29b      	uxth	r3, r3
 800681a:	029b      	lsls	r3, r3, #10
 800681c:	b29a      	uxth	r2, r3
 800681e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006820:	801a      	strh	r2, [r3, #0]
 8006822:	e02a      	b.n	800687a <USB_EPStartXfer+0x66a>
 8006824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d122      	bne.n	800687a <USB_EPStartXfer+0x66a>
 8006834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006838:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	653b      	str	r3, [r7, #80]	; 0x50
 8006840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684e:	b29b      	uxth	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006854:	4413      	add	r3, r2
 8006856:	653b      	str	r3, [r7, #80]	; 0x50
 8006858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	00da      	lsls	r2, r3, #3
 8006866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006868:	4413      	add	r3, r2
 800686a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800686e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006874:	b29a      	uxth	r2, r3
 8006876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006878:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800687a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	891b      	ldrh	r3, [r3, #8]
 8006886:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800688a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6959      	ldr	r1, [r3, #20]
 8006896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689a:	b29b      	uxth	r3, r3
 800689c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80068a0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80068a4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80068a8:	6800      	ldr	r0, [r0, #0]
 80068aa:	f001 f936 	bl	8007b1a <USB_WritePMA>
            ep->xfer_buff += len;
 80068ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695a      	ldr	r2, [r3, #20]
 80068ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068be:	441a      	add	r2, r3
 80068c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80068cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6a1a      	ldr	r2, [r3, #32]
 80068d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d90f      	bls.n	8006908 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 80068e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6a1a      	ldr	r2, [r3, #32]
 80068f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f8:	1ad2      	subs	r2, r2, r3
 80068fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	621a      	str	r2, [r3, #32]
 8006906:	e00e      	b.n	8006926 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800691c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2200      	movs	r2, #0
 8006924:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800692a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	643b      	str	r3, [r7, #64]	; 0x40
 8006932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	785b      	ldrb	r3, [r3, #1]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d16d      	bne.n	8006a1e <USB_EPStartXfer+0x80e>
 8006942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	63bb      	str	r3, [r7, #56]	; 0x38
 800694e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800695c:	b29b      	uxth	r3, r3
 800695e:	461a      	mov	r2, r3
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	4413      	add	r3, r2
 8006964:	63bb      	str	r3, [r7, #56]	; 0x38
 8006966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	00da      	lsls	r2, r3, #3
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	4413      	add	r3, r2
 8006978:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800697c:	637b      	str	r3, [r7, #52]	; 0x34
 800697e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006982:	2b3e      	cmp	r3, #62	; 0x3e
 8006984:	d91c      	bls.n	80069c0 <USB_EPStartXfer+0x7b0>
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698a:	095b      	lsrs	r3, r3, #5
 800698c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006994:	f003 031f 	and.w	r3, r3, #31
 8006998:	2b00      	cmp	r3, #0
 800699a:	d104      	bne.n	80069a6 <USB_EPStartXfer+0x796>
 800699c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a0:	3b01      	subs	r3, #1
 80069a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	029b      	lsls	r3, r3, #10
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069bc:	801a      	strh	r2, [r3, #0]
 80069be:	e053      	b.n	8006a68 <USB_EPStartXfer+0x858>
 80069c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d112      	bne.n	80069ee <USB_EPStartXfer+0x7de>
 80069c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d6:	801a      	strh	r2, [r3, #0]
 80069d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ea:	801a      	strh	r2, [r3, #0]
 80069ec:	e03c      	b.n	8006a68 <USB_EPStartXfer+0x858>
 80069ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069f2:	085b      	lsrs	r3, r3, #1
 80069f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d004      	beq.n	8006a0e <USB_EPStartXfer+0x7fe>
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a08:	3301      	adds	r3, #1
 8006a0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	029b      	lsls	r3, r3, #10
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1a:	801a      	strh	r2, [r3, #0]
 8006a1c:	e024      	b.n	8006a68 <USB_EPStartXfer+0x858>
 8006a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	785b      	ldrb	r3, [r3, #1]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d11c      	bne.n	8006a68 <USB_EPStartXfer+0x858>
 8006a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	461a      	mov	r2, r3
 8006a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a42:	4413      	add	r3, r2
 8006a44:	643b      	str	r3, [r7, #64]	; 0x40
 8006a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	00da      	lsls	r2, r3, #3
 8006a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a56:	4413      	add	r3, r2
 8006a58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a66:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	895b      	ldrh	r3, [r3, #10]
 8006a74:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6959      	ldr	r1, [r3, #20]
 8006a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a96:	6800      	ldr	r0, [r0, #0]
 8006a98:	f001 f83f 	bl	8007b1a <USB_WritePMA>
 8006a9c:	e213      	b.n	8006ec6 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006adc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	441a      	add	r2, r3
 8006af2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b2a:	4413      	add	r3, r2
 8006b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	00da      	lsls	r2, r3, #3
 8006b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b3e:	4413      	add	r3, r2
 8006b40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b44:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	891b      	ldrh	r3, [r3, #8]
 8006b5c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6959      	ldr	r1, [r3, #20]
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b76:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b7a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b7e:	6800      	ldr	r0, [r0, #0]
 8006b80:	f000 ffcb 	bl	8007b1a <USB_WritePMA>
 8006b84:	e19f      	b.n	8006ec6 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a1a      	ldr	r2, [r3, #32]
 8006b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b96:	1ad2      	subs	r2, r2, r3
 8006b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 80bc 	beq.w	8006d44 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	673b      	str	r3, [r7, #112]	; 0x70
 8006bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	785b      	ldrb	r3, [r3, #1]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d16d      	bne.n	8006cc4 <USB_EPStartXfer+0xab4>
 8006be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	461a      	mov	r2, r3
 8006c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c08:	4413      	add	r3, r2
 8006c0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	00da      	lsls	r2, r3, #3
 8006c1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c22:	667b      	str	r3, [r7, #100]	; 0x64
 8006c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c28:	2b3e      	cmp	r3, #62	; 0x3e
 8006c2a:	d91c      	bls.n	8006c66 <USB_EPStartXfer+0xa56>
 8006c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c30:	095b      	lsrs	r3, r3, #5
 8006c32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c3a:	f003 031f 	and.w	r3, r3, #31
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d104      	bne.n	8006c4c <USB_EPStartXfer+0xa3c>
 8006c42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c46:	3b01      	subs	r3, #1
 8006c48:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	029b      	lsls	r3, r3, #10
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c62:	801a      	strh	r2, [r3, #0]
 8006c64:	e053      	b.n	8006d0e <USB_EPStartXfer+0xafe>
 8006c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d112      	bne.n	8006c94 <USB_EPStartXfer+0xa84>
 8006c6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c7c:	801a      	strh	r2, [r3, #0]
 8006c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c90:	801a      	strh	r2, [r3, #0]
 8006c92:	e03c      	b.n	8006d0e <USB_EPStartXfer+0xafe>
 8006c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c98:	085b      	lsrs	r3, r3, #1
 8006c9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d004      	beq.n	8006cb4 <USB_EPStartXfer+0xaa4>
 8006caa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006cae:	3301      	adds	r3, #1
 8006cb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006cb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	029b      	lsls	r3, r3, #10
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cc0:	801a      	strh	r2, [r3, #0]
 8006cc2:	e024      	b.n	8006d0e <USB_EPStartXfer+0xafe>
 8006cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	785b      	ldrb	r3, [r3, #1]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d11c      	bne.n	8006d0e <USB_EPStartXfer+0xafe>
 8006cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ce8:	4413      	add	r3, r2
 8006cea:	673b      	str	r3, [r7, #112]	; 0x70
 8006cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	00da      	lsls	r2, r3, #3
 8006cfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d0c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	895b      	ldrh	r3, [r3, #10]
 8006d1a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6959      	ldr	r1, [r3, #20]
 8006d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d34:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d38:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d3c:	6800      	ldr	r0, [r0, #0]
 8006d3e:	f000 feec 	bl	8007b1a <USB_WritePMA>
 8006d42:	e0c0      	b.n	8006ec6 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	785b      	ldrb	r3, [r3, #1]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d16d      	bne.n	8006e30 <USB_EPStartXfer+0xc20>
 8006d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d74:	4413      	add	r3, r2
 8006d76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	00da      	lsls	r2, r3, #3
 8006d86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d88:	4413      	add	r3, r2
 8006d8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d94:	2b3e      	cmp	r3, #62	; 0x3e
 8006d96:	d91c      	bls.n	8006dd2 <USB_EPStartXfer+0xbc2>
 8006d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da6:	f003 031f 	and.w	r3, r3, #31
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d104      	bne.n	8006db8 <USB_EPStartXfer+0xba8>
 8006dae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006db2:	3b01      	subs	r3, #1
 8006db4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006db8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	029b      	lsls	r3, r3, #10
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dce:	801a      	strh	r2, [r3, #0]
 8006dd0:	e05f      	b.n	8006e92 <USB_EPStartXfer+0xc82>
 8006dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d112      	bne.n	8006e00 <USB_EPStartXfer+0xbf0>
 8006dda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006de8:	801a      	strh	r2, [r3, #0]
 8006dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dfc:	801a      	strh	r2, [r3, #0]
 8006dfe:	e048      	b.n	8006e92 <USB_EPStartXfer+0xc82>
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e04:	085b      	lsrs	r3, r3, #1
 8006e06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d004      	beq.n	8006e20 <USB_EPStartXfer+0xc10>
 8006e16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	029b      	lsls	r3, r3, #10
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e2c:	801a      	strh	r2, [r3, #0]
 8006e2e:	e030      	b.n	8006e92 <USB_EPStartXfer+0xc82>
 8006e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	785b      	ldrb	r3, [r3, #1]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d128      	bne.n	8006e92 <USB_EPStartXfer+0xc82>
 8006e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e64:	4413      	add	r3, r2
 8006e66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	00da      	lsls	r2, r3, #3
 8006e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e90:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	891b      	ldrh	r3, [r3, #8]
 8006e9e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6959      	ldr	r1, [r3, #20]
 8006eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006eb8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ebc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006ec0:	6800      	ldr	r0, [r0, #0]
 8006ec2:	f000 fe2a 	bl	8007b1a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eec:	817b      	strh	r3, [r7, #10]
 8006eee:	897b      	ldrh	r3, [r7, #10]
 8006ef0:	f083 0310 	eor.w	r3, r3, #16
 8006ef4:	817b      	strh	r3, [r7, #10]
 8006ef6:	897b      	ldrh	r3, [r7, #10]
 8006ef8:	f083 0320 	eor.w	r3, r3, #32
 8006efc:	817b      	strh	r3, [r7, #10]
 8006efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	441a      	add	r2, r3
 8006f18:	897b      	ldrh	r3, [r7, #10]
 8006f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	8013      	strh	r3, [r2, #0]
 8006f2e:	f000 bc9f 	b.w	8007870 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	7b1b      	ldrb	r3, [r3, #12]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f040 80ae 	bne.w	80070a0 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	699a      	ldr	r2, [r3, #24]
 8006f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d917      	bls.n	8006f90 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8006f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	699a      	ldr	r2, [r3, #24]
 8006f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f80:	1ad2      	subs	r2, r2, r3
 8006f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	619a      	str	r2, [r3, #24]
 8006f8e:	e00e      	b.n	8006fae <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8006f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2200      	movs	r2, #0
 8006fac:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	461a      	mov	r2, r3
 8006fce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	00da      	lsls	r2, r3, #3
 8006fe6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fea:	4413      	add	r3, r2
 8006fec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ff0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff8:	2b3e      	cmp	r3, #62	; 0x3e
 8006ffa:	d91d      	bls.n	8007038 <USB_EPStartXfer+0xe28>
 8006ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	2b00      	cmp	r3, #0
 8007010:	d104      	bne.n	800701c <USB_EPStartXfer+0xe0c>
 8007012:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007016:	3b01      	subs	r3, #1
 8007018:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800701c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007020:	b29b      	uxth	r3, r3
 8007022:	029b      	lsls	r3, r3, #10
 8007024:	b29b      	uxth	r3, r3
 8007026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800702a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800702e:	b29a      	uxth	r2, r3
 8007030:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007034:	801a      	strh	r2, [r3, #0]
 8007036:	e3e1      	b.n	80077fc <USB_EPStartXfer+0x15ec>
 8007038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800703c:	2b00      	cmp	r3, #0
 800703e:	d116      	bne.n	800706e <USB_EPStartXfer+0xe5e>
 8007040:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	b29b      	uxth	r3, r3
 8007048:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800704c:	b29a      	uxth	r2, r3
 800704e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007052:	801a      	strh	r2, [r3, #0]
 8007054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	b29b      	uxth	r3, r3
 800705c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007064:	b29a      	uxth	r2, r3
 8007066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800706a:	801a      	strh	r2, [r3, #0]
 800706c:	e3c6      	b.n	80077fc <USB_EPStartXfer+0x15ec>
 800706e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007072:	085b      	lsrs	r3, r3, #1
 8007074:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b00      	cmp	r3, #0
 8007082:	d004      	beq.n	800708e <USB_EPStartXfer+0xe7e>
 8007084:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007088:	3301      	adds	r3, #1
 800708a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800708e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007092:	b29b      	uxth	r3, r3
 8007094:	029b      	lsls	r3, r3, #10
 8007096:	b29a      	uxth	r2, r3
 8007098:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	e3ad      	b.n	80077fc <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80070a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	78db      	ldrb	r3, [r3, #3]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	f040 8200 	bne.w	80074b2 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80070b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	785b      	ldrb	r3, [r3, #1]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f040 8091 	bne.w	80071e6 <USB_EPStartXfer+0xfd6>
 80070c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	461a      	mov	r2, r3
 80070e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070e8:	4413      	add	r3, r2
 80070ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	00da      	lsls	r2, r3, #3
 80070fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007100:	4413      	add	r3, r2
 8007102:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007106:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800710a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800710e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	2b3e      	cmp	r3, #62	; 0x3e
 8007118:	d925      	bls.n	8007166 <USB_EPStartXfer+0xf56>
 800711a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	095b      	lsrs	r3, r3, #5
 8007128:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800712c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	f003 031f 	and.w	r3, r3, #31
 800713c:	2b00      	cmp	r3, #0
 800713e:	d104      	bne.n	800714a <USB_EPStartXfer+0xf3a>
 8007140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007144:	3b01      	subs	r3, #1
 8007146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800714a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714e:	b29b      	uxth	r3, r3
 8007150:	029b      	lsls	r3, r3, #10
 8007152:	b29b      	uxth	r3, r3
 8007154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800715c:	b29a      	uxth	r2, r3
 800715e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007162:	801a      	strh	r2, [r3, #0]
 8007164:	e074      	b.n	8007250 <USB_EPStartXfer+0x1040>
 8007166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d116      	bne.n	80071a4 <USB_EPStartXfer+0xf94>
 8007176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007182:	b29a      	uxth	r2, r3
 8007184:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007188:	801a      	strh	r2, [r3, #0]
 800718a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	b29b      	uxth	r3, r3
 8007192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800719a:	b29a      	uxth	r2, r3
 800719c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071a0:	801a      	strh	r2, [r3, #0]
 80071a2:	e055      	b.n	8007250 <USB_EPStartXfer+0x1040>
 80071a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	085b      	lsrs	r3, r3, #1
 80071b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d004      	beq.n	80071d4 <USB_EPStartXfer+0xfc4>
 80071ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ce:	3301      	adds	r3, #1
 80071d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d8:	b29b      	uxth	r3, r3
 80071da:	029b      	lsls	r3, r3, #10
 80071dc:	b29a      	uxth	r2, r3
 80071de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071e2:	801a      	strh	r2, [r3, #0]
 80071e4:	e034      	b.n	8007250 <USB_EPStartXfer+0x1040>
 80071e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	785b      	ldrb	r3, [r3, #1]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d12c      	bne.n	8007250 <USB_EPStartXfer+0x1040>
 80071f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007208:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007212:	b29b      	uxth	r3, r3
 8007214:	461a      	mov	r2, r3
 8007216:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800721a:	4413      	add	r3, r2
 800721c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	00da      	lsls	r2, r3, #3
 800722e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007232:	4413      	add	r3, r2
 8007234:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800723c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	b29a      	uxth	r2, r3
 800724a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800724e:	801a      	strh	r2, [r3, #0]
 8007250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007254:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800725e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	785b      	ldrb	r3, [r3, #1]
 800726a:	2b00      	cmp	r3, #0
 800726c:	f040 8091 	bne.w	8007392 <USB_EPStartXfer+0x1182>
 8007270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007274:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800727e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007282:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800728c:	b29b      	uxth	r3, r3
 800728e:	461a      	mov	r2, r3
 8007290:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007294:	4413      	add	r3, r2
 8007296:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800729a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800729e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	00da      	lsls	r2, r3, #3
 80072a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072ac:	4413      	add	r3, r2
 80072ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b3e      	cmp	r3, #62	; 0x3e
 80072c4:	d925      	bls.n	8007312 <USB_EPStartXfer+0x1102>
 80072c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	095b      	lsrs	r3, r3, #5
 80072d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	f003 031f 	and.w	r3, r3, #31
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d104      	bne.n	80072f6 <USB_EPStartXfer+0x10e6>
 80072ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f0:	3b01      	subs	r3, #1
 80072f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	029b      	lsls	r3, r3, #10
 80072fe:	b29b      	uxth	r3, r3
 8007300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007308:	b29a      	uxth	r2, r3
 800730a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800730e:	801a      	strh	r2, [r3, #0]
 8007310:	e06d      	b.n	80073ee <USB_EPStartXfer+0x11de>
 8007312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d116      	bne.n	8007350 <USB_EPStartXfer+0x1140>
 8007322:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29b      	uxth	r3, r3
 800732a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800732e:	b29a      	uxth	r2, r3
 8007330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007334:	801a      	strh	r2, [r3, #0]
 8007336:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	b29b      	uxth	r3, r3
 800733e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007346:	b29a      	uxth	r2, r3
 8007348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800734c:	801a      	strh	r2, [r3, #0]
 800734e:	e04e      	b.n	80073ee <USB_EPStartXfer+0x11de>
 8007350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	085b      	lsrs	r3, r3, #1
 800735e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d004      	beq.n	8007380 <USB_EPStartXfer+0x1170>
 8007376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800737a:	3301      	adds	r3, #1
 800737c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007384:	b29b      	uxth	r3, r3
 8007386:	029b      	lsls	r3, r3, #10
 8007388:	b29a      	uxth	r2, r3
 800738a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800738e:	801a      	strh	r2, [r3, #0]
 8007390:	e02d      	b.n	80073ee <USB_EPStartXfer+0x11de>
 8007392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	785b      	ldrb	r3, [r3, #1]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d125      	bne.n	80073ee <USB_EPStartXfer+0x11de>
 80073a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	461a      	mov	r2, r3
 80073b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80073b8:	4413      	add	r3, r2
 80073ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80073be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	00da      	lsls	r2, r3, #3
 80073cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80073d0:	4413      	add	r3, r2
 80073d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073ec:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80073ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 81fe 	beq.w	80077fc <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007404:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007420:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d005      	beq.n	8007438 <USB_EPStartXfer+0x1228>
 800742c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10d      	bne.n	8007454 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007438:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800743c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007440:	2b00      	cmp	r3, #0
 8007442:	f040 81db 	bne.w	80077fc <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007446:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800744a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	f040 81d4 	bne.w	80077fc <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007458:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	b29b      	uxth	r3, r3
 8007472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800747e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007482:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	441a      	add	r2, r3
 8007498:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800749c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	8013      	strh	r3, [r2, #0]
 80074b0:	e1a4      	b.n	80077fc <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80074b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	78db      	ldrb	r3, [r3, #3]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	f040 819a 	bne.w	80077f8 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80074c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	699a      	ldr	r2, [r3, #24]
 80074d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d917      	bls.n	8007510 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80074e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80074f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	699a      	ldr	r2, [r3, #24]
 80074fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007500:	1ad2      	subs	r2, r2, r3
 8007502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	619a      	str	r2, [r3, #24]
 800750e:	e00e      	b.n	800752e <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8007510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2200      	movs	r2, #0
 800752c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800752e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	785b      	ldrb	r3, [r3, #1]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d178      	bne.n	8007630 <USB_EPStartXfer+0x1420>
 800753e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007542:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800754c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007550:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800755a:	b29b      	uxth	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007562:	4413      	add	r3, r2
 8007564:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800756c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	00da      	lsls	r2, r3, #3
 8007576:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800757a:	4413      	add	r3, r2
 800757c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007580:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007588:	2b3e      	cmp	r3, #62	; 0x3e
 800758a:	d91d      	bls.n	80075c8 <USB_EPStartXfer+0x13b8>
 800758c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007590:	095b      	lsrs	r3, r3, #5
 8007592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800759a:	f003 031f 	and.w	r3, r3, #31
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d104      	bne.n	80075ac <USB_EPStartXfer+0x139c>
 80075a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075a6:	3b01      	subs	r3, #1
 80075a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	029b      	lsls	r3, r3, #10
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075be:	b29a      	uxth	r2, r3
 80075c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075c4:	801a      	strh	r2, [r3, #0]
 80075c6:	e064      	b.n	8007692 <USB_EPStartXfer+0x1482>
 80075c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d116      	bne.n	80075fe <USB_EPStartXfer+0x13ee>
 80075d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075d4:	881b      	ldrh	r3, [r3, #0]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075dc:	b29a      	uxth	r2, r3
 80075de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075e2:	801a      	strh	r2, [r3, #0]
 80075e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075fa:	801a      	strh	r2, [r3, #0]
 80075fc:	e049      	b.n	8007692 <USB_EPStartXfer+0x1482>
 80075fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007602:	085b      	lsrs	r3, r3, #1
 8007604:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d004      	beq.n	800761e <USB_EPStartXfer+0x140e>
 8007614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007618:	3301      	adds	r3, #1
 800761a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800761e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007622:	b29b      	uxth	r3, r3
 8007624:	029b      	lsls	r3, r3, #10
 8007626:	b29a      	uxth	r2, r3
 8007628:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800762c:	801a      	strh	r2, [r3, #0]
 800762e:	e030      	b.n	8007692 <USB_EPStartXfer+0x1482>
 8007630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	785b      	ldrb	r3, [r3, #1]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d128      	bne.n	8007692 <USB_EPStartXfer+0x1482>
 8007640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800764e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765c:	b29b      	uxth	r3, r3
 800765e:	461a      	mov	r2, r3
 8007660:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007664:	4413      	add	r3, r2
 8007666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800766a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	00da      	lsls	r2, r3, #3
 8007678:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800767c:	4413      	add	r3, r2
 800767e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007682:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800768a:	b29a      	uxth	r2, r3
 800768c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007690:	801a      	strh	r2, [r3, #0]
 8007692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007696:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	785b      	ldrb	r3, [r3, #1]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d178      	bne.n	80077a2 <USB_EPStartXfer+0x1592>
 80076b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80076be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	461a      	mov	r2, r3
 80076d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076d4:	4413      	add	r3, r2
 80076d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80076da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	00da      	lsls	r2, r3, #3
 80076e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076ec:	4413      	add	r3, r2
 80076ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076fa:	2b3e      	cmp	r3, #62	; 0x3e
 80076fc:	d91d      	bls.n	800773a <USB_EPStartXfer+0x152a>
 80076fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007702:	095b      	lsrs	r3, r3, #5
 8007704:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800770c:	f003 031f 	and.w	r3, r3, #31
 8007710:	2b00      	cmp	r3, #0
 8007712:	d104      	bne.n	800771e <USB_EPStartXfer+0x150e>
 8007714:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007718:	3b01      	subs	r3, #1
 800771a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800771e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007722:	b29b      	uxth	r3, r3
 8007724:	029b      	lsls	r3, r3, #10
 8007726:	b29b      	uxth	r3, r3
 8007728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800772c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007730:	b29a      	uxth	r2, r3
 8007732:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007736:	801a      	strh	r2, [r3, #0]
 8007738:	e060      	b.n	80077fc <USB_EPStartXfer+0x15ec>
 800773a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800773e:	2b00      	cmp	r3, #0
 8007740:	d116      	bne.n	8007770 <USB_EPStartXfer+0x1560>
 8007742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	b29b      	uxth	r3, r3
 800774a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800774e:	b29a      	uxth	r2, r3
 8007750:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007754:	801a      	strh	r2, [r3, #0]
 8007756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007766:	b29a      	uxth	r2, r3
 8007768:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800776c:	801a      	strh	r2, [r3, #0]
 800776e:	e045      	b.n	80077fc <USB_EPStartXfer+0x15ec>
 8007770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007774:	085b      	lsrs	r3, r3, #1
 8007776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800777a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d004      	beq.n	8007790 <USB_EPStartXfer+0x1580>
 8007786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800778a:	3301      	adds	r3, #1
 800778c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007790:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007794:	b29b      	uxth	r3, r3
 8007796:	029b      	lsls	r3, r3, #10
 8007798:	b29a      	uxth	r2, r3
 800779a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800779e:	801a      	strh	r2, [r3, #0]
 80077a0:	e02c      	b.n	80077fc <USB_EPStartXfer+0x15ec>
 80077a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	785b      	ldrb	r3, [r3, #1]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d124      	bne.n	80077fc <USB_EPStartXfer+0x15ec>
 80077b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	461a      	mov	r2, r3
 80077c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80077c8:	4413      	add	r3, r2
 80077ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	00da      	lsls	r2, r3, #3
 80077dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80077e0:	4413      	add	r3, r2
 80077e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077f4:	801a      	strh	r2, [r3, #0]
 80077f6:	e001      	b.n	80077fc <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e03a      	b.n	8007872 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007800:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800780a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
 800781a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800781e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007822:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007826:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800782a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800782e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007832:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007836:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800783a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800783e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007842:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800784c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	441a      	add	r2, r3
 8007858:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800785c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800786c:	b29b      	uxth	r3, r3
 800786e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	785b      	ldrb	r3, [r3, #1]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d020      	beq.n	80078d0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	b29b      	uxth	r3, r3
 800789c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a4:	81bb      	strh	r3, [r7, #12]
 80078a6:	89bb      	ldrh	r3, [r7, #12]
 80078a8:	f083 0310 	eor.w	r3, r3, #16
 80078ac:	81bb      	strh	r3, [r7, #12]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	441a      	add	r2, r3
 80078b8:	89bb      	ldrh	r3, [r7, #12]
 80078ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	8013      	strh	r3, [r2, #0]
 80078ce:	e01f      	b.n	8007910 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	b29b      	uxth	r3, r3
 80078de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e6:	81fb      	strh	r3, [r7, #14]
 80078e8:	89fb      	ldrh	r3, [r7, #14]
 80078ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078ee:	81fb      	strh	r3, [r7, #14]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	441a      	add	r2, r3
 80078fa:	89fb      	ldrh	r3, [r7, #14]
 80078fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800790c:	b29b      	uxth	r3, r3
 800790e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800791e:	b480      	push	{r7}
 8007920:	b087      	sub	sp, #28
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	7b1b      	ldrb	r3, [r3, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	f040 809d 	bne.w	8007a6c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	785b      	ldrb	r3, [r3, #1]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d04c      	beq.n	80079d4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	881b      	ldrh	r3, [r3, #0]
 8007946:	823b      	strh	r3, [r7, #16]
 8007948:	8a3b      	ldrh	r3, [r7, #16]
 800794a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d01b      	beq.n	800798a <USB_EPClearStall+0x6c>
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	b29b      	uxth	r3, r3
 8007960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007968:	81fb      	strh	r3, [r7, #14]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	441a      	add	r2, r3
 8007974:	89fb      	ldrh	r3, [r7, #14]
 8007976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800797a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800797e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007982:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007986:	b29b      	uxth	r3, r3
 8007988:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	78db      	ldrb	r3, [r3, #3]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d06c      	beq.n	8007a6c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079a8:	81bb      	strh	r3, [r7, #12]
 80079aa:	89bb      	ldrh	r3, [r7, #12]
 80079ac:	f083 0320 	eor.w	r3, r3, #32
 80079b0:	81bb      	strh	r3, [r7, #12]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	441a      	add	r2, r3
 80079bc:	89bb      	ldrh	r3, [r7, #12]
 80079be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	8013      	strh	r3, [r2, #0]
 80079d2:	e04b      	b.n	8007a6c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	82fb      	strh	r3, [r7, #22]
 80079e2:	8afb      	ldrh	r3, [r7, #22]
 80079e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d01b      	beq.n	8007a24 <USB_EPClearStall+0x106>
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a02:	82bb      	strh	r3, [r7, #20]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	441a      	add	r2, r3
 8007a0e:	8abb      	ldrh	r3, [r7, #20]
 8007a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a3a:	827b      	strh	r3, [r7, #18]
 8007a3c:	8a7b      	ldrh	r3, [r7, #18]
 8007a3e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a42:	827b      	strh	r3, [r7, #18]
 8007a44:	8a7b      	ldrh	r3, [r7, #18]
 8007a46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a4a:	827b      	strh	r3, [r7, #18]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	441a      	add	r2, r3
 8007a56:	8a7b      	ldrh	r3, [r7, #18]
 8007a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	371c      	adds	r7, #28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	460b      	mov	r3, r1
 8007a84:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d103      	bne.n	8007a94 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2280      	movs	r2, #128	; 0x80
 8007a90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b085      	sub	sp, #20
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b08d      	sub	sp, #52	; 0x34
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	4611      	mov	r1, r2
 8007b26:	461a      	mov	r2, r3
 8007b28:	460b      	mov	r3, r1
 8007b2a:	80fb      	strh	r3, [r7, #6]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007b30:	88bb      	ldrh	r3, [r7, #4]
 8007b32:	3301      	adds	r3, #1
 8007b34:	085b      	lsrs	r3, r3, #1
 8007b36:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b40:	88fa      	ldrh	r2, [r7, #6]
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b4a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b50:	e01b      	b.n	8007b8a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	021b      	lsls	r3, r3, #8
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	461a      	mov	r2, r3
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	3302      	adds	r3, #2
 8007b7c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	3301      	adds	r3, #1
 8007b82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b86:	3b01      	subs	r3, #1
 8007b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e0      	bne.n	8007b52 <USB_WritePMA+0x38>
  }
}
 8007b90:	bf00      	nop
 8007b92:	bf00      	nop
 8007b94:	3734      	adds	r7, #52	; 0x34
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b08b      	sub	sp, #44	; 0x2c
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	60f8      	str	r0, [r7, #12]
 8007ba6:	60b9      	str	r1, [r7, #8]
 8007ba8:	4611      	mov	r1, r2
 8007baa:	461a      	mov	r2, r3
 8007bac:	460b      	mov	r3, r1
 8007bae:	80fb      	strh	r3, [r7, #6]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007bb4:	88bb      	ldrh	r3, [r7, #4]
 8007bb6:	085b      	lsrs	r3, r3, #1
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007bc4:	88fa      	ldrh	r2, [r7, #6]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	4413      	add	r3, r2
 8007bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bce:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd4:	e018      	b.n	8007c08 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	3302      	adds	r3, #2
 8007be2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	0a1b      	lsrs	r3, r3, #8
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	3b01      	subs	r3, #1
 8007c06:	627b      	str	r3, [r7, #36]	; 0x24
 8007c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e3      	bne.n	8007bd6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007c0e:	88bb      	ldrh	r3, [r7, #4]
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d007      	beq.n	8007c2a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	701a      	strb	r2, [r3, #0]
  }
}
 8007c2a:	bf00      	nop
 8007c2c:	372c      	adds	r7, #44	; 0x2c
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
	...

08007c38 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007c3c:	f3bf 8f4f 	dsb	sy
}
 8007c40:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007c42:	4b06      	ldr	r3, [pc, #24]	; (8007c5c <__NVIC_SystemReset+0x24>)
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007c4a:	4904      	ldr	r1, [pc, #16]	; (8007c5c <__NVIC_SystemReset+0x24>)
 8007c4c:	4b04      	ldr	r3, [pc, #16]	; (8007c60 <__NVIC_SystemReset+0x28>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007c52:	f3bf 8f4f 	dsb	sy
}
 8007c56:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007c58:	bf00      	nop
 8007c5a:	e7fd      	b.n	8007c58 <__NVIC_SystemReset+0x20>
 8007c5c:	e000ed00 	.word	0xe000ed00
 8007c60:	05fa0004 	.word	0x05fa0004

08007c64 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8007c70:	f240 401c 	movw	r0, #1052	; 0x41c
 8007c74:	f005 f932 	bl	800cedc <USBD_static_malloc>
 8007c78:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d105      	bne.n	8007c8c <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e03f      	b.n	8007d0c <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ca2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2202      	movs	r2, #2
 8007cea:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	4798      	blx	r3
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e000      	b.n	8007d0c <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	e027      	b.n	8007d7e <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d34:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2202      	movs	r2, #2
 8007d4a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f005 f8c2 	bl	800cef8 <USBD_static_free>
  pdev->pClassData = NULL;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
	...

08007d88 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b088      	sub	sp, #32
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d98:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e0d5      	b.n	8007f60 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d03e      	beq.n	8007e3e <USBD_DFU_Setup+0xb6>
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	f040 80c5 	bne.w	8007f50 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	785b      	ldrb	r3, [r3, #1]
 8007dca:	2b06      	cmp	r3, #6
 8007dcc:	d82f      	bhi.n	8007e2e <USBD_DFU_Setup+0xa6>
 8007dce:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <USBD_DFU_Setup+0x4c>)
 8007dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd4:	08007e25 	.word	0x08007e25
 8007dd8:	08007df1 	.word	0x08007df1
 8007ddc:	08007dfb 	.word	0x08007dfb
 8007de0:	08007e05 	.word	0x08007e05
 8007de4:	08007e0d 	.word	0x08007e0d
 8007de8:	08007e15 	.word	0x08007e15
 8007dec:	08007e1d 	.word	0x08007e1d
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fa6c 	bl	80082d0 <DFU_Download>
          break;
 8007df8:	e020      	b.n	8007e3c <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fad3 	bl	80083a8 <DFU_Upload>
          break;
 8007e02:	e01b      	b.n	8007e3c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fba9 	bl	800855c <DFU_GetStatus>
          break;
 8007e0a:	e017      	b.n	8007e3c <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fc5b 	bl	80086c8 <DFU_ClearStatus>
          break;
 8007e12:	e013      	b.n	8007e3c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fcab 	bl	8008770 <DFU_GetState>
          break;
 8007e1a:	e00f      	b.n	8007e3c <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fcbf 	bl	80087a0 <DFU_Abort>
          break;
 8007e22:	e00b      	b.n	8007e3c <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f9ee 	bl	8008208 <DFU_Detach>
          break;
 8007e2c:	e006      	b.n	8007e3c <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 fdb1 	bl	8009998 <USBD_CtlError>
          ret = USBD_FAIL;
 8007e36:	2303      	movs	r3, #3
 8007e38:	77fb      	strb	r3, [r7, #31]
          break;
 8007e3a:	bf00      	nop
      }
      break;
 8007e3c:	e08f      	b.n	8007f5e <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	785b      	ldrb	r3, [r3, #1]
 8007e42:	2b0b      	cmp	r3, #11
 8007e44:	d87b      	bhi.n	8007f3e <USBD_DFU_Setup+0x1b6>
 8007e46:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <USBD_DFU_Setup+0xc4>)
 8007e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4c:	08007e7d 	.word	0x08007e7d
 8007e50:	08007f4d 	.word	0x08007f4d
 8007e54:	08007f3f 	.word	0x08007f3f
 8007e58:	08007f3f 	.word	0x08007f3f
 8007e5c:	08007f3f 	.word	0x08007f3f
 8007e60:	08007f3f 	.word	0x08007f3f
 8007e64:	08007ea7 	.word	0x08007ea7
 8007e68:	08007f3f 	.word	0x08007f3f
 8007e6c:	08007f3f 	.word	0x08007f3f
 8007e70:	08007f3f 	.word	0x08007f3f
 8007e74:	08007ed1 	.word	0x08007ed1
 8007e78:	08007efd 	.word	0x08007efd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d107      	bne.n	8007e98 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e88:	f107 030e 	add.w	r3, r7, #14
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f001 fdf2 	bl	8009a7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e96:	e05a      	b.n	8007f4e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f001 fd7c 	bl	8009998 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	77fb      	strb	r3, [r7, #31]
          break;
 8007ea4:	e053      	b.n	8007f4e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	885b      	ldrh	r3, [r3, #2]
 8007eaa:	0a1b      	lsrs	r3, r3, #8
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b21      	cmp	r3, #33	; 0x21
 8007eb0:	d107      	bne.n	8007ec2 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8007eb2:	4b2d      	ldr	r3, [pc, #180]	; (8007f68 <USBD_DFU_Setup+0x1e0>)
 8007eb4:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	88db      	ldrh	r3, [r3, #6]
 8007eba:	2b09      	cmp	r3, #9
 8007ebc:	bf28      	it	cs
 8007ebe:	2309      	movcs	r3, #9
 8007ec0:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ec2:	8afb      	ldrh	r3, [r7, #22]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	69b9      	ldr	r1, [r7, #24]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 fdd6 	bl	8009a7a <USBD_CtlSendData>
          break;
 8007ece:	e03e      	b.n	8007f4e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b03      	cmp	r3, #3
 8007eda:	d108      	bne.n	8007eee <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f001 fdc7 	bl	8009a7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007eec:	e02f      	b.n	8007f4e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f001 fd51 	bl	8009998 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	77fb      	strb	r3, [r7, #31]
          break;
 8007efa:	e028      	b.n	8007f4e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	885b      	ldrh	r3, [r3, #2]
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d114      	bne.n	8007f30 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d107      	bne.n	8007f22 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	885b      	ldrh	r3, [r3, #2]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	461a      	mov	r2, r3
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f20:	e015      	b.n	8007f4e <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 fd37 	bl	8009998 <USBD_CtlError>
              ret = USBD_FAIL;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	77fb      	strb	r3, [r7, #31]
          break;
 8007f2e:	e00e      	b.n	8007f4e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f001 fd30 	bl	8009998 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	77fb      	strb	r3, [r7, #31]
          break;
 8007f3c:	e007      	b.n	8007f4e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f001 fd29 	bl	8009998 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f46:	2303      	movs	r3, #3
 8007f48:	77fb      	strb	r3, [r7, #31]
          break;
 8007f4a:	e000      	b.n	8007f4e <USBD_DFU_Setup+0x1c6>
          break;
 8007f4c:	bf00      	nop
      }
      break;
 8007f4e:	e006      	b.n	8007f5e <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 fd20 	bl	8009998 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	77fb      	strb	r3, [r7, #31]
      break;
 8007f5c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3720      	adds	r7, #32
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	2000005a 	.word	0x2000005a

08007f6c <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	221b      	movs	r2, #27
 8007f78:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8007f7a:	4b03      	ldr	r3, [pc, #12]	; (8007f88 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	20000048 	.word	0x20000048

08007f8c <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b088      	sub	sp, #32
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fb0:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fb8:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e0ce      	b.n	8008162 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	f040 80bd 	bne.w	800814a <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d17c      	bne.n	80080d4 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	f000 8093 	beq.w	800810c <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fec:	2b05      	cmp	r3, #5
 8007fee:	d15e      	bne.n	80080ae <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	2b21      	cmp	r3, #33	; 0x21
 8007ff6:	d124      	bne.n	8008042 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	785b      	ldrb	r3, [r3, #1]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	789b      	ldrb	r3, [r3, #2]
 800800e:	021b      	lsls	r3, r3, #8
 8008010:	441a      	add	r2, r3
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	78db      	ldrb	r3, [r3, #3]
 8008022:	041b      	lsls	r3, r3, #16
 8008024:	441a      	add	r2, r3
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	791b      	ldrb	r3, [r3, #4]
 8008036:	061b      	lsls	r3, r3, #24
 8008038:	441a      	add	r2, r3
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8008040:	e064      	b.n	800810c <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	2b41      	cmp	r3, #65	; 0x41
 8008048:	d12f      	bne.n	80080aa <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	461a      	mov	r2, r3
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	789b      	ldrb	r3, [r3, #2]
 8008060:	021b      	lsls	r3, r3, #8
 8008062:	441a      	add	r2, r3
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	78db      	ldrb	r3, [r3, #3]
 8008074:	041b      	lsls	r3, r3, #16
 8008076:	441a      	add	r2, r3
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	791b      	ldrb	r3, [r3, #4]
 8008088:	061b      	lsls	r3, r3, #24
 800808a:	441a      	add	r2, r3
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	69fa      	ldr	r2, [r7, #28]
 8008098:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 800809c:	4610      	mov	r0, r2
 800809e:	4798      	blx	r3
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d032      	beq.n	800810c <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e05b      	b.n	8008162 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e059      	b.n	8008162 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 80080c2:	2301      	movs	r3, #1
 80080c4:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 80080c6:	f107 030c 	add.w	r3, r7, #12
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f001 fc63 	bl	8009998 <USBD_CtlError>
 80080d2:	e01b      	b.n	800810c <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d916      	bls.n	800810c <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80080e4:	3b02      	subs	r3, #2
 80080e6:	029a      	lsls	r2, r3, #10
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80080ee:	4413      	add	r3, r2
 80080f0:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	69f8      	ldr	r0, [r7, #28]
 80080f8:	6979      	ldr	r1, [r7, #20]
 80080fa:	69fa      	ldr	r2, [r7, #28]
 80080fc:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8008100:	4798      	blx	r3
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 8008108:	2303      	movs	r3, #3
 800810a:	e02a      	b.n	8008162 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	2200      	movs	r2, #0
 8008110:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	2200      	movs	r2, #0
 8008118:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	2203      	movs	r2, #3
 8008120:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8008148:	e00a      	b.n	8008160 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008150:	2b07      	cmp	r3, #7
 8008152:	d103      	bne.n	800815c <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fb75 	bl	8008844 <DFU_Leave>
 800815a:	e001      	b.n	8008160 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 800815c:	2303      	movs	r3, #3
 800815e:	e000      	b.n	8008162 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3720      	adds	r7, #32
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800816a:	b480      	push	{r7}
 800816c:	b083      	sub	sp, #12
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	220a      	movs	r2, #10
 800818c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800818e:	4b03      	ldr	r3, [pc, #12]	; (800819c <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	20000064 	.word	0x20000064

080081a0 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	460b      	mov	r3, r1
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081b4:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80081b6:	7afb      	ldrb	r3, [r7, #11]
 80081b8:	2b06      	cmp	r3, #6
 80081ba:	d808      	bhi.n	80081ce <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	4905      	ldr	r1, [pc, #20]	; (80081d8 <USBD_DFU_GetUsrStringDesc+0x38>)
 80081c4:	4618      	mov	r0, r3
 80081c6:	f001 fbf8 	bl	80099ba <USBD_GetString>
    return USBD_StrDesc;
 80081ca:	4b03      	ldr	r3, [pc, #12]	; (80081d8 <USBD_DFU_GetUsrStringDesc+0x38>)
 80081cc:	e000      	b.n	80081d0 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80081ce:	2300      	movs	r3, #0
  }
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	200003c8 	.word	0x200003c8

080081dc <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e004      	b.n	80081fa <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
	...

08008208 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008218:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d051      	beq.n	80082c4 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008226:	2b02      	cmp	r3, #2
 8008228:	d013      	beq.n	8008252 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008230:	2b03      	cmp	r3, #3
 8008232:	d00e      	beq.n	8008252 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800823a:	2b05      	cmp	r3, #5
 800823c:	d009      	beq.n	8008252 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008244:	2b06      	cmp	r3, #6
 8008246:	d004      	beq.n	8008252 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800824e:	2b09      	cmp	r3, #9
 8008250:	d125      	bne.n	800829e <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2202      	movs	r2, #2
 8008256:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 800829e:	4b0b      	ldr	r3, [pc, #44]	; (80082cc <DFU_Detach+0xc4>)
 80082a0:	7d5b      	ldrb	r3, [r3, #21]
 80082a2:	f003 0310 	and.w	r3, r3, #16
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d006      	beq.n	80082b8 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fb7b 	bl	80089a6 <USBD_Stop>
    (void)USBD_Start(pdev);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fb6c 	bl	800898e <USBD_Start>
 80082b6:	e006      	b.n	80082c6 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	885b      	ldrh	r3, [r3, #2]
 80082bc:	4618      	mov	r0, r3
 80082be:	f7f8 fdfd 	bl	8000ebc <HAL_Delay>
 80082c2:	e000      	b.n	80082c6 <DFU_Detach+0xbe>
    return;
 80082c4:	bf00      	nop
  }
}
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	20000048 	.word	0x20000048

080082d0 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082e0:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d05b      	beq.n	80083a0 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	88db      	ldrh	r3, [r3, #6]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d02d      	beq.n	800834c <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d004      	beq.n	8008304 <DFU_Download+0x34>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008300:	2b05      	cmp	r3, #5
 8008302:	d11e      	bne.n	8008342 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	885b      	ldrh	r3, [r3, #2]
 8008308:	461a      	mov	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	88db      	ldrh	r3, [r3, #6]
 8008314:	461a      	mov	r2, r3
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2203      	movs	r2, #3
 8008320:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8008330:	68f9      	ldr	r1, [r7, #12]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008338:	461a      	mov	r2, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 fbc9 	bl	8009ad2 <USBD_CtlPrepareRx>
 8008340:	e02f      	b.n	80083a2 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f001 fb27 	bl	8009998 <USBD_CtlError>
 800834a:	e02a      	b.n	80083a2 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008352:	2b05      	cmp	r3, #5
 8008354:	d004      	beq.n	8008360 <DFU_Download+0x90>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800835c:	2b02      	cmp	r3, #2
 800835e:	d11a      	bne.n	8008396 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2206      	movs	r2, #6
 800836c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8008394:	e005      	b.n	80083a2 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 fafd 	bl	8009998 <USBD_CtlError>
 800839e:	e000      	b.n	80083a2 <DFU_Download+0xd2>
    return;
 80083a0:	bf00      	nop
    }
  }
}
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083b8:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083c0:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 80c4 	beq.w	8008552 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	88db      	ldrh	r3, [r3, #6]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 80a8 	beq.w	8008524 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d005      	beq.n	80083ea <DFU_Upload+0x42>
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80083e4:	2b09      	cmp	r3, #9
 80083e6:	f040 8090 	bne.w	800850a <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	885b      	ldrh	r3, [r3, #2]
 80083ee:	461a      	mov	r2, r3
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	88db      	ldrh	r3, [r3, #6]
 80083fa:	461a      	mov	r2, r3
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008408:	2b00      	cmp	r3, #0
 800840a:	d12c      	bne.n	8008466 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008412:	2b03      	cmp	r3, #3
 8008414:	d901      	bls.n	800841a <DFU_Upload+0x72>
 8008416:	2202      	movs	r2, #2
 8008418:	e000      	b.n	800841c <DFU_Upload+0x74>
 800841a:	2209      	movs	r2, #9
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2200      	movs	r2, #0
 800844a:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2221      	movs	r2, #33	; 0x21
 8008450:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2241      	movs	r2, #65	; 0x41
 8008456:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2203      	movs	r2, #3
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 fb0b 	bl	8009a7a <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008464:	e076      	b.n	8008554 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800846c:	2b01      	cmp	r3, #1
 800846e:	d931      	bls.n	80084d4 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	2209      	movs	r2, #9
 8008474:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80084a2:	3b02      	subs	r3, #2
 80084a4:	029a      	lsls	r2, r3, #10
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80084ac:	4413      	add	r3, r2
 80084ae:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	6979      	ldr	r1, [r7, #20]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80084be:	4798      	blx	r3
 80084c0:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084c8:	461a      	mov	r2, r3
 80084ca:	68b9      	ldr	r1, [r7, #8]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 fad4 	bl	8009a7a <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80084d2:	e03f      	b.n	8008554 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	220f      	movs	r2, #15
 80084d8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f001 fa48 	bl	8009998 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8008508:	e024      	b.n	8008554 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2200      	movs	r2, #0
 800850e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	2200      	movs	r2, #0
 8008516:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f001 fa3b 	bl	8009998 <USBD_CtlError>
 8008522:	e017      	b.n	8008554 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8008550:	e000      	b.n	8008554 <DFU_Upload+0x1ac>
    return;
 8008552:	bf00      	nop
  }
}
 8008554:	3718      	adds	r7, #24
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
	...

0800855c <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800856a:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008572:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 80a0 	beq.w	80086bc <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008582:	2b03      	cmp	r3, #3
 8008584:	d002      	beq.n	800858c <DFU_GetStatus+0x30>
 8008586:	2b06      	cmp	r3, #6
 8008588:	d051      	beq.n	800862e <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 800858a:	e08e      	b.n	80086aa <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008592:	2b00      	cmp	r3, #0
 8008594:	d034      	beq.n	8008600 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2204      	movs	r2, #4
 800859a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10e      	bne.n	80085ea <DFU_GetStatus+0x8e>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b41      	cmp	r3, #65	; 0x41
 80085d2:	d10a      	bne.n	80085ea <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80085e4:	2100      	movs	r1, #0
 80085e6:	4798      	blx	r3
      break;
 80085e8:	e05f      	b.n	80086aa <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80085fa:	2101      	movs	r1, #1
 80085fc:	4798      	blx	r3
      break;
 80085fe:	e054      	b.n	80086aa <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2205      	movs	r2, #5
 8008604:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 800862c:	e03d      	b.n	80086aa <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8008634:	2b01      	cmp	r3, #1
 8008636:	d116      	bne.n	8008666 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2207      	movs	r2, #7
 800863c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8008664:	e020      	b.n	80086a8 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800866c:	2b00      	cmp	r3, #0
 800866e:	d11b      	bne.n	80086a8 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8008670:	4b14      	ldr	r3, [pc, #80]	; (80086c4 <DFU_GetStatus+0x168>)
 8008672:	7d1b      	ldrb	r3, [r3, #20]
 8008674:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8008678:	2b00      	cmp	r3, #0
 800867a:	d015      	beq.n	80086a8 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2202      	movs	r2, #2
 8008680:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 80086a8:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80086b0:	2206      	movs	r2, #6
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 f9e0 	bl	8009a7a <USBD_CtlSendData>
 80086ba:	e000      	b.n	80086be <DFU_GetStatus+0x162>
    return;
 80086bc:	bf00      	nop
}
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	20000048 	.word	0x20000048

080086c8 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086d6:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d042      	beq.n	8008764 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80086e4:	2b0a      	cmp	r3, #10
 80086e6:	d11e      	bne.n	8008726 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2202      	movs	r2, #2
 80086ec:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 8008724:	e01f      	b.n	8008766 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	220a      	movs	r2, #10
 800872a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	220e      	movs	r2, #14
 8008732:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 8008762:	e000      	b.n	8008766 <DFU_ClearStatus+0x9e>
    return;
 8008764:	bf00      	nop
  }
}
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800877e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d008      	beq.n	8008798 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800878c:	2201      	movs	r2, #1
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f001 f972 	bl	8009a7a <USBD_CtlSendData>
 8008796:	e000      	b.n	800879a <DFU_GetState+0x2a>
    return;
 8008798:	bf00      	nop
}
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087ae:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d03f      	beq.n	8008836 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d013      	beq.n	80087e8 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d00e      	beq.n	80087e8 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80087d0:	2b05      	cmp	r3, #5
 80087d2:	d009      	beq.n	80087e8 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80087da:	2b06      	cmp	r3, #6
 80087dc:	d004      	beq.n	80087e8 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80087e4:	2b09      	cmp	r3, #9
 80087e6:	d127      	bne.n	8008838 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2202      	movs	r2, #2
 80087ec:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8008834:	e000      	b.n	8008838 <DFU_Abort+0x98>
    return;
 8008836:	bf00      	nop
  }
}
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
	...

08008844 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008852:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d03b      	beq.n	80088d2 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8008862:	4b1e      	ldr	r3, [pc, #120]	; (80088dc <DFU_Leave+0x98>)
 8008864:	7d1b      	ldrb	r3, [r3, #20]
 8008866:	f003 0304 	and.w	r3, r3, #4
 800886a:	2b00      	cmp	r3, #0
 800886c:	d016      	beq.n	800889c <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2206      	movs	r2, #6
 8008872:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 800889a:	e01b      	b.n	80088d4 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2208      	movs	r2, #8
 80088a0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f86c 	bl	80089a6 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 80088ce:	f7ff f9b3 	bl	8007c38 <__NVIC_SystemReset>
    return;
 80088d2:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	20000048 	.word	0x20000048

080088e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	4613      	mov	r3, r2
 80088ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e01f      	b.n	8008938 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d003      	beq.n	800891e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	79fa      	ldrb	r2, [r7, #7]
 800892a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f004 f931 	bl	800cb94 <USBD_LL_Init>
 8008932:	4603      	mov	r3, r0
 8008934:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008936:	7dfb      	ldrb	r3, [r7, #23]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800894a:	2300      	movs	r3, #0
 800894c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008954:	2303      	movs	r3, #3
 8008956:	e016      	b.n	8008986 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00b      	beq.n	8008984 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008974:	f107 020e 	add.w	r2, r7, #14
 8008978:	4610      	mov	r0, r2
 800897a:	4798      	blx	r3
 800897c:	4602      	mov	r2, r0
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b082      	sub	sp, #8
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f004 f942 	bl	800cc20 <USBD_LL_Start>
 800899c:	4603      	mov	r3, r0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f004 f951 	bl	800cc56 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d009      	beq.n	80089d2 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	6852      	ldr	r2, [r2, #4]
 80089ca:	b2d2      	uxtb	r2, r2
 80089cc:	4611      	mov	r1, r2
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	4798      	blx	r3
  }

  return USBD_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b084      	sub	sp, #16
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	460b      	mov	r3, r1
 80089fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80089fe:	2303      	movs	r3, #3
 8008a00:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d009      	beq.n	8008a20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	78fa      	ldrb	r2, [r7, #3]
 8008a16:	4611      	mov	r1, r2
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	4798      	blx	r3
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	460b      	mov	r3, r1
 8008a34:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d007      	beq.n	8008a50 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	78fa      	ldrb	r2, [r7, #3]
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	4798      	blx	r3
  }

  return USBD_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 ff59 	bl	8009924 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008a80:	461a      	mov	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a8e:	f003 031f 	and.w	r3, r3, #31
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d01a      	beq.n	8008acc <USBD_LL_SetupStage+0x72>
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d822      	bhi.n	8008ae0 <USBD_LL_SetupStage+0x86>
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d002      	beq.n	8008aa4 <USBD_LL_SetupStage+0x4a>
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d00a      	beq.n	8008ab8 <USBD_LL_SetupStage+0x5e>
 8008aa2:	e01d      	b.n	8008ae0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f9ef 	bl	8008e90 <USBD_StdDevReq>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ab6:	e020      	b.n	8008afa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008abe:	4619      	mov	r1, r3
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fa53 	bl	8008f6c <USBD_StdItfReq>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	73fb      	strb	r3, [r7, #15]
      break;
 8008aca:	e016      	b.n	8008afa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fa92 	bl	8008ffe <USBD_StdEPReq>
 8008ada:	4603      	mov	r3, r0
 8008adc:	73fb      	strb	r3, [r7, #15]
      break;
 8008ade:	e00c      	b.n	8008afa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ae6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	4619      	mov	r1, r3
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f004 f8f2 	bl	800ccd8 <USBD_LL_StallEP>
 8008af4:	4603      	mov	r3, r0
 8008af6:	73fb      	strb	r3, [r7, #15]
      break;
 8008af8:	bf00      	nop
  }

  return ret;
 8008afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	607a      	str	r2, [r7, #4]
 8008b10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008b12:	7afb      	ldrb	r3, [r7, #11]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d138      	bne.n	8008b8a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d14a      	bne.n	8008bc0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	689a      	ldr	r2, [r3, #8]
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d913      	bls.n	8008b5e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	689a      	ldr	r2, [r3, #8]
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	1ad2      	subs	r2, r2, r3
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	68da      	ldr	r2, [r3, #12]
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	bf28      	it	cs
 8008b50:	4613      	movcs	r3, r2
 8008b52:	461a      	mov	r2, r3
 8008b54:	6879      	ldr	r1, [r7, #4]
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f000 ffd8 	bl	8009b0c <USBD_CtlContinueRx>
 8008b5c:	e030      	b.n	8008bc0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d10b      	bne.n	8008b82 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d005      	beq.n	8008b82 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 ffd3 	bl	8009b2e <USBD_CtlSendStatus>
 8008b88:	e01a      	b.n	8008bc0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	d114      	bne.n	8008bc0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00e      	beq.n	8008bc0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	7afa      	ldrb	r2, [r7, #11]
 8008bac:	4611      	mov	r1, r2
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	4798      	blx	r3
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
 8008bbe:	e000      	b.n	8008bc2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b086      	sub	sp, #24
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	60f8      	str	r0, [r7, #12]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	607a      	str	r2, [r7, #4]
 8008bd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008bd8:	7afb      	ldrb	r3, [r7, #11]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d16b      	bne.n	8008cb6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3314      	adds	r3, #20
 8008be2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d156      	bne.n	8008c9c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	689a      	ldr	r2, [r3, #8]
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d914      	bls.n	8008c24 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	689a      	ldr	r2, [r3, #8]
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	1ad2      	subs	r2, r2, r3
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	6879      	ldr	r1, [r7, #4]
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 ff4d 	bl	8009ab0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c16:	2300      	movs	r3, #0
 8008c18:	2200      	movs	r2, #0
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f004 f906 	bl	800ce2e <USBD_LL_PrepareReceive>
 8008c22:	e03b      	b.n	8008c9c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	68da      	ldr	r2, [r3, #12]
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d11c      	bne.n	8008c6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d316      	bcc.n	8008c6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	685a      	ldr	r2, [r3, #4]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d20f      	bcs.n	8008c6a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 ff2e 	bl	8009ab0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	2200      	movs	r2, #0
 8008c60:	2100      	movs	r1, #0
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f004 f8e3 	bl	800ce2e <USBD_LL_PrepareReceive>
 8008c68:	e018      	b.n	8008c9c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d10b      	bne.n	8008c8e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d005      	beq.n	8008c8e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c8e:	2180      	movs	r1, #128	; 0x80
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f004 f821 	bl	800ccd8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f000 ff5c 	bl	8009b54 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d122      	bne.n	8008cec <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f7ff fe98 	bl	80089dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008cb4:	e01a      	b.n	8008cec <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d114      	bne.n	8008cec <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00e      	beq.n	8008cec <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	7afa      	ldrb	r2, [r7, #11]
 8008cd8:	4611      	mov	r1, r2
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	4798      	blx	r3
 8008cde:	4603      	mov	r3, r0
 8008ce0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008ce2:	7dfb      	ldrb	r3, [r7, #23]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	e000      	b.n	8008cee <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3718      	adds	r7, #24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b082      	sub	sp, #8
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e02f      	b.n	8008d8a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00f      	beq.n	8008d54 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d009      	beq.n	8008d54 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	6852      	ldr	r2, [r2, #4]
 8008d4c:	b2d2      	uxtb	r2, r2
 8008d4e:	4611      	mov	r1, r2
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d54:	2340      	movs	r3, #64	; 0x40
 8008d56:	2200      	movs	r2, #0
 8008d58:	2100      	movs	r1, #0
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f003 ff96 	bl	800cc8c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2240      	movs	r2, #64	; 0x40
 8008d6c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d70:	2340      	movs	r3, #64	; 0x40
 8008d72:	2200      	movs	r2, #0
 8008d74:	2180      	movs	r1, #128	; 0x80
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f003 ff88 	bl	800cc8c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2240      	movs	r2, #64	; 0x40
 8008d86:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d92:	b480      	push	{r7}
 8008d94:	b083      	sub	sp, #12
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	78fa      	ldrb	r2, [r7, #3]
 8008da2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b083      	sub	sp, #12
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2204      	movs	r2, #4
 8008dcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008dde:	b480      	push	{r7}
 8008de0:	b083      	sub	sp, #12
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b04      	cmp	r3, #4
 8008df0:	d106      	bne.n	8008e00 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b082      	sub	sp, #8
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d101      	bne.n	8008e24 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e012      	b.n	8008e4a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b03      	cmp	r3, #3
 8008e2e:	d10b      	bne.n	8008e48 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d005      	beq.n	8008e48 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008e52:	b480      	push	{r7}
 8008e54:	b087      	sub	sp, #28
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	3301      	adds	r3, #1
 8008e68:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008e70:	8a3b      	ldrh	r3, [r7, #16]
 8008e72:	021b      	lsls	r3, r3, #8
 8008e74:	b21a      	sxth	r2, r3
 8008e76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	b21b      	sxth	r3, r3
 8008e7e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008e80:	89fb      	ldrh	r3, [r7, #14]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	371c      	adds	r7, #28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
	...

08008e90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ea6:	2b40      	cmp	r3, #64	; 0x40
 8008ea8:	d005      	beq.n	8008eb6 <USBD_StdDevReq+0x26>
 8008eaa:	2b40      	cmp	r3, #64	; 0x40
 8008eac:	d853      	bhi.n	8008f56 <USBD_StdDevReq+0xc6>
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00b      	beq.n	8008eca <USBD_StdDevReq+0x3a>
 8008eb2:	2b20      	cmp	r3, #32
 8008eb4:	d14f      	bne.n	8008f56 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	4798      	blx	r3
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ec8:	e04a      	b.n	8008f60 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	785b      	ldrb	r3, [r3, #1]
 8008ece:	2b09      	cmp	r3, #9
 8008ed0:	d83b      	bhi.n	8008f4a <USBD_StdDevReq+0xba>
 8008ed2:	a201      	add	r2, pc, #4	; (adr r2, 8008ed8 <USBD_StdDevReq+0x48>)
 8008ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed8:	08008f2d 	.word	0x08008f2d
 8008edc:	08008f41 	.word	0x08008f41
 8008ee0:	08008f4b 	.word	0x08008f4b
 8008ee4:	08008f37 	.word	0x08008f37
 8008ee8:	08008f4b 	.word	0x08008f4b
 8008eec:	08008f0b 	.word	0x08008f0b
 8008ef0:	08008f01 	.word	0x08008f01
 8008ef4:	08008f4b 	.word	0x08008f4b
 8008ef8:	08008f23 	.word	0x08008f23
 8008efc:	08008f15 	.word	0x08008f15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f9de 	bl	80092c4 <USBD_GetDescriptor>
          break;
 8008f08:	e024      	b.n	8008f54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fb7f 	bl	8009610 <USBD_SetAddress>
          break;
 8008f12:	e01f      	b.n	8008f54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fbbe 	bl	8009698 <USBD_SetConfig>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73fb      	strb	r3, [r7, #15]
          break;
 8008f20:	e018      	b.n	8008f54 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fc5d 	bl	80097e4 <USBD_GetConfig>
          break;
 8008f2a:	e013      	b.n	8008f54 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fc8e 	bl	8009850 <USBD_GetStatus>
          break;
 8008f34:	e00e      	b.n	8008f54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f36:	6839      	ldr	r1, [r7, #0]
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fcbd 	bl	80098b8 <USBD_SetFeature>
          break;
 8008f3e:	e009      	b.n	8008f54 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fccc 	bl	80098e0 <USBD_ClrFeature>
          break;
 8008f48:	e004      	b.n	8008f54 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fd23 	bl	8009998 <USBD_CtlError>
          break;
 8008f52:	bf00      	nop
      }
      break;
 8008f54:	e004      	b.n	8008f60 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008f56:	6839      	ldr	r1, [r7, #0]
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fd1d 	bl	8009998 <USBD_CtlError>
      break;
 8008f5e:	bf00      	nop
  }

  return ret;
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop

08008f6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f82:	2b40      	cmp	r3, #64	; 0x40
 8008f84:	d005      	beq.n	8008f92 <USBD_StdItfReq+0x26>
 8008f86:	2b40      	cmp	r3, #64	; 0x40
 8008f88:	d82f      	bhi.n	8008fea <USBD_StdItfReq+0x7e>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <USBD_StdItfReq+0x26>
 8008f8e:	2b20      	cmp	r3, #32
 8008f90:	d12b      	bne.n	8008fea <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d81d      	bhi.n	8008fdc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	889b      	ldrh	r3, [r3, #4]
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d813      	bhi.n	8008fd2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	4798      	blx	r3
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	88db      	ldrh	r3, [r3, #6]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d110      	bne.n	8008fe6 <USBD_StdItfReq+0x7a>
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10d      	bne.n	8008fe6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fdaf 	bl	8009b2e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008fd0:	e009      	b.n	8008fe6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fcdf 	bl	8009998 <USBD_CtlError>
          break;
 8008fda:	e004      	b.n	8008fe6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008fdc:	6839      	ldr	r1, [r7, #0]
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fcda 	bl	8009998 <USBD_CtlError>
          break;
 8008fe4:	e000      	b.n	8008fe8 <USBD_StdItfReq+0x7c>
          break;
 8008fe6:	bf00      	nop
      }
      break;
 8008fe8:	e004      	b.n	8008ff4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fcd3 	bl	8009998 <USBD_CtlError>
      break;
 8008ff2:	bf00      	nop
  }

  return ret;
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b084      	sub	sp, #16
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	889b      	ldrh	r3, [r3, #4]
 8009010:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800901a:	2b40      	cmp	r3, #64	; 0x40
 800901c:	d007      	beq.n	800902e <USBD_StdEPReq+0x30>
 800901e:	2b40      	cmp	r3, #64	; 0x40
 8009020:	f200 8145 	bhi.w	80092ae <USBD_StdEPReq+0x2b0>
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00c      	beq.n	8009042 <USBD_StdEPReq+0x44>
 8009028:	2b20      	cmp	r3, #32
 800902a:	f040 8140 	bne.w	80092ae <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	4798      	blx	r3
 800903c:	4603      	mov	r3, r0
 800903e:	73fb      	strb	r3, [r7, #15]
      break;
 8009040:	e13a      	b.n	80092b8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	785b      	ldrb	r3, [r3, #1]
 8009046:	2b03      	cmp	r3, #3
 8009048:	d007      	beq.n	800905a <USBD_StdEPReq+0x5c>
 800904a:	2b03      	cmp	r3, #3
 800904c:	f300 8129 	bgt.w	80092a2 <USBD_StdEPReq+0x2a4>
 8009050:	2b00      	cmp	r3, #0
 8009052:	d07f      	beq.n	8009154 <USBD_StdEPReq+0x156>
 8009054:	2b01      	cmp	r3, #1
 8009056:	d03c      	beq.n	80090d2 <USBD_StdEPReq+0xd4>
 8009058:	e123      	b.n	80092a2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b02      	cmp	r3, #2
 8009064:	d002      	beq.n	800906c <USBD_StdEPReq+0x6e>
 8009066:	2b03      	cmp	r3, #3
 8009068:	d016      	beq.n	8009098 <USBD_StdEPReq+0x9a>
 800906a:	e02c      	b.n	80090c6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00d      	beq.n	800908e <USBD_StdEPReq+0x90>
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	2b80      	cmp	r3, #128	; 0x80
 8009076:	d00a      	beq.n	800908e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f003 fe2b 	bl	800ccd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009082:	2180      	movs	r1, #128	; 0x80
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f003 fe27 	bl	800ccd8 <USBD_LL_StallEP>
 800908a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800908c:	e020      	b.n	80090d0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fc81 	bl	8009998 <USBD_CtlError>
              break;
 8009096:	e01b      	b.n	80090d0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	885b      	ldrh	r3, [r3, #2]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10e      	bne.n	80090be <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00b      	beq.n	80090be <USBD_StdEPReq+0xc0>
 80090a6:	7bbb      	ldrb	r3, [r7, #14]
 80090a8:	2b80      	cmp	r3, #128	; 0x80
 80090aa:	d008      	beq.n	80090be <USBD_StdEPReq+0xc0>
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	88db      	ldrh	r3, [r3, #6]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d104      	bne.n	80090be <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f003 fe0d 	bl	800ccd8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fd35 	bl	8009b2e <USBD_CtlSendStatus>

              break;
 80090c4:	e004      	b.n	80090d0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fc65 	bl	8009998 <USBD_CtlError>
              break;
 80090ce:	bf00      	nop
          }
          break;
 80090d0:	e0ec      	b.n	80092ac <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d002      	beq.n	80090e4 <USBD_StdEPReq+0xe6>
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d016      	beq.n	8009110 <USBD_StdEPReq+0x112>
 80090e2:	e030      	b.n	8009146 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00d      	beq.n	8009106 <USBD_StdEPReq+0x108>
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	2b80      	cmp	r3, #128	; 0x80
 80090ee:	d00a      	beq.n	8009106 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f003 fdef 	bl	800ccd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80090fa:	2180      	movs	r1, #128	; 0x80
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f003 fdeb 	bl	800ccd8 <USBD_LL_StallEP>
 8009102:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009104:	e025      	b.n	8009152 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fc45 	bl	8009998 <USBD_CtlError>
              break;
 800910e:	e020      	b.n	8009152 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	885b      	ldrh	r3, [r3, #2]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d11b      	bne.n	8009150 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009118:	7bbb      	ldrb	r3, [r7, #14]
 800911a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800911e:	2b00      	cmp	r3, #0
 8009120:	d004      	beq.n	800912c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f003 fdf5 	bl	800cd16 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fcfe 	bl	8009b2e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	4798      	blx	r3
 8009140:	4603      	mov	r3, r0
 8009142:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009144:	e004      	b.n	8009150 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fc25 	bl	8009998 <USBD_CtlError>
              break;
 800914e:	e000      	b.n	8009152 <USBD_StdEPReq+0x154>
              break;
 8009150:	bf00      	nop
          }
          break;
 8009152:	e0ab      	b.n	80092ac <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b02      	cmp	r3, #2
 800915e:	d002      	beq.n	8009166 <USBD_StdEPReq+0x168>
 8009160:	2b03      	cmp	r3, #3
 8009162:	d032      	beq.n	80091ca <USBD_StdEPReq+0x1cc>
 8009164:	e097      	b.n	8009296 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009166:	7bbb      	ldrb	r3, [r7, #14]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d007      	beq.n	800917c <USBD_StdEPReq+0x17e>
 800916c:	7bbb      	ldrb	r3, [r7, #14]
 800916e:	2b80      	cmp	r3, #128	; 0x80
 8009170:	d004      	beq.n	800917c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fc0f 	bl	8009998 <USBD_CtlError>
                break;
 800917a:	e091      	b.n	80092a0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800917c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009180:	2b00      	cmp	r3, #0
 8009182:	da0b      	bge.n	800919c <USBD_StdEPReq+0x19e>
 8009184:	7bbb      	ldrb	r3, [r7, #14]
 8009186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800918a:	4613      	mov	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4413      	add	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	3310      	adds	r3, #16
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	4413      	add	r3, r2
 8009198:	3304      	adds	r3, #4
 800919a:	e00b      	b.n	80091b4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091a2:	4613      	mov	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	4413      	add	r3, r2
 80091b2:	3304      	adds	r3, #4
 80091b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	2202      	movs	r2, #2
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fc59 	bl	8009a7a <USBD_CtlSendData>
              break;
 80091c8:	e06a      	b.n	80092a0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80091ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	da11      	bge.n	80091f6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
 80091d4:	f003 020f 	and.w	r2, r3, #15
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	4613      	mov	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	440b      	add	r3, r1
 80091e4:	3324      	adds	r3, #36	; 0x24
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d117      	bne.n	800921c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fbd2 	bl	8009998 <USBD_CtlError>
                  break;
 80091f4:	e054      	b.n	80092a0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091f6:	7bbb      	ldrb	r3, [r7, #14]
 80091f8:	f003 020f 	and.w	r2, r3, #15
 80091fc:	6879      	ldr	r1, [r7, #4]
 80091fe:	4613      	mov	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4413      	add	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	440b      	add	r3, r1
 8009208:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800920c:	881b      	ldrh	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d104      	bne.n	800921c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fbbf 	bl	8009998 <USBD_CtlError>
                  break;
 800921a:	e041      	b.n	80092a0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800921c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009220:	2b00      	cmp	r3, #0
 8009222:	da0b      	bge.n	800923c <USBD_StdEPReq+0x23e>
 8009224:	7bbb      	ldrb	r3, [r7, #14]
 8009226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800922a:	4613      	mov	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	3310      	adds	r3, #16
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	4413      	add	r3, r2
 8009238:	3304      	adds	r3, #4
 800923a:	e00b      	b.n	8009254 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800923c:	7bbb      	ldrb	r3, [r7, #14]
 800923e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009242:	4613      	mov	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	4413      	add	r3, r2
 8009252:	3304      	adds	r3, #4
 8009254:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009256:	7bbb      	ldrb	r3, [r7, #14]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <USBD_StdEPReq+0x264>
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	2b80      	cmp	r3, #128	; 0x80
 8009260:	d103      	bne.n	800926a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2200      	movs	r2, #0
 8009266:	601a      	str	r2, [r3, #0]
 8009268:	e00e      	b.n	8009288 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800926a:	7bbb      	ldrb	r3, [r7, #14]
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f003 fd70 	bl	800cd54 <USBD_LL_IsStallEP>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d003      	beq.n	8009282 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	2201      	movs	r2, #1
 800927e:	601a      	str	r2, [r3, #0]
 8009280:	e002      	b.n	8009288 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	2200      	movs	r2, #0
 8009286:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	2202      	movs	r2, #2
 800928c:	4619      	mov	r1, r3
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fbf3 	bl	8009a7a <USBD_CtlSendData>
              break;
 8009294:	e004      	b.n	80092a0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fb7d 	bl	8009998 <USBD_CtlError>
              break;
 800929e:	bf00      	nop
          }
          break;
 80092a0:	e004      	b.n	80092ac <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80092a2:	6839      	ldr	r1, [r7, #0]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fb77 	bl	8009998 <USBD_CtlError>
          break;
 80092aa:	bf00      	nop
      }
      break;
 80092ac:	e004      	b.n	80092b8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fb71 	bl	8009998 <USBD_CtlError>
      break;
 80092b6:	bf00      	nop
  }

  return ret;
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092ce:	2300      	movs	r3, #0
 80092d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80092d6:	2300      	movs	r3, #0
 80092d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	885b      	ldrh	r3, [r3, #2]
 80092de:	0a1b      	lsrs	r3, r3, #8
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	3b01      	subs	r3, #1
 80092e4:	2b0e      	cmp	r3, #14
 80092e6:	f200 8165 	bhi.w	80095b4 <USBD_GetDescriptor+0x2f0>
 80092ea:	a201      	add	r2, pc, #4	; (adr r2, 80092f0 <USBD_GetDescriptor+0x2c>)
 80092ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f0:	08009361 	.word	0x08009361
 80092f4:	08009379 	.word	0x08009379
 80092f8:	080093b9 	.word	0x080093b9
 80092fc:	080095b5 	.word	0x080095b5
 8009300:	080095b5 	.word	0x080095b5
 8009304:	08009555 	.word	0x08009555
 8009308:	08009581 	.word	0x08009581
 800930c:	080095b5 	.word	0x080095b5
 8009310:	080095b5 	.word	0x080095b5
 8009314:	080095b5 	.word	0x080095b5
 8009318:	080095b5 	.word	0x080095b5
 800931c:	080095b5 	.word	0x080095b5
 8009320:	080095b5 	.word	0x080095b5
 8009324:	080095b5 	.word	0x080095b5
 8009328:	0800932d 	.word	0x0800932d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00b      	beq.n	8009350 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800933e:	69db      	ldr	r3, [r3, #28]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	7c12      	ldrb	r2, [r2, #16]
 8009344:	f107 0108 	add.w	r1, r7, #8
 8009348:	4610      	mov	r0, r2
 800934a:	4798      	blx	r3
 800934c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800934e:	e139      	b.n	80095c4 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fb20 	bl	8009998 <USBD_CtlError>
        err++;
 8009358:	7afb      	ldrb	r3, [r7, #11]
 800935a:	3301      	adds	r3, #1
 800935c:	72fb      	strb	r3, [r7, #11]
      break;
 800935e:	e131      	b.n	80095c4 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	7c12      	ldrb	r2, [r2, #16]
 800936c:	f107 0108 	add.w	r1, r7, #8
 8009370:	4610      	mov	r0, r2
 8009372:	4798      	blx	r3
 8009374:	60f8      	str	r0, [r7, #12]
      break;
 8009376:	e125      	b.n	80095c4 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	7c1b      	ldrb	r3, [r3, #16]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10d      	bne.n	800939c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009388:	f107 0208 	add.w	r2, r7, #8
 800938c:	4610      	mov	r0, r2
 800938e:	4798      	blx	r3
 8009390:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3301      	adds	r3, #1
 8009396:	2202      	movs	r2, #2
 8009398:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800939a:	e113      	b.n	80095c4 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a4:	f107 0208 	add.w	r2, r7, #8
 80093a8:	4610      	mov	r0, r2
 80093aa:	4798      	blx	r3
 80093ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	3301      	adds	r3, #1
 80093b2:	2202      	movs	r2, #2
 80093b4:	701a      	strb	r2, [r3, #0]
      break;
 80093b6:	e105      	b.n	80095c4 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	885b      	ldrh	r3, [r3, #2]
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b05      	cmp	r3, #5
 80093c0:	f200 80ac 	bhi.w	800951c <USBD_GetDescriptor+0x258>
 80093c4:	a201      	add	r2, pc, #4	; (adr r2, 80093cc <USBD_GetDescriptor+0x108>)
 80093c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ca:	bf00      	nop
 80093cc:	080093e5 	.word	0x080093e5
 80093d0:	08009419 	.word	0x08009419
 80093d4:	0800944d 	.word	0x0800944d
 80093d8:	08009481 	.word	0x08009481
 80093dc:	080094b5 	.word	0x080094b5
 80093e0:	080094e9 	.word	0x080094e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00b      	beq.n	8009408 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	7c12      	ldrb	r2, [r2, #16]
 80093fc:	f107 0108 	add.w	r1, r7, #8
 8009400:	4610      	mov	r0, r2
 8009402:	4798      	blx	r3
 8009404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009406:	e0a4      	b.n	8009552 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fac4 	bl	8009998 <USBD_CtlError>
            err++;
 8009410:	7afb      	ldrb	r3, [r7, #11]
 8009412:	3301      	adds	r3, #1
 8009414:	72fb      	strb	r3, [r7, #11]
          break;
 8009416:	e09c      	b.n	8009552 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00b      	beq.n	800943c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	7c12      	ldrb	r2, [r2, #16]
 8009430:	f107 0108 	add.w	r1, r7, #8
 8009434:	4610      	mov	r0, r2
 8009436:	4798      	blx	r3
 8009438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800943a:	e08a      	b.n	8009552 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 faaa 	bl	8009998 <USBD_CtlError>
            err++;
 8009444:	7afb      	ldrb	r3, [r7, #11]
 8009446:	3301      	adds	r3, #1
 8009448:	72fb      	strb	r3, [r7, #11]
          break;
 800944a:	e082      	b.n	8009552 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00b      	beq.n	8009470 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	7c12      	ldrb	r2, [r2, #16]
 8009464:	f107 0108 	add.w	r1, r7, #8
 8009468:	4610      	mov	r0, r2
 800946a:	4798      	blx	r3
 800946c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800946e:	e070      	b.n	8009552 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fa90 	bl	8009998 <USBD_CtlError>
            err++;
 8009478:	7afb      	ldrb	r3, [r7, #11]
 800947a:	3301      	adds	r3, #1
 800947c:	72fb      	strb	r3, [r7, #11]
          break;
 800947e:	e068      	b.n	8009552 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00b      	beq.n	80094a4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	7c12      	ldrb	r2, [r2, #16]
 8009498:	f107 0108 	add.w	r1, r7, #8
 800949c:	4610      	mov	r0, r2
 800949e:	4798      	blx	r3
 80094a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094a2:	e056      	b.n	8009552 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fa76 	bl	8009998 <USBD_CtlError>
            err++;
 80094ac:	7afb      	ldrb	r3, [r7, #11]
 80094ae:	3301      	adds	r3, #1
 80094b0:	72fb      	strb	r3, [r7, #11]
          break;
 80094b2:	e04e      	b.n	8009552 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00b      	beq.n	80094d8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094c6:	695b      	ldr	r3, [r3, #20]
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	7c12      	ldrb	r2, [r2, #16]
 80094cc:	f107 0108 	add.w	r1, r7, #8
 80094d0:	4610      	mov	r0, r2
 80094d2:	4798      	blx	r3
 80094d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094d6:	e03c      	b.n	8009552 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80094d8:	6839      	ldr	r1, [r7, #0]
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fa5c 	bl	8009998 <USBD_CtlError>
            err++;
 80094e0:	7afb      	ldrb	r3, [r7, #11]
 80094e2:	3301      	adds	r3, #1
 80094e4:	72fb      	strb	r3, [r7, #11]
          break;
 80094e6:	e034      	b.n	8009552 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00b      	beq.n	800950c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	7c12      	ldrb	r2, [r2, #16]
 8009500:	f107 0108 	add.w	r1, r7, #8
 8009504:	4610      	mov	r0, r2
 8009506:	4798      	blx	r3
 8009508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800950a:	e022      	b.n	8009552 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fa42 	bl	8009998 <USBD_CtlError>
            err++;
 8009514:	7afb      	ldrb	r3, [r7, #11]
 8009516:	3301      	adds	r3, #1
 8009518:	72fb      	strb	r3, [r7, #11]
          break;
 800951a:	e01a      	b.n	8009552 <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00c      	beq.n	8009542 <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800952e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009530:	683a      	ldr	r2, [r7, #0]
 8009532:	8852      	ldrh	r2, [r2, #2]
 8009534:	b2d1      	uxtb	r1, r2
 8009536:	f107 0208 	add.w	r2, r7, #8
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	4798      	blx	r3
 800953e:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8009540:	e006      	b.n	8009550 <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fa27 	bl	8009998 <USBD_CtlError>
            err++;
 800954a:	7afb      	ldrb	r3, [r7, #11]
 800954c:	3301      	adds	r3, #1
 800954e:	72fb      	strb	r3, [r7, #11]
          break;
 8009550:	bf00      	nop
      }
      break;
 8009552:	e037      	b.n	80095c4 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	7c1b      	ldrb	r3, [r3, #16]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d109      	bne.n	8009570 <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009564:	f107 0208 	add.w	r2, r7, #8
 8009568:	4610      	mov	r0, r2
 800956a:	4798      	blx	r3
 800956c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800956e:	e029      	b.n	80095c4 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fa10 	bl	8009998 <USBD_CtlError>
        err++;
 8009578:	7afb      	ldrb	r3, [r7, #11]
 800957a:	3301      	adds	r3, #1
 800957c:	72fb      	strb	r3, [r7, #11]
      break;
 800957e:	e021      	b.n	80095c4 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	7c1b      	ldrb	r3, [r3, #16]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10d      	bne.n	80095a4 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800958e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009590:	f107 0208 	add.w	r2, r7, #8
 8009594:	4610      	mov	r0, r2
 8009596:	4798      	blx	r3
 8009598:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3301      	adds	r3, #1
 800959e:	2207      	movs	r2, #7
 80095a0:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095a2:	e00f      	b.n	80095c4 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f9f6 	bl	8009998 <USBD_CtlError>
        err++;
 80095ac:	7afb      	ldrb	r3, [r7, #11]
 80095ae:	3301      	adds	r3, #1
 80095b0:	72fb      	strb	r3, [r7, #11]
      break;
 80095b2:	e007      	b.n	80095c4 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f9ee 	bl	8009998 <USBD_CtlError>
      err++;
 80095bc:	7afb      	ldrb	r3, [r7, #11]
 80095be:	3301      	adds	r3, #1
 80095c0:	72fb      	strb	r3, [r7, #11]
      break;
 80095c2:	bf00      	nop
  }

  if (err != 0U)
 80095c4:	7afb      	ldrb	r3, [r7, #11]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d11e      	bne.n	8009608 <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	88db      	ldrh	r3, [r3, #6]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d016      	beq.n	8009600 <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 80095d2:	893b      	ldrh	r3, [r7, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00e      	beq.n	80095f6 <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	88da      	ldrh	r2, [r3, #6]
 80095dc:	893b      	ldrh	r3, [r7, #8]
 80095de:	4293      	cmp	r3, r2
 80095e0:	bf28      	it	cs
 80095e2:	4613      	movcs	r3, r2
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80095e8:	893b      	ldrh	r3, [r7, #8]
 80095ea:	461a      	mov	r2, r3
 80095ec:	68f9      	ldr	r1, [r7, #12]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fa43 	bl	8009a7a <USBD_CtlSendData>
 80095f4:	e009      	b.n	800960a <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f9cd 	bl	8009998 <USBD_CtlError>
 80095fe:	e004      	b.n	800960a <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fa94 	bl	8009b2e <USBD_CtlSendStatus>
 8009606:	e000      	b.n	800960a <USBD_GetDescriptor+0x346>
    return;
 8009608:	bf00      	nop
  }
}
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	889b      	ldrh	r3, [r3, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d131      	bne.n	8009686 <USBD_SetAddress+0x76>
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	88db      	ldrh	r3, [r3, #6]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d12d      	bne.n	8009686 <USBD_SetAddress+0x76>
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	885b      	ldrh	r3, [r3, #2]
 800962e:	2b7f      	cmp	r3, #127	; 0x7f
 8009630:	d829      	bhi.n	8009686 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	885b      	ldrh	r3, [r3, #2]
 8009636:	b2db      	uxtb	r3, r3
 8009638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800963c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b03      	cmp	r3, #3
 8009648:	d104      	bne.n	8009654 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f9a3 	bl	8009998 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009652:	e01d      	b.n	8009690 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	7bfa      	ldrb	r2, [r7, #15]
 8009658:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800965c:	7bfb      	ldrb	r3, [r7, #15]
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f003 fba4 	bl	800cdae <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fa61 	bl	8009b2e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800966c:	7bfb      	ldrb	r3, [r7, #15]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d004      	beq.n	800967c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2202      	movs	r2, #2
 8009676:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800967a:	e009      	b.n	8009690 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009684:	e004      	b.n	8009690 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f985 	bl	8009998 <USBD_CtlError>
  }
}
 800968e:	bf00      	nop
 8009690:	bf00      	nop
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	885b      	ldrh	r3, [r3, #2]
 80096aa:	b2da      	uxtb	r2, r3
 80096ac:	4b4c      	ldr	r3, [pc, #304]	; (80097e0 <USBD_SetConfig+0x148>)
 80096ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80096b0:	4b4b      	ldr	r3, [pc, #300]	; (80097e0 <USBD_SetConfig+0x148>)
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d905      	bls.n	80096c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f96c 	bl	8009998 <USBD_CtlError>
    return USBD_FAIL;
 80096c0:	2303      	movs	r3, #3
 80096c2:	e088      	b.n	80097d6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d002      	beq.n	80096d6 <USBD_SetConfig+0x3e>
 80096d0:	2b03      	cmp	r3, #3
 80096d2:	d025      	beq.n	8009720 <USBD_SetConfig+0x88>
 80096d4:	e071      	b.n	80097ba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80096d6:	4b42      	ldr	r3, [pc, #264]	; (80097e0 <USBD_SetConfig+0x148>)
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d01c      	beq.n	8009718 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80096de:	4b40      	ldr	r3, [pc, #256]	; (80097e0 <USBD_SetConfig+0x148>)
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	461a      	mov	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096e8:	4b3d      	ldr	r3, [pc, #244]	; (80097e0 <USBD_SetConfig+0x148>)
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7ff f97f 	bl	80089f2 <USBD_SetClassConfig>
 80096f4:	4603      	mov	r3, r0
 80096f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d004      	beq.n	8009708 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f949 	bl	8009998 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009706:	e065      	b.n	80097d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fa10 	bl	8009b2e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2203      	movs	r2, #3
 8009712:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009716:	e05d      	b.n	80097d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fa08 	bl	8009b2e <USBD_CtlSendStatus>
      break;
 800971e:	e059      	b.n	80097d4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009720:	4b2f      	ldr	r3, [pc, #188]	; (80097e0 <USBD_SetConfig+0x148>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d112      	bne.n	800974e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2202      	movs	r2, #2
 800972c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009730:	4b2b      	ldr	r3, [pc, #172]	; (80097e0 <USBD_SetConfig+0x148>)
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	461a      	mov	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800973a:	4b29      	ldr	r3, [pc, #164]	; (80097e0 <USBD_SetConfig+0x148>)
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	4619      	mov	r1, r3
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f7ff f972 	bl	8008a2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f9f1 	bl	8009b2e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800974c:	e042      	b.n	80097d4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800974e:	4b24      	ldr	r3, [pc, #144]	; (80097e0 <USBD_SetConfig+0x148>)
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	461a      	mov	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	429a      	cmp	r2, r3
 800975a:	d02a      	beq.n	80097b2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	b2db      	uxtb	r3, r3
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7ff f960 	bl	8008a2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800976a:	4b1d      	ldr	r3, [pc, #116]	; (80097e0 <USBD_SetConfig+0x148>)
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	461a      	mov	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009774:	4b1a      	ldr	r3, [pc, #104]	; (80097e0 <USBD_SetConfig+0x148>)
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	4619      	mov	r1, r3
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff f939 	bl	80089f2 <USBD_SetClassConfig>
 8009780:	4603      	mov	r3, r0
 8009782:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009784:	7bfb      	ldrb	r3, [r7, #15]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00f      	beq.n	80097aa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f903 	bl	8009998 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	b2db      	uxtb	r3, r3
 8009798:	4619      	mov	r1, r3
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f7ff f945 	bl	8008a2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2202      	movs	r2, #2
 80097a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80097a8:	e014      	b.n	80097d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f9bf 	bl	8009b2e <USBD_CtlSendStatus>
      break;
 80097b0:	e010      	b.n	80097d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f9bb 	bl	8009b2e <USBD_CtlSendStatus>
      break;
 80097b8:	e00c      	b.n	80097d4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f8eb 	bl	8009998 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80097c2:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <USBD_SetConfig+0x148>)
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	4619      	mov	r1, r3
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f7ff f92e 	bl	8008a2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80097ce:	2303      	movs	r3, #3
 80097d0:	73fb      	strb	r3, [r7, #15]
      break;
 80097d2:	bf00      	nop
  }

  return ret;
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	200004c7 	.word	0x200004c7

080097e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	88db      	ldrh	r3, [r3, #6]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d004      	beq.n	8009800 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f8cd 	bl	8009998 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80097fe:	e023      	b.n	8009848 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009806:	b2db      	uxtb	r3, r3
 8009808:	2b02      	cmp	r3, #2
 800980a:	dc02      	bgt.n	8009812 <USBD_GetConfig+0x2e>
 800980c:	2b00      	cmp	r3, #0
 800980e:	dc03      	bgt.n	8009818 <USBD_GetConfig+0x34>
 8009810:	e015      	b.n	800983e <USBD_GetConfig+0x5a>
 8009812:	2b03      	cmp	r3, #3
 8009814:	d00b      	beq.n	800982e <USBD_GetConfig+0x4a>
 8009816:	e012      	b.n	800983e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	3308      	adds	r3, #8
 8009822:	2201      	movs	r2, #1
 8009824:	4619      	mov	r1, r3
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f927 	bl	8009a7a <USBD_CtlSendData>
        break;
 800982c:	e00c      	b.n	8009848 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	3304      	adds	r3, #4
 8009832:	2201      	movs	r2, #1
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f91f 	bl	8009a7a <USBD_CtlSendData>
        break;
 800983c:	e004      	b.n	8009848 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 f8a9 	bl	8009998 <USBD_CtlError>
        break;
 8009846:	bf00      	nop
}
 8009848:	bf00      	nop
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009860:	b2db      	uxtb	r3, r3
 8009862:	3b01      	subs	r3, #1
 8009864:	2b02      	cmp	r3, #2
 8009866:	d81e      	bhi.n	80098a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	88db      	ldrh	r3, [r3, #6]
 800986c:	2b02      	cmp	r3, #2
 800986e:	d004      	beq.n	800987a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f890 	bl	8009998 <USBD_CtlError>
        break;
 8009878:	e01a      	b.n	80098b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2201      	movs	r2, #1
 800987e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009886:	2b00      	cmp	r3, #0
 8009888:	d005      	beq.n	8009896 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	f043 0202 	orr.w	r2, r3, #2
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	330c      	adds	r3, #12
 800989a:	2202      	movs	r2, #2
 800989c:	4619      	mov	r1, r3
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f8eb 	bl	8009a7a <USBD_CtlSendData>
      break;
 80098a4:	e004      	b.n	80098b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f875 	bl	8009998 <USBD_CtlError>
      break;
 80098ae:	bf00      	nop
  }
}
 80098b0:	bf00      	nop
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	885b      	ldrh	r3, [r3, #2]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d106      	bne.n	80098d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2201      	movs	r2, #1
 80098ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f92b 	bl	8009b2e <USBD_CtlSendStatus>
  }
}
 80098d8:	bf00      	nop
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	3b01      	subs	r3, #1
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d80b      	bhi.n	8009910 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	885b      	ldrh	r3, [r3, #2]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d10c      	bne.n	800991a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f910 	bl	8009b2e <USBD_CtlSendStatus>
      }
      break;
 800990e:	e004      	b.n	800991a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f840 	bl	8009998 <USBD_CtlError>
      break;
 8009918:	e000      	b.n	800991c <USBD_ClrFeature+0x3c>
      break;
 800991a:	bf00      	nop
  }
}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	781a      	ldrb	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	3301      	adds	r3, #1
 800993e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	781a      	ldrb	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	3301      	adds	r3, #1
 800994c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f7ff fa7f 	bl	8008e52 <SWAPBYTE>
 8009954:	4603      	mov	r3, r0
 8009956:	461a      	mov	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	3301      	adds	r3, #1
 8009960:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	3301      	adds	r3, #1
 8009966:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f7ff fa72 	bl	8008e52 <SWAPBYTE>
 800996e:	4603      	mov	r3, r0
 8009970:	461a      	mov	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	3301      	adds	r3, #1
 800997a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	3301      	adds	r3, #1
 8009980:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f7ff fa65 	bl	8008e52 <SWAPBYTE>
 8009988:	4603      	mov	r3, r0
 800998a:	461a      	mov	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	80da      	strh	r2, [r3, #6]
}
 8009990:	bf00      	nop
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80099a2:	2180      	movs	r1, #128	; 0x80
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f003 f997 	bl	800ccd8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80099aa:	2100      	movs	r1, #0
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f003 f993 	bl	800ccd8 <USBD_LL_StallEP>
}
 80099b2:	bf00      	nop
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b086      	sub	sp, #24
 80099be:	af00      	add	r7, sp, #0
 80099c0:	60f8      	str	r0, [r7, #12]
 80099c2:	60b9      	str	r1, [r7, #8]
 80099c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80099c6:	2300      	movs	r3, #0
 80099c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d036      	beq.n	8009a3e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80099d4:	6938      	ldr	r0, [r7, #16]
 80099d6:	f000 f836 	bl	8009a46 <USBD_GetLen>
 80099da:	4603      	mov	r3, r0
 80099dc:	3301      	adds	r3, #1
 80099de:	b29b      	uxth	r3, r3
 80099e0:	005b      	lsls	r3, r3, #1
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	4413      	add	r3, r2
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	7812      	ldrb	r2, [r2, #0]
 80099f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80099f4:	7dfb      	ldrb	r3, [r7, #23]
 80099f6:	3301      	adds	r3, #1
 80099f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	4413      	add	r3, r2
 8009a00:	2203      	movs	r2, #3
 8009a02:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a04:	7dfb      	ldrb	r3, [r7, #23]
 8009a06:	3301      	adds	r3, #1
 8009a08:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009a0a:	e013      	b.n	8009a34 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009a0c:	7dfb      	ldrb	r3, [r7, #23]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	4413      	add	r3, r2
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	7812      	ldrb	r2, [r2, #0]
 8009a16:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	613b      	str	r3, [r7, #16]
    idx++;
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
 8009a20:	3301      	adds	r3, #1
 8009a22:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009a24:	7dfb      	ldrb	r3, [r7, #23]
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	4413      	add	r3, r2
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	701a      	strb	r2, [r3, #0]
    idx++;
 8009a2e:	7dfb      	ldrb	r3, [r7, #23]
 8009a30:	3301      	adds	r3, #1
 8009a32:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d1e7      	bne.n	8009a0c <USBD_GetString+0x52>
 8009a3c:	e000      	b.n	8009a40 <USBD_GetString+0x86>
    return;
 8009a3e:	bf00      	nop
  }
}
 8009a40:	3718      	adds	r7, #24
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b085      	sub	sp, #20
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009a56:	e005      	b.n	8009a64 <USBD_GetLen+0x1e>
  {
    len++;
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	3301      	adds	r3, #1
 8009a62:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1f5      	bne.n	8009a58 <USBD_GetLen+0x12>
  }

  return len;
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3714      	adds	r7, #20
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b084      	sub	sp, #16
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	60f8      	str	r0, [r7, #12]
 8009a82:	60b9      	str	r1, [r7, #8]
 8009a84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2202      	movs	r2, #2
 8009a8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68ba      	ldr	r2, [r7, #8]
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f003 f9a3 	bl	800cdec <USBD_LL_Transmit>

  return USBD_OK;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f003 f992 	bl	800cdec <USBD_LL_Transmit>

  return USBD_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b084      	sub	sp, #16
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	60f8      	str	r0, [r7, #12]
 8009ada:	60b9      	str	r1, [r7, #8]
 8009adc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2203      	movs	r2, #3
 8009ae2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	2100      	movs	r1, #0
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f003 f996 	bl	800ce2e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f003 f985 	bl	800ce2e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b082      	sub	sp, #8
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2204      	movs	r2, #4
 8009b3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b3e:	2300      	movs	r3, #0
 8009b40:	2200      	movs	r2, #0
 8009b42:	2100      	movs	r1, #0
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f003 f951 	bl	800cdec <USBD_LL_Transmit>

  return USBD_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2205      	movs	r2, #5
 8009b60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b64:	2300      	movs	r3, #0
 8009b66:	2200      	movs	r2, #0
 8009b68:	2100      	movs	r1, #0
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f003 f95f 	bl	800ce2e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
	...

08009b7c <__NVIC_SetPriority>:
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	4603      	mov	r3, r0
 8009b84:	6039      	str	r1, [r7, #0]
 8009b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	db0a      	blt.n	8009ba6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	b2da      	uxtb	r2, r3
 8009b94:	490c      	ldr	r1, [pc, #48]	; (8009bc8 <__NVIC_SetPriority+0x4c>)
 8009b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b9a:	0112      	lsls	r2, r2, #4
 8009b9c:	b2d2      	uxtb	r2, r2
 8009b9e:	440b      	add	r3, r1
 8009ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009ba4:	e00a      	b.n	8009bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	4908      	ldr	r1, [pc, #32]	; (8009bcc <__NVIC_SetPriority+0x50>)
 8009bac:	79fb      	ldrb	r3, [r7, #7]
 8009bae:	f003 030f 	and.w	r3, r3, #15
 8009bb2:	3b04      	subs	r3, #4
 8009bb4:	0112      	lsls	r2, r2, #4
 8009bb6:	b2d2      	uxtb	r2, r2
 8009bb8:	440b      	add	r3, r1
 8009bba:	761a      	strb	r2, [r3, #24]
}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	e000e100 	.word	0xe000e100
 8009bcc:	e000ed00 	.word	0xe000ed00

08009bd0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009bd4:	4b05      	ldr	r3, [pc, #20]	; (8009bec <SysTick_Handler+0x1c>)
 8009bd6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009bd8:	f001 fd0c 	bl	800b5f4 <xTaskGetSchedulerState>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d001      	beq.n	8009be6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009be2:	f002 faf1 	bl	800c1c8 <xPortSysTickHandler>
  }
}
 8009be6:	bf00      	nop
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	e000e010 	.word	0xe000e010

08009bf0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	f06f 0004 	mvn.w	r0, #4
 8009bfa:	f7ff ffbf 	bl	8009b7c <__NVIC_SetPriority>
#endif
}
 8009bfe:	bf00      	nop
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c0a:	f3ef 8305 	mrs	r3, IPSR
 8009c0e:	603b      	str	r3, [r7, #0]
  return(result);
 8009c10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d003      	beq.n	8009c1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009c16:	f06f 0305 	mvn.w	r3, #5
 8009c1a:	607b      	str	r3, [r7, #4]
 8009c1c:	e00c      	b.n	8009c38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009c1e:	4b0a      	ldr	r3, [pc, #40]	; (8009c48 <osKernelInitialize+0x44>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d105      	bne.n	8009c32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009c26:	4b08      	ldr	r3, [pc, #32]	; (8009c48 <osKernelInitialize+0x44>)
 8009c28:	2201      	movs	r2, #1
 8009c2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	607b      	str	r3, [r7, #4]
 8009c30:	e002      	b.n	8009c38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c38:	687b      	ldr	r3, [r7, #4]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	200004c8 	.word	0x200004c8

08009c4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c52:	f3ef 8305 	mrs	r3, IPSR
 8009c56:	603b      	str	r3, [r7, #0]
  return(result);
 8009c58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009c5e:	f06f 0305 	mvn.w	r3, #5
 8009c62:	607b      	str	r3, [r7, #4]
 8009c64:	e010      	b.n	8009c88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009c66:	4b0b      	ldr	r3, [pc, #44]	; (8009c94 <osKernelStart+0x48>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d109      	bne.n	8009c82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009c6e:	f7ff ffbf 	bl	8009bf0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009c72:	4b08      	ldr	r3, [pc, #32]	; (8009c94 <osKernelStart+0x48>)
 8009c74:	2202      	movs	r2, #2
 8009c76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009c78:	f001 f860 	bl	800ad3c <vTaskStartScheduler>
      stat = osOK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	607b      	str	r3, [r7, #4]
 8009c80:	e002      	b.n	8009c88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c88:	687b      	ldr	r3, [r7, #4]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	200004c8 	.word	0x200004c8

08009c98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b08e      	sub	sp, #56	; 0x38
 8009c9c:	af04      	add	r7, sp, #16
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ca8:	f3ef 8305 	mrs	r3, IPSR
 8009cac:	617b      	str	r3, [r7, #20]
  return(result);
 8009cae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d17e      	bne.n	8009db2 <osThreadNew+0x11a>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d07b      	beq.n	8009db2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009cba:	2380      	movs	r3, #128	; 0x80
 8009cbc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009cbe:	2318      	movs	r3, #24
 8009cc0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d045      	beq.n	8009d5e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d002      	beq.n	8009ce0 <osThreadNew+0x48>
        name = attr->name;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	699b      	ldr	r3, [r3, #24]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	699b      	ldr	r3, [r3, #24]
 8009cec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d008      	beq.n	8009d06 <osThreadNew+0x6e>
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	2b38      	cmp	r3, #56	; 0x38
 8009cf8:	d805      	bhi.n	8009d06 <osThreadNew+0x6e>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f003 0301 	and.w	r3, r3, #1
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <osThreadNew+0x72>
        return (NULL);
 8009d06:	2300      	movs	r3, #0
 8009d08:	e054      	b.n	8009db4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	695b      	ldr	r3, [r3, #20]
 8009d16:	089b      	lsrs	r3, r3, #2
 8009d18:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00e      	beq.n	8009d40 <osThreadNew+0xa8>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	2bbb      	cmp	r3, #187	; 0xbb
 8009d28:	d90a      	bls.n	8009d40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d006      	beq.n	8009d40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d002      	beq.n	8009d40 <osThreadNew+0xa8>
        mem = 1;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	61bb      	str	r3, [r7, #24]
 8009d3e:	e010      	b.n	8009d62 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10c      	bne.n	8009d62 <osThreadNew+0xca>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d108      	bne.n	8009d62 <osThreadNew+0xca>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d104      	bne.n	8009d62 <osThreadNew+0xca>
          mem = 0;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	61bb      	str	r3, [r7, #24]
 8009d5c:	e001      	b.n	8009d62 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d110      	bne.n	8009d8a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d70:	9202      	str	r2, [sp, #8]
 8009d72:	9301      	str	r3, [sp, #4]
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	6a3a      	ldr	r2, [r7, #32]
 8009d7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 fdf0 	bl	800a964 <xTaskCreateStatic>
 8009d84:	4603      	mov	r3, r0
 8009d86:	613b      	str	r3, [r7, #16]
 8009d88:	e013      	b.n	8009db2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d110      	bne.n	8009db2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	f107 0310 	add.w	r3, r7, #16
 8009d98:	9301      	str	r3, [sp, #4]
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	9300      	str	r3, [sp, #0]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 fe3b 	bl	800aa1e <xTaskCreate>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d001      	beq.n	8009db2 <osThreadNew+0x11a>
            hTask = NULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009db2:	693b      	ldr	r3, [r7, #16]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3728      	adds	r7, #40	; 0x28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	4a07      	ldr	r2, [pc, #28]	; (8009de8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009dcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	4a06      	ldr	r2, [pc, #24]	; (8009dec <vApplicationGetIdleTaskMemory+0x30>)
 8009dd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2280      	movs	r2, #128	; 0x80
 8009dd8:	601a      	str	r2, [r3, #0]
}
 8009dda:	bf00      	nop
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	200004cc 	.word	0x200004cc
 8009dec:	20000588 	.word	0x20000588

08009df0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	4a07      	ldr	r2, [pc, #28]	; (8009e1c <vApplicationGetTimerTaskMemory+0x2c>)
 8009e00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	4a06      	ldr	r2, [pc, #24]	; (8009e20 <vApplicationGetTimerTaskMemory+0x30>)
 8009e06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e0e:	601a      	str	r2, [r3, #0]
}
 8009e10:	bf00      	nop
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	20000788 	.word	0x20000788
 8009e20:	20000844 	.word	0x20000844

08009e24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f103 0208 	add.w	r2, r3, #8
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f103 0208 	add.w	r2, r3, #8
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f103 0208 	add.w	r2, r3, #8
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e72:	bf00      	nop
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b085      	sub	sp, #20
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	689a      	ldr	r2, [r3, #8]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	683a      	ldr	r2, [r7, #0]
 8009ea2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	1c5a      	adds	r2, r3, #1
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	601a      	str	r2, [r3, #0]
}
 8009eba:	bf00      	nop
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b085      	sub	sp, #20
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009edc:	d103      	bne.n	8009ee6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	60fb      	str	r3, [r7, #12]
 8009ee4:	e00c      	b.n	8009f00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	3308      	adds	r3, #8
 8009eea:	60fb      	str	r3, [r7, #12]
 8009eec:	e002      	b.n	8009ef4 <vListInsert+0x2e>
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	60fb      	str	r3, [r7, #12]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d2f6      	bcs.n	8009eee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	685a      	ldr	r2, [r3, #4]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	683a      	ldr	r2, [r7, #0]
 8009f0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	683a      	ldr	r2, [r7, #0]
 8009f1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	1c5a      	adds	r2, r3, #1
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	601a      	str	r2, [r3, #0]
}
 8009f2c:	bf00      	nop
 8009f2e:	3714      	adds	r7, #20
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	6892      	ldr	r2, [r2, #8]
 8009f4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	6852      	ldr	r2, [r2, #4]
 8009f58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d103      	bne.n	8009f6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689a      	ldr	r2, [r3, #8]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	1e5a      	subs	r2, r3, #1
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10a      	bne.n	8009fb6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009fb2:	bf00      	nop
 8009fb4:	e7fe      	b.n	8009fb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009fb6:	f002 f875 	bl	800c0a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc2:	68f9      	ldr	r1, [r7, #12]
 8009fc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fc6:	fb01 f303 	mul.w	r3, r1, r3
 8009fca:	441a      	add	r2, r3
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	68f9      	ldr	r1, [r7, #12]
 8009fea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fec:	fb01 f303 	mul.w	r3, r1, r3
 8009ff0:	441a      	add	r2, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	22ff      	movs	r2, #255	; 0xff
 8009ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	22ff      	movs	r2, #255	; 0xff
 800a002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d114      	bne.n	800a036 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d01a      	beq.n	800a04a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	3310      	adds	r3, #16
 800a018:	4618      	mov	r0, r3
 800a01a:	f001 f929 	bl	800b270 <xTaskRemoveFromEventList>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d012      	beq.n	800a04a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a024:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <xQueueGenericReset+0xcc>)
 800a026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a02a:	601a      	str	r2, [r3, #0]
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	e009      	b.n	800a04a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3310      	adds	r3, #16
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7ff fef2 	bl	8009e24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	3324      	adds	r3, #36	; 0x24
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff feed 	bl	8009e24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a04a:	f002 f85b 	bl	800c104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a04e:	2301      	movs	r3, #1
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	e000ed04 	.word	0xe000ed04

0800a05c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b08e      	sub	sp, #56	; 0x38
 800a060:	af02      	add	r7, sp, #8
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
 800a068:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10a      	bne.n	800a086 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a082:	bf00      	nop
 800a084:	e7fe      	b.n	800a084 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10a      	bne.n	800a0a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a09e:	bf00      	nop
 800a0a0:	e7fe      	b.n	800a0a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <xQueueGenericCreateStatic+0x52>
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <xQueueGenericCreateStatic+0x56>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e000      	b.n	800a0b4 <xQueueGenericCreateStatic+0x58>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10a      	bne.n	800a0ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	623b      	str	r3, [r7, #32]
}
 800a0ca:	bf00      	nop
 800a0cc:	e7fe      	b.n	800a0cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d102      	bne.n	800a0da <xQueueGenericCreateStatic+0x7e>
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d101      	bne.n	800a0de <xQueueGenericCreateStatic+0x82>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e000      	b.n	800a0e0 <xQueueGenericCreateStatic+0x84>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10a      	bne.n	800a0fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	61fb      	str	r3, [r7, #28]
}
 800a0f6:	bf00      	nop
 800a0f8:	e7fe      	b.n	800a0f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0fa:	2350      	movs	r3, #80	; 0x50
 800a0fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	2b50      	cmp	r3, #80	; 0x50
 800a102:	d00a      	beq.n	800a11a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	61bb      	str	r3, [r7, #24]
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a11a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00d      	beq.n	800a142 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a12e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	4613      	mov	r3, r2
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	68b9      	ldr	r1, [r7, #8]
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f000 f805 	bl	800a14c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a144:	4618      	mov	r0, r3
 800a146:	3730      	adds	r7, #48	; 0x30
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	607a      	str	r2, [r7, #4]
 800a158:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d103      	bne.n	800a168 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	69ba      	ldr	r2, [r7, #24]
 800a164:	601a      	str	r2, [r3, #0]
 800a166:	e002      	b.n	800a16e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a17a:	2101      	movs	r1, #1
 800a17c:	69b8      	ldr	r0, [r7, #24]
 800a17e:	f7ff ff05 	bl	8009f8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	78fa      	ldrb	r2, [r7, #3]
 800a186:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a18a:	bf00      	nop
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
	...

0800a194 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b08e      	sub	sp, #56	; 0x38
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10a      	bne.n	800a1c6 <xQueueGenericSend+0x32>
	__asm volatile
 800a1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1c2:	bf00      	nop
 800a1c4:	e7fe      	b.n	800a1c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d103      	bne.n	800a1d4 <xQueueGenericSend+0x40>
 800a1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d101      	bne.n	800a1d8 <xQueueGenericSend+0x44>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e000      	b.n	800a1da <xQueueGenericSend+0x46>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10a      	bne.n	800a1f4 <xQueueGenericSend+0x60>
	__asm volatile
 800a1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e2:	f383 8811 	msr	BASEPRI, r3
 800a1e6:	f3bf 8f6f 	isb	sy
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1f0:	bf00      	nop
 800a1f2:	e7fe      	b.n	800a1f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d103      	bne.n	800a202 <xQueueGenericSend+0x6e>
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d101      	bne.n	800a206 <xQueueGenericSend+0x72>
 800a202:	2301      	movs	r3, #1
 800a204:	e000      	b.n	800a208 <xQueueGenericSend+0x74>
 800a206:	2300      	movs	r3, #0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10a      	bne.n	800a222 <xQueueGenericSend+0x8e>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	623b      	str	r3, [r7, #32]
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a222:	f001 f9e7 	bl	800b5f4 <xTaskGetSchedulerState>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d102      	bne.n	800a232 <xQueueGenericSend+0x9e>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <xQueueGenericSend+0xa2>
 800a232:	2301      	movs	r3, #1
 800a234:	e000      	b.n	800a238 <xQueueGenericSend+0xa4>
 800a236:	2300      	movs	r3, #0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10a      	bne.n	800a252 <xQueueGenericSend+0xbe>
	__asm volatile
 800a23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a240:	f383 8811 	msr	BASEPRI, r3
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	61fb      	str	r3, [r7, #28]
}
 800a24e:	bf00      	nop
 800a250:	e7fe      	b.n	800a250 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a252:	f001 ff27 	bl	800c0a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a25e:	429a      	cmp	r2, r3
 800a260:	d302      	bcc.n	800a268 <xQueueGenericSend+0xd4>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b02      	cmp	r3, #2
 800a266:	d129      	bne.n	800a2bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a268:	683a      	ldr	r2, [r7, #0]
 800a26a:	68b9      	ldr	r1, [r7, #8]
 800a26c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a26e:	f000 fa0b 	bl	800a688 <prvCopyDataToQueue>
 800a272:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d010      	beq.n	800a29e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27e:	3324      	adds	r3, #36	; 0x24
 800a280:	4618      	mov	r0, r3
 800a282:	f000 fff5 	bl	800b270 <xTaskRemoveFromEventList>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d013      	beq.n	800a2b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a28c:	4b3f      	ldr	r3, [pc, #252]	; (800a38c <xQueueGenericSend+0x1f8>)
 800a28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	e00a      	b.n	800a2b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d007      	beq.n	800a2b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a2a4:	4b39      	ldr	r3, [pc, #228]	; (800a38c <xQueueGenericSend+0x1f8>)
 800a2a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2aa:	601a      	str	r2, [r3, #0]
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a2b4:	f001 ff26 	bl	800c104 <vPortExitCritical>
				return pdPASS;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e063      	b.n	800a384 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d103      	bne.n	800a2ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a2c2:	f001 ff1f 	bl	800c104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	e05c      	b.n	800a384 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d106      	bne.n	800a2de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2d0:	f107 0314 	add.w	r3, r7, #20
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f001 f82f 	bl	800b338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2de:	f001 ff11 	bl	800c104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2e2:	f000 fd9b 	bl	800ae1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2e6:	f001 fedd 	bl	800c0a4 <vPortEnterCritical>
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2f0:	b25b      	sxtb	r3, r3
 800a2f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2f6:	d103      	bne.n	800a300 <xQueueGenericSend+0x16c>
 800a2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a306:	b25b      	sxtb	r3, r3
 800a308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a30c:	d103      	bne.n	800a316 <xQueueGenericSend+0x182>
 800a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a310:	2200      	movs	r2, #0
 800a312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a316:	f001 fef5 	bl	800c104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a31a:	1d3a      	adds	r2, r7, #4
 800a31c:	f107 0314 	add.w	r3, r7, #20
 800a320:	4611      	mov	r1, r2
 800a322:	4618      	mov	r0, r3
 800a324:	f001 f81e 	bl	800b364 <xTaskCheckForTimeOut>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d124      	bne.n	800a378 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a32e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a330:	f000 faa2 	bl	800a878 <prvIsQueueFull>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d018      	beq.n	800a36c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33c:	3310      	adds	r3, #16
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	4611      	mov	r1, r2
 800a342:	4618      	mov	r0, r3
 800a344:	f000 ff44 	bl	800b1d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a34a:	f000 fa2d 	bl	800a7a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a34e:	f000 fd73 	bl	800ae38 <xTaskResumeAll>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	f47f af7c 	bne.w	800a252 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a35a:	4b0c      	ldr	r3, [pc, #48]	; (800a38c <xQueueGenericSend+0x1f8>)
 800a35c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a360:	601a      	str	r2, [r3, #0]
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	e772      	b.n	800a252 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a36c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a36e:	f000 fa1b 	bl	800a7a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a372:	f000 fd61 	bl	800ae38 <xTaskResumeAll>
 800a376:	e76c      	b.n	800a252 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a37a:	f000 fa15 	bl	800a7a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a37e:	f000 fd5b 	bl	800ae38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a382:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a384:	4618      	mov	r0, r3
 800a386:	3738      	adds	r7, #56	; 0x38
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	e000ed04 	.word	0xe000ed04

0800a390 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b090      	sub	sp, #64	; 0x40
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
 800a39c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10a      	bne.n	800a3be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a3ba:	bf00      	nop
 800a3bc:	e7fe      	b.n	800a3bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d103      	bne.n	800a3cc <xQueueGenericSendFromISR+0x3c>
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d101      	bne.n	800a3d0 <xQueueGenericSendFromISR+0x40>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e000      	b.n	800a3d2 <xQueueGenericSendFromISR+0x42>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d10a      	bne.n	800a3ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3da:	f383 8811 	msr	BASEPRI, r3
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a3e8:	bf00      	nop
 800a3ea:	e7fe      	b.n	800a3ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	2b02      	cmp	r3, #2
 800a3f0:	d103      	bne.n	800a3fa <xQueueGenericSendFromISR+0x6a>
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d101      	bne.n	800a3fe <xQueueGenericSendFromISR+0x6e>
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e000      	b.n	800a400 <xQueueGenericSendFromISR+0x70>
 800a3fe:	2300      	movs	r3, #0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10a      	bne.n	800a41a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a408:	f383 8811 	msr	BASEPRI, r3
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	f3bf 8f4f 	dsb	sy
 800a414:	623b      	str	r3, [r7, #32]
}
 800a416:	bf00      	nop
 800a418:	e7fe      	b.n	800a418 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a41a:	f001 ff25 	bl	800c268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a41e:	f3ef 8211 	mrs	r2, BASEPRI
 800a422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	61fa      	str	r2, [r7, #28]
 800a434:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a436:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a438:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a442:	429a      	cmp	r2, r3
 800a444:	d302      	bcc.n	800a44c <xQueueGenericSendFromISR+0xbc>
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	2b02      	cmp	r3, #2
 800a44a:	d12f      	bne.n	800a4ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a45c:	683a      	ldr	r2, [r7, #0]
 800a45e:	68b9      	ldr	r1, [r7, #8]
 800a460:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a462:	f000 f911 	bl	800a688 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a466:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a46a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a46e:	d112      	bne.n	800a496 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a474:	2b00      	cmp	r3, #0
 800a476:	d016      	beq.n	800a4a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47a:	3324      	adds	r3, #36	; 0x24
 800a47c:	4618      	mov	r0, r3
 800a47e:	f000 fef7 	bl	800b270 <xTaskRemoveFromEventList>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00e      	beq.n	800a4a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00b      	beq.n	800a4a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	e007      	b.n	800a4a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a496:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a49a:	3301      	adds	r3, #1
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	b25a      	sxtb	r2, r3
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a4aa:	e001      	b.n	800a4b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a4ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3740      	adds	r7, #64	; 0x40
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
	...

0800a4c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b08c      	sub	sp, #48	; 0x30
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d10a      	bne.n	800a4f8 <xQueueReceive+0x30>
	__asm volatile
 800a4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	623b      	str	r3, [r7, #32]
}
 800a4f4:	bf00      	nop
 800a4f6:	e7fe      	b.n	800a4f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d103      	bne.n	800a506 <xQueueReceive+0x3e>
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a502:	2b00      	cmp	r3, #0
 800a504:	d101      	bne.n	800a50a <xQueueReceive+0x42>
 800a506:	2301      	movs	r3, #1
 800a508:	e000      	b.n	800a50c <xQueueReceive+0x44>
 800a50a:	2300      	movs	r3, #0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10a      	bne.n	800a526 <xQueueReceive+0x5e>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	61fb      	str	r3, [r7, #28]
}
 800a522:	bf00      	nop
 800a524:	e7fe      	b.n	800a524 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a526:	f001 f865 	bl	800b5f4 <xTaskGetSchedulerState>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d102      	bne.n	800a536 <xQueueReceive+0x6e>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <xQueueReceive+0x72>
 800a536:	2301      	movs	r3, #1
 800a538:	e000      	b.n	800a53c <xQueueReceive+0x74>
 800a53a:	2300      	movs	r3, #0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10a      	bne.n	800a556 <xQueueReceive+0x8e>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	61bb      	str	r3, [r7, #24]
}
 800a552:	bf00      	nop
 800a554:	e7fe      	b.n	800a554 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a556:	f001 fda5 	bl	800c0a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a562:	2b00      	cmp	r3, #0
 800a564:	d01f      	beq.n	800a5a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a566:	68b9      	ldr	r1, [r7, #8]
 800a568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a56a:	f000 f8f7 	bl	800a75c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a570:	1e5a      	subs	r2, r3, #1
 800a572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a574:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00f      	beq.n	800a59e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	3310      	adds	r3, #16
 800a582:	4618      	mov	r0, r3
 800a584:	f000 fe74 	bl	800b270 <xTaskRemoveFromEventList>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d007      	beq.n	800a59e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a58e:	4b3d      	ldr	r3, [pc, #244]	; (800a684 <xQueueReceive+0x1bc>)
 800a590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a594:	601a      	str	r2, [r3, #0]
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a59e:	f001 fdb1 	bl	800c104 <vPortExitCritical>
				return pdPASS;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e069      	b.n	800a67a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d103      	bne.n	800a5b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5ac:	f001 fdaa 	bl	800c104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	e062      	b.n	800a67a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d106      	bne.n	800a5c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5ba:	f107 0310 	add.w	r3, r7, #16
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 feba 	bl	800b338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5c8:	f001 fd9c 	bl	800c104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5cc:	f000 fc26 	bl	800ae1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5d0:	f001 fd68 	bl	800c0a4 <vPortEnterCritical>
 800a5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5da:	b25b      	sxtb	r3, r3
 800a5dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5e0:	d103      	bne.n	800a5ea <xQueueReceive+0x122>
 800a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5f0:	b25b      	sxtb	r3, r3
 800a5f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5f6:	d103      	bne.n	800a600 <xQueueReceive+0x138>
 800a5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a600:	f001 fd80 	bl	800c104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a604:	1d3a      	adds	r2, r7, #4
 800a606:	f107 0310 	add.w	r3, r7, #16
 800a60a:	4611      	mov	r1, r2
 800a60c:	4618      	mov	r0, r3
 800a60e:	f000 fea9 	bl	800b364 <xTaskCheckForTimeOut>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d123      	bne.n	800a660 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a61a:	f000 f917 	bl	800a84c <prvIsQueueEmpty>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d017      	beq.n	800a654 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a626:	3324      	adds	r3, #36	; 0x24
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	4611      	mov	r1, r2
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 fdcf 	bl	800b1d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a634:	f000 f8b8 	bl	800a7a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a638:	f000 fbfe 	bl	800ae38 <xTaskResumeAll>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d189      	bne.n	800a556 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a642:	4b10      	ldr	r3, [pc, #64]	; (800a684 <xQueueReceive+0x1bc>)
 800a644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a648:	601a      	str	r2, [r3, #0]
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	e780      	b.n	800a556 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a656:	f000 f8a7 	bl	800a7a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a65a:	f000 fbed 	bl	800ae38 <xTaskResumeAll>
 800a65e:	e77a      	b.n	800a556 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a662:	f000 f8a1 	bl	800a7a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a666:	f000 fbe7 	bl	800ae38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a66a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a66c:	f000 f8ee 	bl	800a84c <prvIsQueueEmpty>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	f43f af6f 	beq.w	800a556 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a678:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3730      	adds	r7, #48	; 0x30
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	e000ed04 	.word	0xe000ed04

0800a688 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a694:	2300      	movs	r3, #0
 800a696:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10d      	bne.n	800a6c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d14d      	bne.n	800a74a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f000 ffbc 	bl	800b630 <xTaskPriorityDisinherit>
 800a6b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	609a      	str	r2, [r3, #8]
 800a6c0:	e043      	b.n	800a74a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d119      	bne.n	800a6fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6858      	ldr	r0, [r3, #4]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	68b9      	ldr	r1, [r7, #8]
 800a6d4:	f002 fc72 	bl	800cfbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e0:	441a      	add	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	685a      	ldr	r2, [r3, #4]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d32b      	bcc.n	800a74a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	605a      	str	r2, [r3, #4]
 800a6fa:	e026      	b.n	800a74a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	68d8      	ldr	r0, [r3, #12]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a704:	461a      	mov	r2, r3
 800a706:	68b9      	ldr	r1, [r7, #8]
 800a708:	f002 fc58 	bl	800cfbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	68da      	ldr	r2, [r3, #12]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a714:	425b      	negs	r3, r3
 800a716:	441a      	add	r2, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	68da      	ldr	r2, [r3, #12]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	429a      	cmp	r2, r3
 800a726:	d207      	bcs.n	800a738 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	689a      	ldr	r2, [r3, #8]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a730:	425b      	negs	r3, r3
 800a732:	441a      	add	r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d105      	bne.n	800a74a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d002      	beq.n	800a74a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	3b01      	subs	r3, #1
 800a748:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	1c5a      	adds	r2, r3, #1
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a752:	697b      	ldr	r3, [r7, #20]
}
 800a754:	4618      	mov	r0, r3
 800a756:	3718      	adds	r7, #24
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d018      	beq.n	800a7a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	68da      	ldr	r2, [r3, #12]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a776:	441a      	add	r2, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	68da      	ldr	r2, [r3, #12]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	429a      	cmp	r2, r3
 800a786:	d303      	bcc.n	800a790 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	68d9      	ldr	r1, [r3, #12]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a798:	461a      	mov	r2, r3
 800a79a:	6838      	ldr	r0, [r7, #0]
 800a79c:	f002 fc0e 	bl	800cfbc <memcpy>
	}
}
 800a7a0:	bf00      	nop
 800a7a2:	3708      	adds	r7, #8
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a7b0:	f001 fc78 	bl	800c0a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7bc:	e011      	b.n	800a7e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d012      	beq.n	800a7ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	3324      	adds	r3, #36	; 0x24
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f000 fd50 	bl	800b270 <xTaskRemoveFromEventList>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d001      	beq.n	800a7da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a7d6:	f000 fe27 	bl	800b428 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a7da:	7bfb      	ldrb	r3, [r7, #15]
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	dce9      	bgt.n	800a7be <prvUnlockQueue+0x16>
 800a7ea:	e000      	b.n	800a7ee <prvUnlockQueue+0x46>
					break;
 800a7ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	22ff      	movs	r2, #255	; 0xff
 800a7f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a7f6:	f001 fc85 	bl	800c104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a7fa:	f001 fc53 	bl	800c0a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a804:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a806:	e011      	b.n	800a82c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d012      	beq.n	800a836 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	3310      	adds	r3, #16
 800a814:	4618      	mov	r0, r3
 800a816:	f000 fd2b 	bl	800b270 <xTaskRemoveFromEventList>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a820:	f000 fe02 	bl	800b428 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a824:	7bbb      	ldrb	r3, [r7, #14]
 800a826:	3b01      	subs	r3, #1
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a82c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a830:	2b00      	cmp	r3, #0
 800a832:	dce9      	bgt.n	800a808 <prvUnlockQueue+0x60>
 800a834:	e000      	b.n	800a838 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a836:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	22ff      	movs	r2, #255	; 0xff
 800a83c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a840:	f001 fc60 	bl	800c104 <vPortExitCritical>
}
 800a844:	bf00      	nop
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a854:	f001 fc26 	bl	800c0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d102      	bne.n	800a866 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a860:	2301      	movs	r3, #1
 800a862:	60fb      	str	r3, [r7, #12]
 800a864:	e001      	b.n	800a86a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a866:	2300      	movs	r3, #0
 800a868:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a86a:	f001 fc4b 	bl	800c104 <vPortExitCritical>

	return xReturn;
 800a86e:	68fb      	ldr	r3, [r7, #12]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a880:	f001 fc10 	bl	800c0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d102      	bne.n	800a896 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a890:	2301      	movs	r3, #1
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	e001      	b.n	800a89a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a896:	2300      	movs	r3, #0
 800a898:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a89a:	f001 fc33 	bl	800c104 <vPortExitCritical>

	return xReturn;
 800a89e:	68fb      	ldr	r3, [r7, #12]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	60fb      	str	r3, [r7, #12]
 800a8b6:	e014      	b.n	800a8e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a8b8:	4a0f      	ldr	r2, [pc, #60]	; (800a8f8 <vQueueAddToRegistry+0x50>)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10b      	bne.n	800a8dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a8c4:	490c      	ldr	r1, [pc, #48]	; (800a8f8 <vQueueAddToRegistry+0x50>)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	683a      	ldr	r2, [r7, #0]
 800a8ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a8ce:	4a0a      	ldr	r2, [pc, #40]	; (800a8f8 <vQueueAddToRegistry+0x50>)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	00db      	lsls	r3, r3, #3
 800a8d4:	4413      	add	r3, r2
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a8da:	e006      	b.n	800a8ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	60fb      	str	r3, [r7, #12]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2b07      	cmp	r3, #7
 800a8e6:	d9e7      	bls.n	800a8b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a8e8:	bf00      	nop
 800a8ea:	bf00      	nop
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	20000c44 	.word	0x20000c44

0800a8fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b086      	sub	sp, #24
 800a900:	af00      	add	r7, sp, #0
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a90c:	f001 fbca 	bl	800c0a4 <vPortEnterCritical>
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a916:	b25b      	sxtb	r3, r3
 800a918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a91c:	d103      	bne.n	800a926 <vQueueWaitForMessageRestricted+0x2a>
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	2200      	movs	r2, #0
 800a922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a92c:	b25b      	sxtb	r3, r3
 800a92e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a932:	d103      	bne.n	800a93c <vQueueWaitForMessageRestricted+0x40>
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	2200      	movs	r2, #0
 800a938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a93c:	f001 fbe2 	bl	800c104 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a944:	2b00      	cmp	r3, #0
 800a946:	d106      	bne.n	800a956 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	3324      	adds	r3, #36	; 0x24
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	68b9      	ldr	r1, [r7, #8]
 800a950:	4618      	mov	r0, r3
 800a952:	f000 fc61 	bl	800b218 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a956:	6978      	ldr	r0, [r7, #20]
 800a958:	f7ff ff26 	bl	800a7a8 <prvUnlockQueue>
	}
 800a95c:	bf00      	nop
 800a95e:	3718      	adds	r7, #24
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a964:	b580      	push	{r7, lr}
 800a966:	b08e      	sub	sp, #56	; 0x38
 800a968:	af04      	add	r7, sp, #16
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	607a      	str	r2, [r7, #4]
 800a970:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10a      	bne.n	800a98e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97c:	f383 8811 	msr	BASEPRI, r3
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	623b      	str	r3, [r7, #32]
}
 800a98a:	bf00      	nop
 800a98c:	e7fe      	b.n	800a98c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10a      	bne.n	800a9aa <xTaskCreateStatic+0x46>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	61fb      	str	r3, [r7, #28]
}
 800a9a6:	bf00      	nop
 800a9a8:	e7fe      	b.n	800a9a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a9aa:	23bc      	movs	r3, #188	; 0xbc
 800a9ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	2bbc      	cmp	r3, #188	; 0xbc
 800a9b2:	d00a      	beq.n	800a9ca <xTaskCreateStatic+0x66>
	__asm volatile
 800a9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b8:	f383 8811 	msr	BASEPRI, r3
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	61bb      	str	r3, [r7, #24]
}
 800a9c6:	bf00      	nop
 800a9c8:	e7fe      	b.n	800a9c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a9ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d01e      	beq.n	800aa10 <xTaskCreateStatic+0xac>
 800a9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d01b      	beq.n	800aa10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	2202      	movs	r2, #2
 800a9e6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	9303      	str	r3, [sp, #12]
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f0:	9302      	str	r3, [sp, #8]
 800a9f2:	f107 0314 	add.w	r3, r7, #20
 800a9f6:	9301      	str	r3, [sp, #4]
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	68b9      	ldr	r1, [r7, #8]
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f000 f850 	bl	800aaa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa0a:	f000 f8f3 	bl	800abf4 <prvAddNewTaskToReadyList>
 800aa0e:	e001      	b.n	800aa14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aa10:	2300      	movs	r3, #0
 800aa12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa14:	697b      	ldr	r3, [r7, #20]
	}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3728      	adds	r7, #40	; 0x28
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b08c      	sub	sp, #48	; 0x30
 800aa22:	af04      	add	r7, sp, #16
 800aa24:	60f8      	str	r0, [r7, #12]
 800aa26:	60b9      	str	r1, [r7, #8]
 800aa28:	603b      	str	r3, [r7, #0]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa2e:	88fb      	ldrh	r3, [r7, #6]
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4618      	mov	r0, r3
 800aa34:	f001 fc58 	bl	800c2e8 <pvPortMalloc>
 800aa38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00e      	beq.n	800aa5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa40:	20bc      	movs	r0, #188	; 0xbc
 800aa42:	f001 fc51 	bl	800c2e8 <pvPortMalloc>
 800aa46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d003      	beq.n	800aa56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	631a      	str	r2, [r3, #48]	; 0x30
 800aa54:	e005      	b.n	800aa62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa56:	6978      	ldr	r0, [r7, #20]
 800aa58:	f001 fd12 	bl	800c480 <vPortFree>
 800aa5c:	e001      	b.n	800aa62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d017      	beq.n	800aa98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa70:	88fa      	ldrh	r2, [r7, #6]
 800aa72:	2300      	movs	r3, #0
 800aa74:	9303      	str	r3, [sp, #12]
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	9302      	str	r3, [sp, #8]
 800aa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7c:	9301      	str	r3, [sp, #4]
 800aa7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa80:	9300      	str	r3, [sp, #0]
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	68b9      	ldr	r1, [r7, #8]
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f000 f80e 	bl	800aaa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa8c:	69f8      	ldr	r0, [r7, #28]
 800aa8e:	f000 f8b1 	bl	800abf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa92:	2301      	movs	r3, #1
 800aa94:	61bb      	str	r3, [r7, #24]
 800aa96:	e002      	b.n	800aa9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa9e:	69bb      	ldr	r3, [r7, #24]
	}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3720      	adds	r7, #32
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b088      	sub	sp, #32
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
 800aab4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	461a      	mov	r2, r3
 800aac0:	21a5      	movs	r1, #165	; 0xa5
 800aac2:	f002 fa89 	bl	800cfd8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aad0:	3b01      	subs	r3, #1
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	4413      	add	r3, r2
 800aad6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	f023 0307 	bic.w	r3, r3, #7
 800aade:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	f003 0307 	and.w	r3, r3, #7
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00a      	beq.n	800ab00 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aaea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaee:	f383 8811 	msr	BASEPRI, r3
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	f3bf 8f4f 	dsb	sy
 800aafa:	617b      	str	r3, [r7, #20]
}
 800aafc:	bf00      	nop
 800aafe:	e7fe      	b.n	800aafe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d01f      	beq.n	800ab46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab06:	2300      	movs	r3, #0
 800ab08:	61fb      	str	r3, [r7, #28]
 800ab0a:	e012      	b.n	800ab32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab0c:	68ba      	ldr	r2, [r7, #8]
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	4413      	add	r3, r2
 800ab12:	7819      	ldrb	r1, [r3, #0]
 800ab14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	4413      	add	r3, r2
 800ab1a:	3334      	adds	r3, #52	; 0x34
 800ab1c:	460a      	mov	r2, r1
 800ab1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	4413      	add	r3, r2
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d006      	beq.n	800ab3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	61fb      	str	r3, [r7, #28]
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	2b0f      	cmp	r3, #15
 800ab36:	d9e9      	bls.n	800ab0c <prvInitialiseNewTask+0x64>
 800ab38:	e000      	b.n	800ab3c <prvInitialiseNewTask+0x94>
			{
				break;
 800ab3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab44:	e003      	b.n	800ab4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab50:	2b37      	cmp	r3, #55	; 0x37
 800ab52:	d901      	bls.n	800ab58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab54:	2337      	movs	r3, #55	; 0x37
 800ab56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab66:	2200      	movs	r2, #0
 800ab68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6c:	3304      	adds	r3, #4
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7ff f978 	bl	8009e64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab76:	3318      	adds	r3, #24
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7ff f973 	bl	8009e64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab96:	2200      	movs	r2, #0
 800ab98:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba6:	3354      	adds	r3, #84	; 0x54
 800aba8:	2260      	movs	r2, #96	; 0x60
 800abaa:	2100      	movs	r1, #0
 800abac:	4618      	mov	r0, r3
 800abae:	f002 fa13 	bl	800cfd8 <memset>
 800abb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb4:	4a0c      	ldr	r2, [pc, #48]	; (800abe8 <prvInitialiseNewTask+0x140>)
 800abb6:	659a      	str	r2, [r3, #88]	; 0x58
 800abb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abba:	4a0c      	ldr	r2, [pc, #48]	; (800abec <prvInitialiseNewTask+0x144>)
 800abbc:	65da      	str	r2, [r3, #92]	; 0x5c
 800abbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc0:	4a0b      	ldr	r2, [pc, #44]	; (800abf0 <prvInitialiseNewTask+0x148>)
 800abc2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abc4:	683a      	ldr	r2, [r7, #0]
 800abc6:	68f9      	ldr	r1, [r7, #12]
 800abc8:	69b8      	ldr	r0, [r7, #24]
 800abca:	f001 f941 	bl	800be50 <pxPortInitialiseStack>
 800abce:	4602      	mov	r2, r0
 800abd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800abd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d002      	beq.n	800abe0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800abda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abde:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abe0:	bf00      	nop
 800abe2:	3720      	adds	r7, #32
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	0800d2e4 	.word	0x0800d2e4
 800abec:	0800d304 	.word	0x0800d304
 800abf0:	0800d2c4 	.word	0x0800d2c4

0800abf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800abfc:	f001 fa52 	bl	800c0a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac00:	4b2d      	ldr	r3, [pc, #180]	; (800acb8 <prvAddNewTaskToReadyList+0xc4>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	3301      	adds	r3, #1
 800ac06:	4a2c      	ldr	r2, [pc, #176]	; (800acb8 <prvAddNewTaskToReadyList+0xc4>)
 800ac08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac0a:	4b2c      	ldr	r3, [pc, #176]	; (800acbc <prvAddNewTaskToReadyList+0xc8>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d109      	bne.n	800ac26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac12:	4a2a      	ldr	r2, [pc, #168]	; (800acbc <prvAddNewTaskToReadyList+0xc8>)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac18:	4b27      	ldr	r3, [pc, #156]	; (800acb8 <prvAddNewTaskToReadyList+0xc4>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d110      	bne.n	800ac42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac20:	f000 fc26 	bl	800b470 <prvInitialiseTaskLists>
 800ac24:	e00d      	b.n	800ac42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac26:	4b26      	ldr	r3, [pc, #152]	; (800acc0 <prvAddNewTaskToReadyList+0xcc>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d109      	bne.n	800ac42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac2e:	4b23      	ldr	r3, [pc, #140]	; (800acbc <prvAddNewTaskToReadyList+0xc8>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d802      	bhi.n	800ac42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac3c:	4a1f      	ldr	r2, [pc, #124]	; (800acbc <prvAddNewTaskToReadyList+0xc8>)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac42:	4b20      	ldr	r3, [pc, #128]	; (800acc4 <prvAddNewTaskToReadyList+0xd0>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3301      	adds	r3, #1
 800ac48:	4a1e      	ldr	r2, [pc, #120]	; (800acc4 <prvAddNewTaskToReadyList+0xd0>)
 800ac4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac4c:	4b1d      	ldr	r3, [pc, #116]	; (800acc4 <prvAddNewTaskToReadyList+0xd0>)
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac58:	4b1b      	ldr	r3, [pc, #108]	; (800acc8 <prvAddNewTaskToReadyList+0xd4>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d903      	bls.n	800ac68 <prvAddNewTaskToReadyList+0x74>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac64:	4a18      	ldr	r2, [pc, #96]	; (800acc8 <prvAddNewTaskToReadyList+0xd4>)
 800ac66:	6013      	str	r3, [r2, #0]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4a15      	ldr	r2, [pc, #84]	; (800accc <prvAddNewTaskToReadyList+0xd8>)
 800ac76:	441a      	add	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	4610      	mov	r0, r2
 800ac80:	f7ff f8fd 	bl	8009e7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac84:	f001 fa3e 	bl	800c104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac88:	4b0d      	ldr	r3, [pc, #52]	; (800acc0 <prvAddNewTaskToReadyList+0xcc>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00e      	beq.n	800acae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac90:	4b0a      	ldr	r3, [pc, #40]	; (800acbc <prvAddNewTaskToReadyList+0xc8>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d207      	bcs.n	800acae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac9e:	4b0c      	ldr	r3, [pc, #48]	; (800acd0 <prvAddNewTaskToReadyList+0xdc>)
 800aca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acae:	bf00      	nop
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	20001158 	.word	0x20001158
 800acbc:	20000c84 	.word	0x20000c84
 800acc0:	20001164 	.word	0x20001164
 800acc4:	20001174 	.word	0x20001174
 800acc8:	20001160 	.word	0x20001160
 800accc:	20000c88 	.word	0x20000c88
 800acd0:	e000ed04 	.word	0xe000ed04

0800acd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800acdc:	2300      	movs	r3, #0
 800acde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d017      	beq.n	800ad16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ace6:	4b13      	ldr	r3, [pc, #76]	; (800ad34 <vTaskDelay+0x60>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00a      	beq.n	800ad04 <vTaskDelay+0x30>
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	60bb      	str	r3, [r7, #8]
}
 800ad00:	bf00      	nop
 800ad02:	e7fe      	b.n	800ad02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ad04:	f000 f88a 	bl	800ae1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ad08:	2100      	movs	r1, #0
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fcfe 	bl	800b70c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ad10:	f000 f892 	bl	800ae38 <xTaskResumeAll>
 800ad14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d107      	bne.n	800ad2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ad1c:	4b06      	ldr	r3, [pc, #24]	; (800ad38 <vTaskDelay+0x64>)
 800ad1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad22:	601a      	str	r2, [r3, #0]
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad2c:	bf00      	nop
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	20001180 	.word	0x20001180
 800ad38:	e000ed04 	.word	0xe000ed04

0800ad3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b08a      	sub	sp, #40	; 0x28
 800ad40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad42:	2300      	movs	r3, #0
 800ad44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad46:	2300      	movs	r3, #0
 800ad48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad4a:	463a      	mov	r2, r7
 800ad4c:	1d39      	adds	r1, r7, #4
 800ad4e:	f107 0308 	add.w	r3, r7, #8
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7ff f832 	bl	8009dbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad58:	6839      	ldr	r1, [r7, #0]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	68ba      	ldr	r2, [r7, #8]
 800ad5e:	9202      	str	r2, [sp, #8]
 800ad60:	9301      	str	r3, [sp, #4]
 800ad62:	2300      	movs	r3, #0
 800ad64:	9300      	str	r3, [sp, #0]
 800ad66:	2300      	movs	r3, #0
 800ad68:	460a      	mov	r2, r1
 800ad6a:	4924      	ldr	r1, [pc, #144]	; (800adfc <vTaskStartScheduler+0xc0>)
 800ad6c:	4824      	ldr	r0, [pc, #144]	; (800ae00 <vTaskStartScheduler+0xc4>)
 800ad6e:	f7ff fdf9 	bl	800a964 <xTaskCreateStatic>
 800ad72:	4603      	mov	r3, r0
 800ad74:	4a23      	ldr	r2, [pc, #140]	; (800ae04 <vTaskStartScheduler+0xc8>)
 800ad76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ad78:	4b22      	ldr	r3, [pc, #136]	; (800ae04 <vTaskStartScheduler+0xc8>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d002      	beq.n	800ad86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ad80:	2301      	movs	r3, #1
 800ad82:	617b      	str	r3, [r7, #20]
 800ad84:	e001      	b.n	800ad8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ad86:	2300      	movs	r3, #0
 800ad88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d102      	bne.n	800ad96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ad90:	f000 fd10 	bl	800b7b4 <xTimerCreateTimerTask>
 800ad94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d11b      	bne.n	800add4 <vTaskStartScheduler+0x98>
	__asm volatile
 800ad9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	613b      	str	r3, [r7, #16]
}
 800adae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800adb0:	4b15      	ldr	r3, [pc, #84]	; (800ae08 <vTaskStartScheduler+0xcc>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	3354      	adds	r3, #84	; 0x54
 800adb6:	4a15      	ldr	r2, [pc, #84]	; (800ae0c <vTaskStartScheduler+0xd0>)
 800adb8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800adba:	4b15      	ldr	r3, [pc, #84]	; (800ae10 <vTaskStartScheduler+0xd4>)
 800adbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800adc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800adc2:	4b14      	ldr	r3, [pc, #80]	; (800ae14 <vTaskStartScheduler+0xd8>)
 800adc4:	2201      	movs	r2, #1
 800adc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800adc8:	4b13      	ldr	r3, [pc, #76]	; (800ae18 <vTaskStartScheduler+0xdc>)
 800adca:	2200      	movs	r2, #0
 800adcc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800adce:	f001 f8c7 	bl	800bf60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800add2:	e00e      	b.n	800adf2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adda:	d10a      	bne.n	800adf2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800addc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade0:	f383 8811 	msr	BASEPRI, r3
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	60fb      	str	r3, [r7, #12]
}
 800adee:	bf00      	nop
 800adf0:	e7fe      	b.n	800adf0 <vTaskStartScheduler+0xb4>
}
 800adf2:	bf00      	nop
 800adf4:	3718      	adds	r7, #24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	0800d19c 	.word	0x0800d19c
 800ae00:	0800b441 	.word	0x0800b441
 800ae04:	2000117c 	.word	0x2000117c
 800ae08:	20000c84 	.word	0x20000c84
 800ae0c:	200000e4 	.word	0x200000e4
 800ae10:	20001178 	.word	0x20001178
 800ae14:	20001164 	.word	0x20001164
 800ae18:	2000115c 	.word	0x2000115c

0800ae1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae20:	4b04      	ldr	r3, [pc, #16]	; (800ae34 <vTaskSuspendAll+0x18>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	3301      	adds	r3, #1
 800ae26:	4a03      	ldr	r2, [pc, #12]	; (800ae34 <vTaskSuspendAll+0x18>)
 800ae28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ae2a:	bf00      	nop
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr
 800ae34:	20001180 	.word	0x20001180

0800ae38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae42:	2300      	movs	r3, #0
 800ae44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae46:	4b42      	ldr	r3, [pc, #264]	; (800af50 <xTaskResumeAll+0x118>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d10a      	bne.n	800ae64 <xTaskResumeAll+0x2c>
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	603b      	str	r3, [r7, #0]
}
 800ae60:	bf00      	nop
 800ae62:	e7fe      	b.n	800ae62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae64:	f001 f91e 	bl	800c0a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae68:	4b39      	ldr	r3, [pc, #228]	; (800af50 <xTaskResumeAll+0x118>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	4a38      	ldr	r2, [pc, #224]	; (800af50 <xTaskResumeAll+0x118>)
 800ae70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae72:	4b37      	ldr	r3, [pc, #220]	; (800af50 <xTaskResumeAll+0x118>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d162      	bne.n	800af40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae7a:	4b36      	ldr	r3, [pc, #216]	; (800af54 <xTaskResumeAll+0x11c>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d05e      	beq.n	800af40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae82:	e02f      	b.n	800aee4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae84:	4b34      	ldr	r3, [pc, #208]	; (800af58 <xTaskResumeAll+0x120>)
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	3318      	adds	r3, #24
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7ff f851 	bl	8009f38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	3304      	adds	r3, #4
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7ff f84c 	bl	8009f38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea4:	4b2d      	ldr	r3, [pc, #180]	; (800af5c <xTaskResumeAll+0x124>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d903      	bls.n	800aeb4 <xTaskResumeAll+0x7c>
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb0:	4a2a      	ldr	r2, [pc, #168]	; (800af5c <xTaskResumeAll+0x124>)
 800aeb2:	6013      	str	r3, [r2, #0]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb8:	4613      	mov	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	4a27      	ldr	r2, [pc, #156]	; (800af60 <xTaskResumeAll+0x128>)
 800aec2:	441a      	add	r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	3304      	adds	r3, #4
 800aec8:	4619      	mov	r1, r3
 800aeca:	4610      	mov	r0, r2
 800aecc:	f7fe ffd7 	bl	8009e7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed4:	4b23      	ldr	r3, [pc, #140]	; (800af64 <xTaskResumeAll+0x12c>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d302      	bcc.n	800aee4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aede:	4b22      	ldr	r3, [pc, #136]	; (800af68 <xTaskResumeAll+0x130>)
 800aee0:	2201      	movs	r2, #1
 800aee2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aee4:	4b1c      	ldr	r3, [pc, #112]	; (800af58 <xTaskResumeAll+0x120>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1cb      	bne.n	800ae84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aef2:	f000 fb5f 	bl	800b5b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aef6:	4b1d      	ldr	r3, [pc, #116]	; (800af6c <xTaskResumeAll+0x134>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d010      	beq.n	800af24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af02:	f000 f847 	bl	800af94 <xTaskIncrementTick>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d002      	beq.n	800af12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800af0c:	4b16      	ldr	r3, [pc, #88]	; (800af68 <xTaskResumeAll+0x130>)
 800af0e:	2201      	movs	r2, #1
 800af10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	3b01      	subs	r3, #1
 800af16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1f1      	bne.n	800af02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800af1e:	4b13      	ldr	r3, [pc, #76]	; (800af6c <xTaskResumeAll+0x134>)
 800af20:	2200      	movs	r2, #0
 800af22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af24:	4b10      	ldr	r3, [pc, #64]	; (800af68 <xTaskResumeAll+0x130>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d009      	beq.n	800af40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af2c:	2301      	movs	r3, #1
 800af2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af30:	4b0f      	ldr	r3, [pc, #60]	; (800af70 <xTaskResumeAll+0x138>)
 800af32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af36:	601a      	str	r2, [r3, #0]
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af40:	f001 f8e0 	bl	800c104 <vPortExitCritical>

	return xAlreadyYielded;
 800af44:	68bb      	ldr	r3, [r7, #8]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	20001180 	.word	0x20001180
 800af54:	20001158 	.word	0x20001158
 800af58:	20001118 	.word	0x20001118
 800af5c:	20001160 	.word	0x20001160
 800af60:	20000c88 	.word	0x20000c88
 800af64:	20000c84 	.word	0x20000c84
 800af68:	2000116c 	.word	0x2000116c
 800af6c:	20001168 	.word	0x20001168
 800af70:	e000ed04 	.word	0xe000ed04

0800af74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800af7a:	4b05      	ldr	r3, [pc, #20]	; (800af90 <xTaskGetTickCount+0x1c>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800af80:	687b      	ldr	r3, [r7, #4]
}
 800af82:	4618      	mov	r0, r3
 800af84:	370c      	adds	r7, #12
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	2000115c 	.word	0x2000115c

0800af94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af9a:	2300      	movs	r3, #0
 800af9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af9e:	4b4f      	ldr	r3, [pc, #316]	; (800b0dc <xTaskIncrementTick+0x148>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f040 808f 	bne.w	800b0c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800afa8:	4b4d      	ldr	r3, [pc, #308]	; (800b0e0 <xTaskIncrementTick+0x14c>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	3301      	adds	r3, #1
 800afae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800afb0:	4a4b      	ldr	r2, [pc, #300]	; (800b0e0 <xTaskIncrementTick+0x14c>)
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d120      	bne.n	800affe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800afbc:	4b49      	ldr	r3, [pc, #292]	; (800b0e4 <xTaskIncrementTick+0x150>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00a      	beq.n	800afdc <xTaskIncrementTick+0x48>
	__asm volatile
 800afc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afca:	f383 8811 	msr	BASEPRI, r3
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	603b      	str	r3, [r7, #0]
}
 800afd8:	bf00      	nop
 800afda:	e7fe      	b.n	800afda <xTaskIncrementTick+0x46>
 800afdc:	4b41      	ldr	r3, [pc, #260]	; (800b0e4 <xTaskIncrementTick+0x150>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	60fb      	str	r3, [r7, #12]
 800afe2:	4b41      	ldr	r3, [pc, #260]	; (800b0e8 <xTaskIncrementTick+0x154>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a3f      	ldr	r2, [pc, #252]	; (800b0e4 <xTaskIncrementTick+0x150>)
 800afe8:	6013      	str	r3, [r2, #0]
 800afea:	4a3f      	ldr	r2, [pc, #252]	; (800b0e8 <xTaskIncrementTick+0x154>)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6013      	str	r3, [r2, #0]
 800aff0:	4b3e      	ldr	r3, [pc, #248]	; (800b0ec <xTaskIncrementTick+0x158>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	3301      	adds	r3, #1
 800aff6:	4a3d      	ldr	r2, [pc, #244]	; (800b0ec <xTaskIncrementTick+0x158>)
 800aff8:	6013      	str	r3, [r2, #0]
 800affa:	f000 fadb 	bl	800b5b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800affe:	4b3c      	ldr	r3, [pc, #240]	; (800b0f0 <xTaskIncrementTick+0x15c>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	693a      	ldr	r2, [r7, #16]
 800b004:	429a      	cmp	r2, r3
 800b006:	d349      	bcc.n	800b09c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b008:	4b36      	ldr	r3, [pc, #216]	; (800b0e4 <xTaskIncrementTick+0x150>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d104      	bne.n	800b01c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b012:	4b37      	ldr	r3, [pc, #220]	; (800b0f0 <xTaskIncrementTick+0x15c>)
 800b014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b018:	601a      	str	r2, [r3, #0]
					break;
 800b01a:	e03f      	b.n	800b09c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b01c:	4b31      	ldr	r3, [pc, #196]	; (800b0e4 <xTaskIncrementTick+0x150>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	429a      	cmp	r2, r3
 800b032:	d203      	bcs.n	800b03c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b034:	4a2e      	ldr	r2, [pc, #184]	; (800b0f0 <xTaskIncrementTick+0x15c>)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b03a:	e02f      	b.n	800b09c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	3304      	adds	r3, #4
 800b040:	4618      	mov	r0, r3
 800b042:	f7fe ff79 	bl	8009f38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d004      	beq.n	800b058 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	3318      	adds	r3, #24
 800b052:	4618      	mov	r0, r3
 800b054:	f7fe ff70 	bl	8009f38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b05c:	4b25      	ldr	r3, [pc, #148]	; (800b0f4 <xTaskIncrementTick+0x160>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	429a      	cmp	r2, r3
 800b062:	d903      	bls.n	800b06c <xTaskIncrementTick+0xd8>
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b068:	4a22      	ldr	r2, [pc, #136]	; (800b0f4 <xTaskIncrementTick+0x160>)
 800b06a:	6013      	str	r3, [r2, #0]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b070:	4613      	mov	r3, r2
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4413      	add	r3, r2
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	4a1f      	ldr	r2, [pc, #124]	; (800b0f8 <xTaskIncrementTick+0x164>)
 800b07a:	441a      	add	r2, r3
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	3304      	adds	r3, #4
 800b080:	4619      	mov	r1, r3
 800b082:	4610      	mov	r0, r2
 800b084:	f7fe fefb 	bl	8009e7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b08c:	4b1b      	ldr	r3, [pc, #108]	; (800b0fc <xTaskIncrementTick+0x168>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b092:	429a      	cmp	r2, r3
 800b094:	d3b8      	bcc.n	800b008 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b096:	2301      	movs	r3, #1
 800b098:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b09a:	e7b5      	b.n	800b008 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b09c:	4b17      	ldr	r3, [pc, #92]	; (800b0fc <xTaskIncrementTick+0x168>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a2:	4915      	ldr	r1, [pc, #84]	; (800b0f8 <xTaskIncrementTick+0x164>)
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4413      	add	r3, r2
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	440b      	add	r3, r1
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d901      	bls.n	800b0b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b0b8:	4b11      	ldr	r3, [pc, #68]	; (800b100 <xTaskIncrementTick+0x16c>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d007      	beq.n	800b0d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	617b      	str	r3, [r7, #20]
 800b0c4:	e004      	b.n	800b0d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b0c6:	4b0f      	ldr	r3, [pc, #60]	; (800b104 <xTaskIncrementTick+0x170>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	4a0d      	ldr	r2, [pc, #52]	; (800b104 <xTaskIncrementTick+0x170>)
 800b0ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b0d0:	697b      	ldr	r3, [r7, #20]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3718      	adds	r7, #24
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	20001180 	.word	0x20001180
 800b0e0:	2000115c 	.word	0x2000115c
 800b0e4:	20001110 	.word	0x20001110
 800b0e8:	20001114 	.word	0x20001114
 800b0ec:	20001170 	.word	0x20001170
 800b0f0:	20001178 	.word	0x20001178
 800b0f4:	20001160 	.word	0x20001160
 800b0f8:	20000c88 	.word	0x20000c88
 800b0fc:	20000c84 	.word	0x20000c84
 800b100:	2000116c 	.word	0x2000116c
 800b104:	20001168 	.word	0x20001168

0800b108 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b10e:	4b2a      	ldr	r3, [pc, #168]	; (800b1b8 <vTaskSwitchContext+0xb0>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d003      	beq.n	800b11e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b116:	4b29      	ldr	r3, [pc, #164]	; (800b1bc <vTaskSwitchContext+0xb4>)
 800b118:	2201      	movs	r2, #1
 800b11a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b11c:	e046      	b.n	800b1ac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b11e:	4b27      	ldr	r3, [pc, #156]	; (800b1bc <vTaskSwitchContext+0xb4>)
 800b120:	2200      	movs	r2, #0
 800b122:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b124:	4b26      	ldr	r3, [pc, #152]	; (800b1c0 <vTaskSwitchContext+0xb8>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	60fb      	str	r3, [r7, #12]
 800b12a:	e010      	b.n	800b14e <vTaskSwitchContext+0x46>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d10a      	bne.n	800b148 <vTaskSwitchContext+0x40>
	__asm volatile
 800b132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b136:	f383 8811 	msr	BASEPRI, r3
 800b13a:	f3bf 8f6f 	isb	sy
 800b13e:	f3bf 8f4f 	dsb	sy
 800b142:	607b      	str	r3, [r7, #4]
}
 800b144:	bf00      	nop
 800b146:	e7fe      	b.n	800b146 <vTaskSwitchContext+0x3e>
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	3b01      	subs	r3, #1
 800b14c:	60fb      	str	r3, [r7, #12]
 800b14e:	491d      	ldr	r1, [pc, #116]	; (800b1c4 <vTaskSwitchContext+0xbc>)
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	4613      	mov	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4413      	add	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	440b      	add	r3, r1
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d0e4      	beq.n	800b12c <vTaskSwitchContext+0x24>
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	4613      	mov	r3, r2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4413      	add	r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4a15      	ldr	r2, [pc, #84]	; (800b1c4 <vTaskSwitchContext+0xbc>)
 800b16e:	4413      	add	r3, r2
 800b170:	60bb      	str	r3, [r7, #8]
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	685a      	ldr	r2, [r3, #4]
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	605a      	str	r2, [r3, #4]
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	685a      	ldr	r2, [r3, #4]
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	3308      	adds	r3, #8
 800b184:	429a      	cmp	r2, r3
 800b186:	d104      	bne.n	800b192 <vTaskSwitchContext+0x8a>
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	685a      	ldr	r2, [r3, #4]
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	605a      	str	r2, [r3, #4]
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	4a0b      	ldr	r2, [pc, #44]	; (800b1c8 <vTaskSwitchContext+0xc0>)
 800b19a:	6013      	str	r3, [r2, #0]
 800b19c:	4a08      	ldr	r2, [pc, #32]	; (800b1c0 <vTaskSwitchContext+0xb8>)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b1a2:	4b09      	ldr	r3, [pc, #36]	; (800b1c8 <vTaskSwitchContext+0xc0>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	3354      	adds	r3, #84	; 0x54
 800b1a8:	4a08      	ldr	r2, [pc, #32]	; (800b1cc <vTaskSwitchContext+0xc4>)
 800b1aa:	6013      	str	r3, [r2, #0]
}
 800b1ac:	bf00      	nop
 800b1ae:	3714      	adds	r7, #20
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr
 800b1b8:	20001180 	.word	0x20001180
 800b1bc:	2000116c 	.word	0x2000116c
 800b1c0:	20001160 	.word	0x20001160
 800b1c4:	20000c88 	.word	0x20000c88
 800b1c8:	20000c84 	.word	0x20000c84
 800b1cc:	200000e4 	.word	0x200000e4

0800b1d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d10a      	bne.n	800b1f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e4:	f383 8811 	msr	BASEPRI, r3
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	60fb      	str	r3, [r7, #12]
}
 800b1f2:	bf00      	nop
 800b1f4:	e7fe      	b.n	800b1f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1f6:	4b07      	ldr	r3, [pc, #28]	; (800b214 <vTaskPlaceOnEventList+0x44>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	3318      	adds	r3, #24
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7fe fe61 	bl	8009ec6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b204:	2101      	movs	r1, #1
 800b206:	6838      	ldr	r0, [r7, #0]
 800b208:	f000 fa80 	bl	800b70c <prvAddCurrentTaskToDelayedList>
}
 800b20c:	bf00      	nop
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	20000c84 	.word	0x20000c84

0800b218 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b086      	sub	sp, #24
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d10a      	bne.n	800b240 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22e:	f383 8811 	msr	BASEPRI, r3
 800b232:	f3bf 8f6f 	isb	sy
 800b236:	f3bf 8f4f 	dsb	sy
 800b23a:	617b      	str	r3, [r7, #20]
}
 800b23c:	bf00      	nop
 800b23e:	e7fe      	b.n	800b23e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b240:	4b0a      	ldr	r3, [pc, #40]	; (800b26c <vTaskPlaceOnEventListRestricted+0x54>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	3318      	adds	r3, #24
 800b246:	4619      	mov	r1, r3
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f7fe fe18 	bl	8009e7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d002      	beq.n	800b25a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b258:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b25a:	6879      	ldr	r1, [r7, #4]
 800b25c:	68b8      	ldr	r0, [r7, #8]
 800b25e:	f000 fa55 	bl	800b70c <prvAddCurrentTaskToDelayedList>
	}
 800b262:	bf00      	nop
 800b264:	3718      	adds	r7, #24
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	20000c84 	.word	0x20000c84

0800b270 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	68db      	ldr	r3, [r3, #12]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d10a      	bne.n	800b29c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28a:	f383 8811 	msr	BASEPRI, r3
 800b28e:	f3bf 8f6f 	isb	sy
 800b292:	f3bf 8f4f 	dsb	sy
 800b296:	60fb      	str	r3, [r7, #12]
}
 800b298:	bf00      	nop
 800b29a:	e7fe      	b.n	800b29a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	3318      	adds	r3, #24
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7fe fe49 	bl	8009f38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2a6:	4b1e      	ldr	r3, [pc, #120]	; (800b320 <xTaskRemoveFromEventList+0xb0>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d11d      	bne.n	800b2ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	3304      	adds	r3, #4
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7fe fe40 	bl	8009f38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2bc:	4b19      	ldr	r3, [pc, #100]	; (800b324 <xTaskRemoveFromEventList+0xb4>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d903      	bls.n	800b2cc <xTaskRemoveFromEventList+0x5c>
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c8:	4a16      	ldr	r2, [pc, #88]	; (800b324 <xTaskRemoveFromEventList+0xb4>)
 800b2ca:	6013      	str	r3, [r2, #0]
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	4413      	add	r3, r2
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	4a13      	ldr	r2, [pc, #76]	; (800b328 <xTaskRemoveFromEventList+0xb8>)
 800b2da:	441a      	add	r2, r3
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	3304      	adds	r3, #4
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	4610      	mov	r0, r2
 800b2e4:	f7fe fdcb 	bl	8009e7e <vListInsertEnd>
 800b2e8:	e005      	b.n	800b2f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	3318      	adds	r3, #24
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	480e      	ldr	r0, [pc, #56]	; (800b32c <xTaskRemoveFromEventList+0xbc>)
 800b2f2:	f7fe fdc4 	bl	8009e7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fa:	4b0d      	ldr	r3, [pc, #52]	; (800b330 <xTaskRemoveFromEventList+0xc0>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b300:	429a      	cmp	r2, r3
 800b302:	d905      	bls.n	800b310 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b304:	2301      	movs	r3, #1
 800b306:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b308:	4b0a      	ldr	r3, [pc, #40]	; (800b334 <xTaskRemoveFromEventList+0xc4>)
 800b30a:	2201      	movs	r2, #1
 800b30c:	601a      	str	r2, [r3, #0]
 800b30e:	e001      	b.n	800b314 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b310:	2300      	movs	r3, #0
 800b312:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b314:	697b      	ldr	r3, [r7, #20]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3718      	adds	r7, #24
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	20001180 	.word	0x20001180
 800b324:	20001160 	.word	0x20001160
 800b328:	20000c88 	.word	0x20000c88
 800b32c:	20001118 	.word	0x20001118
 800b330:	20000c84 	.word	0x20000c84
 800b334:	2000116c 	.word	0x2000116c

0800b338 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b340:	4b06      	ldr	r3, [pc, #24]	; (800b35c <vTaskInternalSetTimeOutState+0x24>)
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b348:	4b05      	ldr	r3, [pc, #20]	; (800b360 <vTaskInternalSetTimeOutState+0x28>)
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	605a      	str	r2, [r3, #4]
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr
 800b35c:	20001170 	.word	0x20001170
 800b360:	2000115c 	.word	0x2000115c

0800b364 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b088      	sub	sp, #32
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d10a      	bne.n	800b38a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b378:	f383 8811 	msr	BASEPRI, r3
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	613b      	str	r3, [r7, #16]
}
 800b386:	bf00      	nop
 800b388:	e7fe      	b.n	800b388 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d10a      	bne.n	800b3a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b394:	f383 8811 	msr	BASEPRI, r3
 800b398:	f3bf 8f6f 	isb	sy
 800b39c:	f3bf 8f4f 	dsb	sy
 800b3a0:	60fb      	str	r3, [r7, #12]
}
 800b3a2:	bf00      	nop
 800b3a4:	e7fe      	b.n	800b3a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b3a6:	f000 fe7d 	bl	800c0a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b3aa:	4b1d      	ldr	r3, [pc, #116]	; (800b420 <xTaskCheckForTimeOut+0xbc>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	69ba      	ldr	r2, [r7, #24]
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3c2:	d102      	bne.n	800b3ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	61fb      	str	r3, [r7, #28]
 800b3c8:	e023      	b.n	800b412 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	4b15      	ldr	r3, [pc, #84]	; (800b424 <xTaskCheckForTimeOut+0xc0>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d007      	beq.n	800b3e6 <xTaskCheckForTimeOut+0x82>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	69ba      	ldr	r2, [r7, #24]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d302      	bcc.n	800b3e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	61fb      	str	r3, [r7, #28]
 800b3e4:	e015      	b.n	800b412 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	697a      	ldr	r2, [r7, #20]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d20b      	bcs.n	800b408 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	1ad2      	subs	r2, r2, r3
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7ff ff9b 	bl	800b338 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b402:	2300      	movs	r3, #0
 800b404:	61fb      	str	r3, [r7, #28]
 800b406:	e004      	b.n	800b412 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	2200      	movs	r2, #0
 800b40c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b40e:	2301      	movs	r3, #1
 800b410:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b412:	f000 fe77 	bl	800c104 <vPortExitCritical>

	return xReturn;
 800b416:	69fb      	ldr	r3, [r7, #28]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3720      	adds	r7, #32
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	2000115c 	.word	0x2000115c
 800b424:	20001170 	.word	0x20001170

0800b428 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b428:	b480      	push	{r7}
 800b42a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b42c:	4b03      	ldr	r3, [pc, #12]	; (800b43c <vTaskMissedYield+0x14>)
 800b42e:	2201      	movs	r2, #1
 800b430:	601a      	str	r2, [r3, #0]
}
 800b432:	bf00      	nop
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr
 800b43c:	2000116c 	.word	0x2000116c

0800b440 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b448:	f000 f852 	bl	800b4f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b44c:	4b06      	ldr	r3, [pc, #24]	; (800b468 <prvIdleTask+0x28>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d9f9      	bls.n	800b448 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b454:	4b05      	ldr	r3, [pc, #20]	; (800b46c <prvIdleTask+0x2c>)
 800b456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b45a:	601a      	str	r2, [r3, #0]
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b464:	e7f0      	b.n	800b448 <prvIdleTask+0x8>
 800b466:	bf00      	nop
 800b468:	20000c88 	.word	0x20000c88
 800b46c:	e000ed04 	.word	0xe000ed04

0800b470 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b476:	2300      	movs	r3, #0
 800b478:	607b      	str	r3, [r7, #4]
 800b47a:	e00c      	b.n	800b496 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	4613      	mov	r3, r2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	4413      	add	r3, r2
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	4a12      	ldr	r2, [pc, #72]	; (800b4d0 <prvInitialiseTaskLists+0x60>)
 800b488:	4413      	add	r3, r2
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7fe fcca 	bl	8009e24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	3301      	adds	r3, #1
 800b494:	607b      	str	r3, [r7, #4]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2b37      	cmp	r3, #55	; 0x37
 800b49a:	d9ef      	bls.n	800b47c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b49c:	480d      	ldr	r0, [pc, #52]	; (800b4d4 <prvInitialiseTaskLists+0x64>)
 800b49e:	f7fe fcc1 	bl	8009e24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b4a2:	480d      	ldr	r0, [pc, #52]	; (800b4d8 <prvInitialiseTaskLists+0x68>)
 800b4a4:	f7fe fcbe 	bl	8009e24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b4a8:	480c      	ldr	r0, [pc, #48]	; (800b4dc <prvInitialiseTaskLists+0x6c>)
 800b4aa:	f7fe fcbb 	bl	8009e24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b4ae:	480c      	ldr	r0, [pc, #48]	; (800b4e0 <prvInitialiseTaskLists+0x70>)
 800b4b0:	f7fe fcb8 	bl	8009e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b4b4:	480b      	ldr	r0, [pc, #44]	; (800b4e4 <prvInitialiseTaskLists+0x74>)
 800b4b6:	f7fe fcb5 	bl	8009e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b4ba:	4b0b      	ldr	r3, [pc, #44]	; (800b4e8 <prvInitialiseTaskLists+0x78>)
 800b4bc:	4a05      	ldr	r2, [pc, #20]	; (800b4d4 <prvInitialiseTaskLists+0x64>)
 800b4be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b4c0:	4b0a      	ldr	r3, [pc, #40]	; (800b4ec <prvInitialiseTaskLists+0x7c>)
 800b4c2:	4a05      	ldr	r2, [pc, #20]	; (800b4d8 <prvInitialiseTaskLists+0x68>)
 800b4c4:	601a      	str	r2, [r3, #0]
}
 800b4c6:	bf00      	nop
 800b4c8:	3708      	adds	r7, #8
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	20000c88 	.word	0x20000c88
 800b4d4:	200010e8 	.word	0x200010e8
 800b4d8:	200010fc 	.word	0x200010fc
 800b4dc:	20001118 	.word	0x20001118
 800b4e0:	2000112c 	.word	0x2000112c
 800b4e4:	20001144 	.word	0x20001144
 800b4e8:	20001110 	.word	0x20001110
 800b4ec:	20001114 	.word	0x20001114

0800b4f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4f6:	e019      	b.n	800b52c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b4f8:	f000 fdd4 	bl	800c0a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4fc:	4b10      	ldr	r3, [pc, #64]	; (800b540 <prvCheckTasksWaitingTermination+0x50>)
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	3304      	adds	r3, #4
 800b508:	4618      	mov	r0, r3
 800b50a:	f7fe fd15 	bl	8009f38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b50e:	4b0d      	ldr	r3, [pc, #52]	; (800b544 <prvCheckTasksWaitingTermination+0x54>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3b01      	subs	r3, #1
 800b514:	4a0b      	ldr	r2, [pc, #44]	; (800b544 <prvCheckTasksWaitingTermination+0x54>)
 800b516:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b518:	4b0b      	ldr	r3, [pc, #44]	; (800b548 <prvCheckTasksWaitingTermination+0x58>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	3b01      	subs	r3, #1
 800b51e:	4a0a      	ldr	r2, [pc, #40]	; (800b548 <prvCheckTasksWaitingTermination+0x58>)
 800b520:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b522:	f000 fdef 	bl	800c104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f810 	bl	800b54c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b52c:	4b06      	ldr	r3, [pc, #24]	; (800b548 <prvCheckTasksWaitingTermination+0x58>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d1e1      	bne.n	800b4f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b534:	bf00      	nop
 800b536:	bf00      	nop
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	2000112c 	.word	0x2000112c
 800b544:	20001158 	.word	0x20001158
 800b548:	20001140 	.word	0x20001140

0800b54c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	3354      	adds	r3, #84	; 0x54
 800b558:	4618      	mov	r0, r3
 800b55a:	f001 fd53 	bl	800d004 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b564:	2b00      	cmp	r3, #0
 800b566:	d108      	bne.n	800b57a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56c:	4618      	mov	r0, r3
 800b56e:	f000 ff87 	bl	800c480 <vPortFree>
				vPortFree( pxTCB );
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 ff84 	bl	800c480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b578:	e018      	b.n	800b5ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b580:	2b01      	cmp	r3, #1
 800b582:	d103      	bne.n	800b58c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 ff7b 	bl	800c480 <vPortFree>
	}
 800b58a:	e00f      	b.n	800b5ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b592:	2b02      	cmp	r3, #2
 800b594:	d00a      	beq.n	800b5ac <prvDeleteTCB+0x60>
	__asm volatile
 800b596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59a:	f383 8811 	msr	BASEPRI, r3
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f3bf 8f4f 	dsb	sy
 800b5a6:	60fb      	str	r3, [r7, #12]
}
 800b5a8:	bf00      	nop
 800b5aa:	e7fe      	b.n	800b5aa <prvDeleteTCB+0x5e>
	}
 800b5ac:	bf00      	nop
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5ba:	4b0c      	ldr	r3, [pc, #48]	; (800b5ec <prvResetNextTaskUnblockTime+0x38>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d104      	bne.n	800b5ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b5c4:	4b0a      	ldr	r3, [pc, #40]	; (800b5f0 <prvResetNextTaskUnblockTime+0x3c>)
 800b5c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b5cc:	e008      	b.n	800b5e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ce:	4b07      	ldr	r3, [pc, #28]	; (800b5ec <prvResetNextTaskUnblockTime+0x38>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	4a04      	ldr	r2, [pc, #16]	; (800b5f0 <prvResetNextTaskUnblockTime+0x3c>)
 800b5de:	6013      	str	r3, [r2, #0]
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr
 800b5ec:	20001110 	.word	0x20001110
 800b5f0:	20001178 	.word	0x20001178

0800b5f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b5fa:	4b0b      	ldr	r3, [pc, #44]	; (800b628 <xTaskGetSchedulerState+0x34>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d102      	bne.n	800b608 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b602:	2301      	movs	r3, #1
 800b604:	607b      	str	r3, [r7, #4]
 800b606:	e008      	b.n	800b61a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b608:	4b08      	ldr	r3, [pc, #32]	; (800b62c <xTaskGetSchedulerState+0x38>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d102      	bne.n	800b616 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b610:	2302      	movs	r3, #2
 800b612:	607b      	str	r3, [r7, #4]
 800b614:	e001      	b.n	800b61a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b616:	2300      	movs	r3, #0
 800b618:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b61a:	687b      	ldr	r3, [r7, #4]
	}
 800b61c:	4618      	mov	r0, r3
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr
 800b628:	20001164 	.word	0x20001164
 800b62c:	20001180 	.word	0x20001180

0800b630 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b63c:	2300      	movs	r3, #0
 800b63e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d056      	beq.n	800b6f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b646:	4b2e      	ldr	r3, [pc, #184]	; (800b700 <xTaskPriorityDisinherit+0xd0>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	693a      	ldr	r2, [r7, #16]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d00a      	beq.n	800b666 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b654:	f383 8811 	msr	BASEPRI, r3
 800b658:	f3bf 8f6f 	isb	sy
 800b65c:	f3bf 8f4f 	dsb	sy
 800b660:	60fb      	str	r3, [r7, #12]
}
 800b662:	bf00      	nop
 800b664:	e7fe      	b.n	800b664 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10a      	bne.n	800b684 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	60bb      	str	r3, [r7, #8]
}
 800b680:	bf00      	nop
 800b682:	e7fe      	b.n	800b682 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b688:	1e5a      	subs	r2, r3, #1
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b696:	429a      	cmp	r2, r3
 800b698:	d02c      	beq.n	800b6f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d128      	bne.n	800b6f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7fe fc46 	bl	8009f38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c4:	4b0f      	ldr	r3, [pc, #60]	; (800b704 <xTaskPriorityDisinherit+0xd4>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d903      	bls.n	800b6d4 <xTaskPriorityDisinherit+0xa4>
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d0:	4a0c      	ldr	r2, [pc, #48]	; (800b704 <xTaskPriorityDisinherit+0xd4>)
 800b6d2:	6013      	str	r3, [r2, #0]
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d8:	4613      	mov	r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4413      	add	r3, r2
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	4a09      	ldr	r2, [pc, #36]	; (800b708 <xTaskPriorityDisinherit+0xd8>)
 800b6e2:	441a      	add	r2, r3
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	3304      	adds	r3, #4
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	4610      	mov	r0, r2
 800b6ec:	f7fe fbc7 	bl	8009e7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b6f4:	697b      	ldr	r3, [r7, #20]
	}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3718      	adds	r7, #24
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	20000c84 	.word	0x20000c84
 800b704:	20001160 	.word	0x20001160
 800b708:	20000c88 	.word	0x20000c88

0800b70c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b716:	4b21      	ldr	r3, [pc, #132]	; (800b79c <prvAddCurrentTaskToDelayedList+0x90>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b71c:	4b20      	ldr	r3, [pc, #128]	; (800b7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3304      	adds	r3, #4
 800b722:	4618      	mov	r0, r3
 800b724:	f7fe fc08 	bl	8009f38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b72e:	d10a      	bne.n	800b746 <prvAddCurrentTaskToDelayedList+0x3a>
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d007      	beq.n	800b746 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b736:	4b1a      	ldr	r3, [pc, #104]	; (800b7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3304      	adds	r3, #4
 800b73c:	4619      	mov	r1, r3
 800b73e:	4819      	ldr	r0, [pc, #100]	; (800b7a4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b740:	f7fe fb9d 	bl	8009e7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b744:	e026      	b.n	800b794 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	4413      	add	r3, r2
 800b74c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b74e:	4b14      	ldr	r3, [pc, #80]	; (800b7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	68ba      	ldr	r2, [r7, #8]
 800b754:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b756:	68ba      	ldr	r2, [r7, #8]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d209      	bcs.n	800b772 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b75e:	4b12      	ldr	r3, [pc, #72]	; (800b7a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	4b0f      	ldr	r3, [pc, #60]	; (800b7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	3304      	adds	r3, #4
 800b768:	4619      	mov	r1, r3
 800b76a:	4610      	mov	r0, r2
 800b76c:	f7fe fbab 	bl	8009ec6 <vListInsert>
}
 800b770:	e010      	b.n	800b794 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b772:	4b0e      	ldr	r3, [pc, #56]	; (800b7ac <prvAddCurrentTaskToDelayedList+0xa0>)
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	4b0a      	ldr	r3, [pc, #40]	; (800b7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	3304      	adds	r3, #4
 800b77c:	4619      	mov	r1, r3
 800b77e:	4610      	mov	r0, r2
 800b780:	f7fe fba1 	bl	8009ec6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b784:	4b0a      	ldr	r3, [pc, #40]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d202      	bcs.n	800b794 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b78e:	4a08      	ldr	r2, [pc, #32]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	6013      	str	r3, [r2, #0]
}
 800b794:	bf00      	nop
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	2000115c 	.word	0x2000115c
 800b7a0:	20000c84 	.word	0x20000c84
 800b7a4:	20001144 	.word	0x20001144
 800b7a8:	20001114 	.word	0x20001114
 800b7ac:	20001110 	.word	0x20001110
 800b7b0:	20001178 	.word	0x20001178

0800b7b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b08a      	sub	sp, #40	; 0x28
 800b7b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b7be:	f000 fb07 	bl	800bdd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b7c2:	4b1c      	ldr	r3, [pc, #112]	; (800b834 <xTimerCreateTimerTask+0x80>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d021      	beq.n	800b80e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b7d2:	1d3a      	adds	r2, r7, #4
 800b7d4:	f107 0108 	add.w	r1, r7, #8
 800b7d8:	f107 030c 	add.w	r3, r7, #12
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7fe fb07 	bl	8009df0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b7e2:	6879      	ldr	r1, [r7, #4]
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	9202      	str	r2, [sp, #8]
 800b7ea:	9301      	str	r3, [sp, #4]
 800b7ec:	2302      	movs	r3, #2
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	460a      	mov	r2, r1
 800b7f4:	4910      	ldr	r1, [pc, #64]	; (800b838 <xTimerCreateTimerTask+0x84>)
 800b7f6:	4811      	ldr	r0, [pc, #68]	; (800b83c <xTimerCreateTimerTask+0x88>)
 800b7f8:	f7ff f8b4 	bl	800a964 <xTaskCreateStatic>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	4a10      	ldr	r2, [pc, #64]	; (800b840 <xTimerCreateTimerTask+0x8c>)
 800b800:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b802:	4b0f      	ldr	r3, [pc, #60]	; (800b840 <xTimerCreateTimerTask+0x8c>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d001      	beq.n	800b80e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b80a:	2301      	movs	r3, #1
 800b80c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d10a      	bne.n	800b82a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b818:	f383 8811 	msr	BASEPRI, r3
 800b81c:	f3bf 8f6f 	isb	sy
 800b820:	f3bf 8f4f 	dsb	sy
 800b824:	613b      	str	r3, [r7, #16]
}
 800b826:	bf00      	nop
 800b828:	e7fe      	b.n	800b828 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b82a:	697b      	ldr	r3, [r7, #20]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3718      	adds	r7, #24
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	200011b4 	.word	0x200011b4
 800b838:	0800d1a4 	.word	0x0800d1a4
 800b83c:	0800b979 	.word	0x0800b979
 800b840:	200011b8 	.word	0x200011b8

0800b844 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b08a      	sub	sp, #40	; 0x28
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	607a      	str	r2, [r7, #4]
 800b850:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b852:	2300      	movs	r3, #0
 800b854:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d10a      	bne.n	800b872 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b860:	f383 8811 	msr	BASEPRI, r3
 800b864:	f3bf 8f6f 	isb	sy
 800b868:	f3bf 8f4f 	dsb	sy
 800b86c:	623b      	str	r3, [r7, #32]
}
 800b86e:	bf00      	nop
 800b870:	e7fe      	b.n	800b870 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b872:	4b1a      	ldr	r3, [pc, #104]	; (800b8dc <xTimerGenericCommand+0x98>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d02a      	beq.n	800b8d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	2b05      	cmp	r3, #5
 800b88a:	dc18      	bgt.n	800b8be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b88c:	f7ff feb2 	bl	800b5f4 <xTaskGetSchedulerState>
 800b890:	4603      	mov	r3, r0
 800b892:	2b02      	cmp	r3, #2
 800b894:	d109      	bne.n	800b8aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b896:	4b11      	ldr	r3, [pc, #68]	; (800b8dc <xTimerGenericCommand+0x98>)
 800b898:	6818      	ldr	r0, [r3, #0]
 800b89a:	f107 0110 	add.w	r1, r7, #16
 800b89e:	2300      	movs	r3, #0
 800b8a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8a2:	f7fe fc77 	bl	800a194 <xQueueGenericSend>
 800b8a6:	6278      	str	r0, [r7, #36]	; 0x24
 800b8a8:	e012      	b.n	800b8d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b8aa:	4b0c      	ldr	r3, [pc, #48]	; (800b8dc <xTimerGenericCommand+0x98>)
 800b8ac:	6818      	ldr	r0, [r3, #0]
 800b8ae:	f107 0110 	add.w	r1, r7, #16
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f7fe fc6d 	bl	800a194 <xQueueGenericSend>
 800b8ba:	6278      	str	r0, [r7, #36]	; 0x24
 800b8bc:	e008      	b.n	800b8d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b8be:	4b07      	ldr	r3, [pc, #28]	; (800b8dc <xTimerGenericCommand+0x98>)
 800b8c0:	6818      	ldr	r0, [r3, #0]
 800b8c2:	f107 0110 	add.w	r1, r7, #16
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	683a      	ldr	r2, [r7, #0]
 800b8ca:	f7fe fd61 	bl	800a390 <xQueueGenericSendFromISR>
 800b8ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3728      	adds	r7, #40	; 0x28
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	200011b4 	.word	0x200011b4

0800b8e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b088      	sub	sp, #32
 800b8e4:	af02      	add	r7, sp, #8
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8ea:	4b22      	ldr	r3, [pc, #136]	; (800b974 <prvProcessExpiredTimer+0x94>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fe fb1d 	bl	8009f38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b904:	f003 0304 	and.w	r3, r3, #4
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d022      	beq.n	800b952 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	699a      	ldr	r2, [r3, #24]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	18d1      	adds	r1, r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	683a      	ldr	r2, [r7, #0]
 800b918:	6978      	ldr	r0, [r7, #20]
 800b91a:	f000 f8d1 	bl	800bac0 <prvInsertTimerInActiveList>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d01f      	beq.n	800b964 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b924:	2300      	movs	r3, #0
 800b926:	9300      	str	r3, [sp, #0]
 800b928:	2300      	movs	r3, #0
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	2100      	movs	r1, #0
 800b92e:	6978      	ldr	r0, [r7, #20]
 800b930:	f7ff ff88 	bl	800b844 <xTimerGenericCommand>
 800b934:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d113      	bne.n	800b964 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	60fb      	str	r3, [r7, #12]
}
 800b94e:	bf00      	nop
 800b950:	e7fe      	b.n	800b950 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b958:	f023 0301 	bic.w	r3, r3, #1
 800b95c:	b2da      	uxtb	r2, r3
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	6a1b      	ldr	r3, [r3, #32]
 800b968:	6978      	ldr	r0, [r7, #20]
 800b96a:	4798      	blx	r3
}
 800b96c:	bf00      	nop
 800b96e:	3718      	adds	r7, #24
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}
 800b974:	200011ac 	.word	0x200011ac

0800b978 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b980:	f107 0308 	add.w	r3, r7, #8
 800b984:	4618      	mov	r0, r3
 800b986:	f000 f857 	bl	800ba38 <prvGetNextExpireTime>
 800b98a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	4619      	mov	r1, r3
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f000 f803 	bl	800b99c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b996:	f000 f8d5 	bl	800bb44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b99a:	e7f1      	b.n	800b980 <prvTimerTask+0x8>

0800b99c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b9a6:	f7ff fa39 	bl	800ae1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9aa:	f107 0308 	add.w	r3, r7, #8
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f000 f866 	bl	800ba80 <prvSampleTimeNow>
 800b9b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d130      	bne.n	800ba1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d10a      	bne.n	800b9d8 <prvProcessTimerOrBlockTask+0x3c>
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d806      	bhi.n	800b9d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b9ca:	f7ff fa35 	bl	800ae38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b9ce:	68f9      	ldr	r1, [r7, #12]
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f7ff ff85 	bl	800b8e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b9d6:	e024      	b.n	800ba22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d008      	beq.n	800b9f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b9de:	4b13      	ldr	r3, [pc, #76]	; (800ba2c <prvProcessTimerOrBlockTask+0x90>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d101      	bne.n	800b9ec <prvProcessTimerOrBlockTask+0x50>
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e000      	b.n	800b9ee <prvProcessTimerOrBlockTask+0x52>
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b9f0:	4b0f      	ldr	r3, [pc, #60]	; (800ba30 <prvProcessTimerOrBlockTask+0x94>)
 800b9f2:	6818      	ldr	r0, [r3, #0]
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	f7fe ff7d 	bl	800a8fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba02:	f7ff fa19 	bl	800ae38 <xTaskResumeAll>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d10a      	bne.n	800ba22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ba0c:	4b09      	ldr	r3, [pc, #36]	; (800ba34 <prvProcessTimerOrBlockTask+0x98>)
 800ba0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba12:	601a      	str	r2, [r3, #0]
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	f3bf 8f6f 	isb	sy
}
 800ba1c:	e001      	b.n	800ba22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ba1e:	f7ff fa0b 	bl	800ae38 <xTaskResumeAll>
}
 800ba22:	bf00      	nop
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	200011b0 	.word	0x200011b0
 800ba30:	200011b4 	.word	0x200011b4
 800ba34:	e000ed04 	.word	0xe000ed04

0800ba38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ba40:	4b0e      	ldr	r3, [pc, #56]	; (800ba7c <prvGetNextExpireTime+0x44>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d101      	bne.n	800ba4e <prvGetNextExpireTime+0x16>
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	e000      	b.n	800ba50 <prvGetNextExpireTime+0x18>
 800ba4e:	2200      	movs	r2, #0
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d105      	bne.n	800ba68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba5c:	4b07      	ldr	r3, [pc, #28]	; (800ba7c <prvGetNextExpireTime+0x44>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	60fb      	str	r3, [r7, #12]
 800ba66:	e001      	b.n	800ba6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3714      	adds	r7, #20
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	200011ac 	.word	0x200011ac

0800ba80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ba88:	f7ff fa74 	bl	800af74 <xTaskGetTickCount>
 800ba8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ba8e:	4b0b      	ldr	r3, [pc, #44]	; (800babc <prvSampleTimeNow+0x3c>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d205      	bcs.n	800baa4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ba98:	f000 f936 	bl	800bd08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	601a      	str	r2, [r3, #0]
 800baa2:	e002      	b.n	800baaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800baaa:	4a04      	ldr	r2, [pc, #16]	; (800babc <prvSampleTimeNow+0x3c>)
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bab0:	68fb      	ldr	r3, [r7, #12]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	200011bc 	.word	0x200011bc

0800bac0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
 800bacc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bace:	2300      	movs	r3, #0
 800bad0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	68ba      	ldr	r2, [r7, #8]
 800bad6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d812      	bhi.n	800bb0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	1ad2      	subs	r2, r2, r3
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	699b      	ldr	r3, [r3, #24]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d302      	bcc.n	800bafa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800baf4:	2301      	movs	r3, #1
 800baf6:	617b      	str	r3, [r7, #20]
 800baf8:	e01b      	b.n	800bb32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bafa:	4b10      	ldr	r3, [pc, #64]	; (800bb3c <prvInsertTimerInActiveList+0x7c>)
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	3304      	adds	r3, #4
 800bb02:	4619      	mov	r1, r3
 800bb04:	4610      	mov	r0, r2
 800bb06:	f7fe f9de 	bl	8009ec6 <vListInsert>
 800bb0a:	e012      	b.n	800bb32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d206      	bcs.n	800bb22 <prvInsertTimerInActiveList+0x62>
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d302      	bcc.n	800bb22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	617b      	str	r3, [r7, #20]
 800bb20:	e007      	b.n	800bb32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb22:	4b07      	ldr	r3, [pc, #28]	; (800bb40 <prvInsertTimerInActiveList+0x80>)
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	3304      	adds	r3, #4
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	4610      	mov	r0, r2
 800bb2e:	f7fe f9ca 	bl	8009ec6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bb32:	697b      	ldr	r3, [r7, #20]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3718      	adds	r7, #24
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	200011b0 	.word	0x200011b0
 800bb40:	200011ac 	.word	0x200011ac

0800bb44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b08e      	sub	sp, #56	; 0x38
 800bb48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb4a:	e0ca      	b.n	800bce2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	da18      	bge.n	800bb84 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bb52:	1d3b      	adds	r3, r7, #4
 800bb54:	3304      	adds	r3, #4
 800bb56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10a      	bne.n	800bb74 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb62:	f383 8811 	msr	BASEPRI, r3
 800bb66:	f3bf 8f6f 	isb	sy
 800bb6a:	f3bf 8f4f 	dsb	sy
 800bb6e:	61fb      	str	r3, [r7, #28]
}
 800bb70:	bf00      	nop
 800bb72:	e7fe      	b.n	800bb72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb7a:	6850      	ldr	r0, [r2, #4]
 800bb7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb7e:	6892      	ldr	r2, [r2, #8]
 800bb80:	4611      	mov	r1, r2
 800bb82:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f2c0 80aa 	blt.w	800bce0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb92:	695b      	ldr	r3, [r3, #20]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d004      	beq.n	800bba2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9a:	3304      	adds	r3, #4
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7fe f9cb 	bl	8009f38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bba2:	463b      	mov	r3, r7
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7ff ff6b 	bl	800ba80 <prvSampleTimeNow>
 800bbaa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2b09      	cmp	r3, #9
 800bbb0:	f200 8097 	bhi.w	800bce2 <prvProcessReceivedCommands+0x19e>
 800bbb4:	a201      	add	r2, pc, #4	; (adr r2, 800bbbc <prvProcessReceivedCommands+0x78>)
 800bbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbba:	bf00      	nop
 800bbbc:	0800bbe5 	.word	0x0800bbe5
 800bbc0:	0800bbe5 	.word	0x0800bbe5
 800bbc4:	0800bbe5 	.word	0x0800bbe5
 800bbc8:	0800bc59 	.word	0x0800bc59
 800bbcc:	0800bc6d 	.word	0x0800bc6d
 800bbd0:	0800bcb7 	.word	0x0800bcb7
 800bbd4:	0800bbe5 	.word	0x0800bbe5
 800bbd8:	0800bbe5 	.word	0x0800bbe5
 800bbdc:	0800bc59 	.word	0x0800bc59
 800bbe0:	0800bc6d 	.word	0x0800bc6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbea:	f043 0301 	orr.w	r3, r3, #1
 800bbee:	b2da      	uxtb	r2, r3
 800bbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bbf6:	68ba      	ldr	r2, [r7, #8]
 800bbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfa:	699b      	ldr	r3, [r3, #24]
 800bbfc:	18d1      	adds	r1, r2, r3
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc04:	f7ff ff5c 	bl	800bac0 <prvInsertTimerInActiveList>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d069      	beq.n	800bce2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc10:	6a1b      	ldr	r3, [r3, #32]
 800bc12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc1c:	f003 0304 	and.w	r3, r3, #4
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d05e      	beq.n	800bce2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bc24:	68ba      	ldr	r2, [r7, #8]
 800bc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc28:	699b      	ldr	r3, [r3, #24]
 800bc2a:	441a      	add	r2, r3
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	2300      	movs	r3, #0
 800bc32:	2100      	movs	r1, #0
 800bc34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc36:	f7ff fe05 	bl	800b844 <xTimerGenericCommand>
 800bc3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bc3c:	6a3b      	ldr	r3, [r7, #32]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d14f      	bne.n	800bce2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	61bb      	str	r3, [r7, #24]
}
 800bc54:	bf00      	nop
 800bc56:	e7fe      	b.n	800bc56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc5e:	f023 0301 	bic.w	r3, r3, #1
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bc6a:	e03a      	b.n	800bce2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc72:	f043 0301 	orr.w	r3, r3, #1
 800bc76:	b2da      	uxtb	r2, r3
 800bc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bc7e:	68ba      	ldr	r2, [r7, #8]
 800bc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc86:	699b      	ldr	r3, [r3, #24]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10a      	bne.n	800bca2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc90:	f383 8811 	msr	BASEPRI, r3
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	617b      	str	r3, [r7, #20]
}
 800bc9e:	bf00      	nop
 800bca0:	e7fe      	b.n	800bca0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca4:	699a      	ldr	r2, [r3, #24]
 800bca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca8:	18d1      	adds	r1, r2, r3
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcb0:	f7ff ff06 	bl	800bac0 <prvInsertTimerInActiveList>
					break;
 800bcb4:	e015      	b.n	800bce2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcbc:	f003 0302 	and.w	r3, r3, #2
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d103      	bne.n	800bccc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bcc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcc6:	f000 fbdb 	bl	800c480 <vPortFree>
 800bcca:	e00a      	b.n	800bce2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcd2:	f023 0301 	bic.w	r3, r3, #1
 800bcd6:	b2da      	uxtb	r2, r3
 800bcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bcde:	e000      	b.n	800bce2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bce0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bce2:	4b08      	ldr	r3, [pc, #32]	; (800bd04 <prvProcessReceivedCommands+0x1c0>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	1d39      	adds	r1, r7, #4
 800bce8:	2200      	movs	r2, #0
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fe fbec 	bl	800a4c8 <xQueueReceive>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f47f af2a 	bne.w	800bb4c <prvProcessReceivedCommands+0x8>
	}
}
 800bcf8:	bf00      	nop
 800bcfa:	bf00      	nop
 800bcfc:	3730      	adds	r7, #48	; 0x30
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	200011b4 	.word	0x200011b4

0800bd08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b088      	sub	sp, #32
 800bd0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd0e:	e048      	b.n	800bda2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd10:	4b2d      	ldr	r3, [pc, #180]	; (800bdc8 <prvSwitchTimerLists+0xc0>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd1a:	4b2b      	ldr	r3, [pc, #172]	; (800bdc8 <prvSwitchTimerLists+0xc0>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	3304      	adds	r3, #4
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fe f905 	bl	8009f38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6a1b      	ldr	r3, [r3, #32]
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd3c:	f003 0304 	and.w	r3, r3, #4
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d02e      	beq.n	800bda2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	699b      	ldr	r3, [r3, #24]
 800bd48:	693a      	ldr	r2, [r7, #16]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bd4e:	68ba      	ldr	r2, [r7, #8]
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d90e      	bls.n	800bd74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	68ba      	ldr	r2, [r7, #8]
 800bd5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd62:	4b19      	ldr	r3, [pc, #100]	; (800bdc8 <prvSwitchTimerLists+0xc0>)
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	3304      	adds	r3, #4
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	4610      	mov	r0, r2
 800bd6e:	f7fe f8aa 	bl	8009ec6 <vListInsert>
 800bd72:	e016      	b.n	800bda2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd74:	2300      	movs	r3, #0
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	2300      	movs	r3, #0
 800bd7a:	693a      	ldr	r2, [r7, #16]
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f7ff fd60 	bl	800b844 <xTimerGenericCommand>
 800bd84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d10a      	bne.n	800bda2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd90:	f383 8811 	msr	BASEPRI, r3
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	603b      	str	r3, [r7, #0]
}
 800bd9e:	bf00      	nop
 800bda0:	e7fe      	b.n	800bda0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bda2:	4b09      	ldr	r3, [pc, #36]	; (800bdc8 <prvSwitchTimerLists+0xc0>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d1b1      	bne.n	800bd10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bdac:	4b06      	ldr	r3, [pc, #24]	; (800bdc8 <prvSwitchTimerLists+0xc0>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bdb2:	4b06      	ldr	r3, [pc, #24]	; (800bdcc <prvSwitchTimerLists+0xc4>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a04      	ldr	r2, [pc, #16]	; (800bdc8 <prvSwitchTimerLists+0xc0>)
 800bdb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bdba:	4a04      	ldr	r2, [pc, #16]	; (800bdcc <prvSwitchTimerLists+0xc4>)
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	6013      	str	r3, [r2, #0]
}
 800bdc0:	bf00      	nop
 800bdc2:	3718      	adds	r7, #24
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	200011ac 	.word	0x200011ac
 800bdcc:	200011b0 	.word	0x200011b0

0800bdd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bdd6:	f000 f965 	bl	800c0a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bdda:	4b15      	ldr	r3, [pc, #84]	; (800be30 <prvCheckForValidListAndQueue+0x60>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d120      	bne.n	800be24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bde2:	4814      	ldr	r0, [pc, #80]	; (800be34 <prvCheckForValidListAndQueue+0x64>)
 800bde4:	f7fe f81e 	bl	8009e24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bde8:	4813      	ldr	r0, [pc, #76]	; (800be38 <prvCheckForValidListAndQueue+0x68>)
 800bdea:	f7fe f81b 	bl	8009e24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bdee:	4b13      	ldr	r3, [pc, #76]	; (800be3c <prvCheckForValidListAndQueue+0x6c>)
 800bdf0:	4a10      	ldr	r2, [pc, #64]	; (800be34 <prvCheckForValidListAndQueue+0x64>)
 800bdf2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bdf4:	4b12      	ldr	r3, [pc, #72]	; (800be40 <prvCheckForValidListAndQueue+0x70>)
 800bdf6:	4a10      	ldr	r2, [pc, #64]	; (800be38 <prvCheckForValidListAndQueue+0x68>)
 800bdf8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	9300      	str	r3, [sp, #0]
 800bdfe:	4b11      	ldr	r3, [pc, #68]	; (800be44 <prvCheckForValidListAndQueue+0x74>)
 800be00:	4a11      	ldr	r2, [pc, #68]	; (800be48 <prvCheckForValidListAndQueue+0x78>)
 800be02:	2110      	movs	r1, #16
 800be04:	200a      	movs	r0, #10
 800be06:	f7fe f929 	bl	800a05c <xQueueGenericCreateStatic>
 800be0a:	4603      	mov	r3, r0
 800be0c:	4a08      	ldr	r2, [pc, #32]	; (800be30 <prvCheckForValidListAndQueue+0x60>)
 800be0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800be10:	4b07      	ldr	r3, [pc, #28]	; (800be30 <prvCheckForValidListAndQueue+0x60>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d005      	beq.n	800be24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800be18:	4b05      	ldr	r3, [pc, #20]	; (800be30 <prvCheckForValidListAndQueue+0x60>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	490b      	ldr	r1, [pc, #44]	; (800be4c <prvCheckForValidListAndQueue+0x7c>)
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fe fd42 	bl	800a8a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be24:	f000 f96e 	bl	800c104 <vPortExitCritical>
}
 800be28:	bf00      	nop
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	200011b4 	.word	0x200011b4
 800be34:	20001184 	.word	0x20001184
 800be38:	20001198 	.word	0x20001198
 800be3c:	200011ac 	.word	0x200011ac
 800be40:	200011b0 	.word	0x200011b0
 800be44:	20001260 	.word	0x20001260
 800be48:	200011c0 	.word	0x200011c0
 800be4c:	0800d1ac 	.word	0x0800d1ac

0800be50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	3b04      	subs	r3, #4
 800be60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800be68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	3b04      	subs	r3, #4
 800be6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	f023 0201 	bic.w	r2, r3, #1
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	3b04      	subs	r3, #4
 800be7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be80:	4a0c      	ldr	r2, [pc, #48]	; (800beb4 <pxPortInitialiseStack+0x64>)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	3b14      	subs	r3, #20
 800be8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	3b04      	subs	r3, #4
 800be96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f06f 0202 	mvn.w	r2, #2
 800be9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	3b20      	subs	r3, #32
 800bea4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bea6:	68fb      	ldr	r3, [r7, #12]
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3714      	adds	r7, #20
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr
 800beb4:	0800beb9 	.word	0x0800beb9

0800beb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800beb8:	b480      	push	{r7}
 800beba:	b085      	sub	sp, #20
 800bebc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bebe:	2300      	movs	r3, #0
 800bec0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bec2:	4b12      	ldr	r3, [pc, #72]	; (800bf0c <prvTaskExitError+0x54>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800beca:	d00a      	beq.n	800bee2 <prvTaskExitError+0x2a>
	__asm volatile
 800becc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed0:	f383 8811 	msr	BASEPRI, r3
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	60fb      	str	r3, [r7, #12]
}
 800bede:	bf00      	nop
 800bee0:	e7fe      	b.n	800bee0 <prvTaskExitError+0x28>
	__asm volatile
 800bee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee6:	f383 8811 	msr	BASEPRI, r3
 800beea:	f3bf 8f6f 	isb	sy
 800beee:	f3bf 8f4f 	dsb	sy
 800bef2:	60bb      	str	r3, [r7, #8]
}
 800bef4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bef6:	bf00      	nop
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d0fc      	beq.n	800bef8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800befe:	bf00      	nop
 800bf00:	bf00      	nop
 800bf02:	3714      	adds	r7, #20
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr
 800bf0c:	20000070 	.word	0x20000070

0800bf10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf10:	4b07      	ldr	r3, [pc, #28]	; (800bf30 <pxCurrentTCBConst2>)
 800bf12:	6819      	ldr	r1, [r3, #0]
 800bf14:	6808      	ldr	r0, [r1, #0]
 800bf16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf1a:	f380 8809 	msr	PSP, r0
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	f04f 0000 	mov.w	r0, #0
 800bf26:	f380 8811 	msr	BASEPRI, r0
 800bf2a:	4770      	bx	lr
 800bf2c:	f3af 8000 	nop.w

0800bf30 <pxCurrentTCBConst2>:
 800bf30:	20000c84 	.word	0x20000c84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf34:	bf00      	nop
 800bf36:	bf00      	nop

0800bf38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf38:	4808      	ldr	r0, [pc, #32]	; (800bf5c <prvPortStartFirstTask+0x24>)
 800bf3a:	6800      	ldr	r0, [r0, #0]
 800bf3c:	6800      	ldr	r0, [r0, #0]
 800bf3e:	f380 8808 	msr	MSP, r0
 800bf42:	f04f 0000 	mov.w	r0, #0
 800bf46:	f380 8814 	msr	CONTROL, r0
 800bf4a:	b662      	cpsie	i
 800bf4c:	b661      	cpsie	f
 800bf4e:	f3bf 8f4f 	dsb	sy
 800bf52:	f3bf 8f6f 	isb	sy
 800bf56:	df00      	svc	0
 800bf58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf5a:	bf00      	nop
 800bf5c:	e000ed08 	.word	0xe000ed08

0800bf60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf66:	4b46      	ldr	r3, [pc, #280]	; (800c080 <xPortStartScheduler+0x120>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a46      	ldr	r2, [pc, #280]	; (800c084 <xPortStartScheduler+0x124>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d10a      	bne.n	800bf86 <xPortStartScheduler+0x26>
	__asm volatile
 800bf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf74:	f383 8811 	msr	BASEPRI, r3
 800bf78:	f3bf 8f6f 	isb	sy
 800bf7c:	f3bf 8f4f 	dsb	sy
 800bf80:	613b      	str	r3, [r7, #16]
}
 800bf82:	bf00      	nop
 800bf84:	e7fe      	b.n	800bf84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bf86:	4b3e      	ldr	r3, [pc, #248]	; (800c080 <xPortStartScheduler+0x120>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a3f      	ldr	r2, [pc, #252]	; (800c088 <xPortStartScheduler+0x128>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d10a      	bne.n	800bfa6 <xPortStartScheduler+0x46>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	60fb      	str	r3, [r7, #12]
}
 800bfa2:	bf00      	nop
 800bfa4:	e7fe      	b.n	800bfa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bfa6:	4b39      	ldr	r3, [pc, #228]	; (800c08c <xPortStartScheduler+0x12c>)
 800bfa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	22ff      	movs	r2, #255	; 0xff
 800bfb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bfc0:	78fb      	ldrb	r3, [r7, #3]
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bfc8:	b2da      	uxtb	r2, r3
 800bfca:	4b31      	ldr	r3, [pc, #196]	; (800c090 <xPortStartScheduler+0x130>)
 800bfcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bfce:	4b31      	ldr	r3, [pc, #196]	; (800c094 <xPortStartScheduler+0x134>)
 800bfd0:	2207      	movs	r2, #7
 800bfd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfd4:	e009      	b.n	800bfea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bfd6:	4b2f      	ldr	r3, [pc, #188]	; (800c094 <xPortStartScheduler+0x134>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	4a2d      	ldr	r2, [pc, #180]	; (800c094 <xPortStartScheduler+0x134>)
 800bfde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bfe0:	78fb      	ldrb	r3, [r7, #3]
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	005b      	lsls	r3, r3, #1
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfea:	78fb      	ldrb	r3, [r7, #3]
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bff2:	2b80      	cmp	r3, #128	; 0x80
 800bff4:	d0ef      	beq.n	800bfd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bff6:	4b27      	ldr	r3, [pc, #156]	; (800c094 <xPortStartScheduler+0x134>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f1c3 0307 	rsb	r3, r3, #7
 800bffe:	2b04      	cmp	r3, #4
 800c000:	d00a      	beq.n	800c018 <xPortStartScheduler+0xb8>
	__asm volatile
 800c002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c006:	f383 8811 	msr	BASEPRI, r3
 800c00a:	f3bf 8f6f 	isb	sy
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	60bb      	str	r3, [r7, #8]
}
 800c014:	bf00      	nop
 800c016:	e7fe      	b.n	800c016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c018:	4b1e      	ldr	r3, [pc, #120]	; (800c094 <xPortStartScheduler+0x134>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	021b      	lsls	r3, r3, #8
 800c01e:	4a1d      	ldr	r2, [pc, #116]	; (800c094 <xPortStartScheduler+0x134>)
 800c020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c022:	4b1c      	ldr	r3, [pc, #112]	; (800c094 <xPortStartScheduler+0x134>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c02a:	4a1a      	ldr	r2, [pc, #104]	; (800c094 <xPortStartScheduler+0x134>)
 800c02c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	b2da      	uxtb	r2, r3
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c036:	4b18      	ldr	r3, [pc, #96]	; (800c098 <xPortStartScheduler+0x138>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4a17      	ldr	r2, [pc, #92]	; (800c098 <xPortStartScheduler+0x138>)
 800c03c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c042:	4b15      	ldr	r3, [pc, #84]	; (800c098 <xPortStartScheduler+0x138>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a14      	ldr	r2, [pc, #80]	; (800c098 <xPortStartScheduler+0x138>)
 800c048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c04c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c04e:	f000 f8dd 	bl	800c20c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c052:	4b12      	ldr	r3, [pc, #72]	; (800c09c <xPortStartScheduler+0x13c>)
 800c054:	2200      	movs	r2, #0
 800c056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c058:	f000 f8fc 	bl	800c254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c05c:	4b10      	ldr	r3, [pc, #64]	; (800c0a0 <xPortStartScheduler+0x140>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a0f      	ldr	r2, [pc, #60]	; (800c0a0 <xPortStartScheduler+0x140>)
 800c062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c068:	f7ff ff66 	bl	800bf38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c06c:	f7ff f84c 	bl	800b108 <vTaskSwitchContext>
	prvTaskExitError();
 800c070:	f7ff ff22 	bl	800beb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c074:	2300      	movs	r3, #0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3718      	adds	r7, #24
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	e000ed00 	.word	0xe000ed00
 800c084:	410fc271 	.word	0x410fc271
 800c088:	410fc270 	.word	0x410fc270
 800c08c:	e000e400 	.word	0xe000e400
 800c090:	200012b0 	.word	0x200012b0
 800c094:	200012b4 	.word	0x200012b4
 800c098:	e000ed20 	.word	0xe000ed20
 800c09c:	20000070 	.word	0x20000070
 800c0a0:	e000ef34 	.word	0xe000ef34

0800c0a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
	__asm volatile
 800c0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	607b      	str	r3, [r7, #4]
}
 800c0bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c0be:	4b0f      	ldr	r3, [pc, #60]	; (800c0fc <vPortEnterCritical+0x58>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	4a0d      	ldr	r2, [pc, #52]	; (800c0fc <vPortEnterCritical+0x58>)
 800c0c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c0c8:	4b0c      	ldr	r3, [pc, #48]	; (800c0fc <vPortEnterCritical+0x58>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d10f      	bne.n	800c0f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c0d0:	4b0b      	ldr	r3, [pc, #44]	; (800c100 <vPortEnterCritical+0x5c>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00a      	beq.n	800c0f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	603b      	str	r3, [r7, #0]
}
 800c0ec:	bf00      	nop
 800c0ee:	e7fe      	b.n	800c0ee <vPortEnterCritical+0x4a>
	}
}
 800c0f0:	bf00      	nop
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr
 800c0fc:	20000070 	.word	0x20000070
 800c100:	e000ed04 	.word	0xe000ed04

0800c104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c10a:	4b12      	ldr	r3, [pc, #72]	; (800c154 <vPortExitCritical+0x50>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10a      	bne.n	800c128 <vPortExitCritical+0x24>
	__asm volatile
 800c112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	607b      	str	r3, [r7, #4]
}
 800c124:	bf00      	nop
 800c126:	e7fe      	b.n	800c126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c128:	4b0a      	ldr	r3, [pc, #40]	; (800c154 <vPortExitCritical+0x50>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	3b01      	subs	r3, #1
 800c12e:	4a09      	ldr	r2, [pc, #36]	; (800c154 <vPortExitCritical+0x50>)
 800c130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c132:	4b08      	ldr	r3, [pc, #32]	; (800c154 <vPortExitCritical+0x50>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d105      	bne.n	800c146 <vPortExitCritical+0x42>
 800c13a:	2300      	movs	r3, #0
 800c13c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	f383 8811 	msr	BASEPRI, r3
}
 800c144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c146:	bf00      	nop
 800c148:	370c      	adds	r7, #12
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr
 800c152:	bf00      	nop
 800c154:	20000070 	.word	0x20000070
	...

0800c160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c160:	f3ef 8009 	mrs	r0, PSP
 800c164:	f3bf 8f6f 	isb	sy
 800c168:	4b15      	ldr	r3, [pc, #84]	; (800c1c0 <pxCurrentTCBConst>)
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	f01e 0f10 	tst.w	lr, #16
 800c170:	bf08      	it	eq
 800c172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c17a:	6010      	str	r0, [r2, #0]
 800c17c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c180:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c184:	f380 8811 	msr	BASEPRI, r0
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	f3bf 8f6f 	isb	sy
 800c190:	f7fe ffba 	bl	800b108 <vTaskSwitchContext>
 800c194:	f04f 0000 	mov.w	r0, #0
 800c198:	f380 8811 	msr	BASEPRI, r0
 800c19c:	bc09      	pop	{r0, r3}
 800c19e:	6819      	ldr	r1, [r3, #0]
 800c1a0:	6808      	ldr	r0, [r1, #0]
 800c1a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a6:	f01e 0f10 	tst.w	lr, #16
 800c1aa:	bf08      	it	eq
 800c1ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c1b0:	f380 8809 	msr	PSP, r0
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop
 800c1bc:	f3af 8000 	nop.w

0800c1c0 <pxCurrentTCBConst>:
 800c1c0:	20000c84 	.word	0x20000c84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c1c4:	bf00      	nop
 800c1c6:	bf00      	nop

0800c1c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	607b      	str	r3, [r7, #4]
}
 800c1e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c1e2:	f7fe fed7 	bl	800af94 <xTaskIncrementTick>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d003      	beq.n	800c1f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c1ec:	4b06      	ldr	r3, [pc, #24]	; (800c208 <xPortSysTickHandler+0x40>)
 800c1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1f2:	601a      	str	r2, [r3, #0]
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	f383 8811 	msr	BASEPRI, r3
}
 800c1fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c200:	bf00      	nop
 800c202:	3708      	adds	r7, #8
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	e000ed04 	.word	0xe000ed04

0800c20c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c20c:	b480      	push	{r7}
 800c20e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c210:	4b0b      	ldr	r3, [pc, #44]	; (800c240 <vPortSetupTimerInterrupt+0x34>)
 800c212:	2200      	movs	r2, #0
 800c214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c216:	4b0b      	ldr	r3, [pc, #44]	; (800c244 <vPortSetupTimerInterrupt+0x38>)
 800c218:	2200      	movs	r2, #0
 800c21a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c21c:	4b0a      	ldr	r3, [pc, #40]	; (800c248 <vPortSetupTimerInterrupt+0x3c>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a0a      	ldr	r2, [pc, #40]	; (800c24c <vPortSetupTimerInterrupt+0x40>)
 800c222:	fba2 2303 	umull	r2, r3, r2, r3
 800c226:	099b      	lsrs	r3, r3, #6
 800c228:	4a09      	ldr	r2, [pc, #36]	; (800c250 <vPortSetupTimerInterrupt+0x44>)
 800c22a:	3b01      	subs	r3, #1
 800c22c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c22e:	4b04      	ldr	r3, [pc, #16]	; (800c240 <vPortSetupTimerInterrupt+0x34>)
 800c230:	2207      	movs	r2, #7
 800c232:	601a      	str	r2, [r3, #0]
}
 800c234:	bf00      	nop
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop
 800c240:	e000e010 	.word	0xe000e010
 800c244:	e000e018 	.word	0xe000e018
 800c248:	20000000 	.word	0x20000000
 800c24c:	10624dd3 	.word	0x10624dd3
 800c250:	e000e014 	.word	0xe000e014

0800c254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c264 <vPortEnableVFP+0x10>
 800c258:	6801      	ldr	r1, [r0, #0]
 800c25a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c25e:	6001      	str	r1, [r0, #0]
 800c260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c262:	bf00      	nop
 800c264:	e000ed88 	.word	0xe000ed88

0800c268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c26e:	f3ef 8305 	mrs	r3, IPSR
 800c272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2b0f      	cmp	r3, #15
 800c278:	d914      	bls.n	800c2a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c27a:	4a17      	ldr	r2, [pc, #92]	; (800c2d8 <vPortValidateInterruptPriority+0x70>)
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	4413      	add	r3, r2
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c284:	4b15      	ldr	r3, [pc, #84]	; (800c2dc <vPortValidateInterruptPriority+0x74>)
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	7afa      	ldrb	r2, [r7, #11]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d20a      	bcs.n	800c2a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c292:	f383 8811 	msr	BASEPRI, r3
 800c296:	f3bf 8f6f 	isb	sy
 800c29a:	f3bf 8f4f 	dsb	sy
 800c29e:	607b      	str	r3, [r7, #4]
}
 800c2a0:	bf00      	nop
 800c2a2:	e7fe      	b.n	800c2a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c2a4:	4b0e      	ldr	r3, [pc, #56]	; (800c2e0 <vPortValidateInterruptPriority+0x78>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c2ac:	4b0d      	ldr	r3, [pc, #52]	; (800c2e4 <vPortValidateInterruptPriority+0x7c>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d90a      	bls.n	800c2ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b8:	f383 8811 	msr	BASEPRI, r3
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	f3bf 8f4f 	dsb	sy
 800c2c4:	603b      	str	r3, [r7, #0]
}
 800c2c6:	bf00      	nop
 800c2c8:	e7fe      	b.n	800c2c8 <vPortValidateInterruptPriority+0x60>
	}
 800c2ca:	bf00      	nop
 800c2cc:	3714      	adds	r7, #20
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	e000e3f0 	.word	0xe000e3f0
 800c2dc:	200012b0 	.word	0x200012b0
 800c2e0:	e000ed0c 	.word	0xe000ed0c
 800c2e4:	200012b4 	.word	0x200012b4

0800c2e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b08a      	sub	sp, #40	; 0x28
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c2f4:	f7fe fd92 	bl	800ae1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c2f8:	4b5b      	ldr	r3, [pc, #364]	; (800c468 <pvPortMalloc+0x180>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d101      	bne.n	800c304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c300:	f000 f920 	bl	800c544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c304:	4b59      	ldr	r3, [pc, #356]	; (800c46c <pvPortMalloc+0x184>)
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	4013      	ands	r3, r2
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	f040 8093 	bne.w	800c438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d01d      	beq.n	800c354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c318:	2208      	movs	r2, #8
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4413      	add	r3, r2
 800c31e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f003 0307 	and.w	r3, r3, #7
 800c326:	2b00      	cmp	r3, #0
 800c328:	d014      	beq.n	800c354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f023 0307 	bic.w	r3, r3, #7
 800c330:	3308      	adds	r3, #8
 800c332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f003 0307 	and.w	r3, r3, #7
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00a      	beq.n	800c354 <pvPortMalloc+0x6c>
	__asm volatile
 800c33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c342:	f383 8811 	msr	BASEPRI, r3
 800c346:	f3bf 8f6f 	isb	sy
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	617b      	str	r3, [r7, #20]
}
 800c350:	bf00      	nop
 800c352:	e7fe      	b.n	800c352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d06e      	beq.n	800c438 <pvPortMalloc+0x150>
 800c35a:	4b45      	ldr	r3, [pc, #276]	; (800c470 <pvPortMalloc+0x188>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	429a      	cmp	r2, r3
 800c362:	d869      	bhi.n	800c438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c364:	4b43      	ldr	r3, [pc, #268]	; (800c474 <pvPortMalloc+0x18c>)
 800c366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c368:	4b42      	ldr	r3, [pc, #264]	; (800c474 <pvPortMalloc+0x18c>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c36e:	e004      	b.n	800c37a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	429a      	cmp	r2, r3
 800c382:	d903      	bls.n	800c38c <pvPortMalloc+0xa4>
 800c384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1f1      	bne.n	800c370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c38c:	4b36      	ldr	r3, [pc, #216]	; (800c468 <pvPortMalloc+0x180>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c392:	429a      	cmp	r2, r3
 800c394:	d050      	beq.n	800c438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c396:	6a3b      	ldr	r3, [r7, #32]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2208      	movs	r2, #8
 800c39c:	4413      	add	r3, r2
 800c39e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	6a3b      	ldr	r3, [r7, #32]
 800c3a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3aa:	685a      	ldr	r2, [r3, #4]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	1ad2      	subs	r2, r2, r3
 800c3b0:	2308      	movs	r3, #8
 800c3b2:	005b      	lsls	r3, r3, #1
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d91f      	bls.n	800c3f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4413      	add	r3, r2
 800c3be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	f003 0307 	and.w	r3, r3, #7
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d00a      	beq.n	800c3e0 <pvPortMalloc+0xf8>
	__asm volatile
 800c3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ce:	f383 8811 	msr	BASEPRI, r3
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	f3bf 8f4f 	dsb	sy
 800c3da:	613b      	str	r3, [r7, #16]
}
 800c3dc:	bf00      	nop
 800c3de:	e7fe      	b.n	800c3de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e2:	685a      	ldr	r2, [r3, #4]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	1ad2      	subs	r2, r2, r3
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c3f2:	69b8      	ldr	r0, [r7, #24]
 800c3f4:	f000 f908 	bl	800c608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c3f8:	4b1d      	ldr	r3, [pc, #116]	; (800c470 <pvPortMalloc+0x188>)
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	1ad3      	subs	r3, r2, r3
 800c402:	4a1b      	ldr	r2, [pc, #108]	; (800c470 <pvPortMalloc+0x188>)
 800c404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c406:	4b1a      	ldr	r3, [pc, #104]	; (800c470 <pvPortMalloc+0x188>)
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	4b1b      	ldr	r3, [pc, #108]	; (800c478 <pvPortMalloc+0x190>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d203      	bcs.n	800c41a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c412:	4b17      	ldr	r3, [pc, #92]	; (800c470 <pvPortMalloc+0x188>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a18      	ldr	r2, [pc, #96]	; (800c478 <pvPortMalloc+0x190>)
 800c418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41c:	685a      	ldr	r2, [r3, #4]
 800c41e:	4b13      	ldr	r3, [pc, #76]	; (800c46c <pvPortMalloc+0x184>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	431a      	orrs	r2, r3
 800c424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42a:	2200      	movs	r2, #0
 800c42c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c42e:	4b13      	ldr	r3, [pc, #76]	; (800c47c <pvPortMalloc+0x194>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3301      	adds	r3, #1
 800c434:	4a11      	ldr	r2, [pc, #68]	; (800c47c <pvPortMalloc+0x194>)
 800c436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c438:	f7fe fcfe 	bl	800ae38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	f003 0307 	and.w	r3, r3, #7
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00a      	beq.n	800c45c <pvPortMalloc+0x174>
	__asm volatile
 800c446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44a:	f383 8811 	msr	BASEPRI, r3
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	f3bf 8f4f 	dsb	sy
 800c456:	60fb      	str	r3, [r7, #12]
}
 800c458:	bf00      	nop
 800c45a:	e7fe      	b.n	800c45a <pvPortMalloc+0x172>
	return pvReturn;
 800c45c:	69fb      	ldr	r3, [r7, #28]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3728      	adds	r7, #40	; 0x28
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	20001ec0 	.word	0x20001ec0
 800c46c:	20001ed4 	.word	0x20001ed4
 800c470:	20001ec4 	.word	0x20001ec4
 800c474:	20001eb8 	.word	0x20001eb8
 800c478:	20001ec8 	.word	0x20001ec8
 800c47c:	20001ecc 	.word	0x20001ecc

0800c480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d04d      	beq.n	800c52e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c492:	2308      	movs	r3, #8
 800c494:	425b      	negs	r3, r3
 800c496:	697a      	ldr	r2, [r7, #20]
 800c498:	4413      	add	r3, r2
 800c49a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	685a      	ldr	r2, [r3, #4]
 800c4a4:	4b24      	ldr	r3, [pc, #144]	; (800c538 <vPortFree+0xb8>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4013      	ands	r3, r2
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10a      	bne.n	800c4c4 <vPortFree+0x44>
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b2:	f383 8811 	msr	BASEPRI, r3
 800c4b6:	f3bf 8f6f 	isb	sy
 800c4ba:	f3bf 8f4f 	dsb	sy
 800c4be:	60fb      	str	r3, [r7, #12]
}
 800c4c0:	bf00      	nop
 800c4c2:	e7fe      	b.n	800c4c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00a      	beq.n	800c4e2 <vPortFree+0x62>
	__asm volatile
 800c4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d0:	f383 8811 	msr	BASEPRI, r3
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	f3bf 8f4f 	dsb	sy
 800c4dc:	60bb      	str	r3, [r7, #8]
}
 800c4de:	bf00      	nop
 800c4e0:	e7fe      	b.n	800c4e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	685a      	ldr	r2, [r3, #4]
 800c4e6:	4b14      	ldr	r3, [pc, #80]	; (800c538 <vPortFree+0xb8>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4013      	ands	r3, r2
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d01e      	beq.n	800c52e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d11a      	bne.n	800c52e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	685a      	ldr	r2, [r3, #4]
 800c4fc:	4b0e      	ldr	r3, [pc, #56]	; (800c538 <vPortFree+0xb8>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	43db      	mvns	r3, r3
 800c502:	401a      	ands	r2, r3
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c508:	f7fe fc88 	bl	800ae1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	685a      	ldr	r2, [r3, #4]
 800c510:	4b0a      	ldr	r3, [pc, #40]	; (800c53c <vPortFree+0xbc>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4413      	add	r3, r2
 800c516:	4a09      	ldr	r2, [pc, #36]	; (800c53c <vPortFree+0xbc>)
 800c518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c51a:	6938      	ldr	r0, [r7, #16]
 800c51c:	f000 f874 	bl	800c608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c520:	4b07      	ldr	r3, [pc, #28]	; (800c540 <vPortFree+0xc0>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	3301      	adds	r3, #1
 800c526:	4a06      	ldr	r2, [pc, #24]	; (800c540 <vPortFree+0xc0>)
 800c528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c52a:	f7fe fc85 	bl	800ae38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c52e:	bf00      	nop
 800c530:	3718      	adds	r7, #24
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	20001ed4 	.word	0x20001ed4
 800c53c:	20001ec4 	.word	0x20001ec4
 800c540:	20001ed0 	.word	0x20001ed0

0800c544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c544:	b480      	push	{r7}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c54a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c54e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c550:	4b27      	ldr	r3, [pc, #156]	; (800c5f0 <prvHeapInit+0xac>)
 800c552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f003 0307 	and.w	r3, r3, #7
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00c      	beq.n	800c578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	3307      	adds	r3, #7
 800c562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f023 0307 	bic.w	r3, r3, #7
 800c56a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	1ad3      	subs	r3, r2, r3
 800c572:	4a1f      	ldr	r2, [pc, #124]	; (800c5f0 <prvHeapInit+0xac>)
 800c574:	4413      	add	r3, r2
 800c576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c57c:	4a1d      	ldr	r2, [pc, #116]	; (800c5f4 <prvHeapInit+0xb0>)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c582:	4b1c      	ldr	r3, [pc, #112]	; (800c5f4 <prvHeapInit+0xb0>)
 800c584:	2200      	movs	r2, #0
 800c586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	68ba      	ldr	r2, [r7, #8]
 800c58c:	4413      	add	r3, r2
 800c58e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c590:	2208      	movs	r2, #8
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	1a9b      	subs	r3, r3, r2
 800c596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f023 0307 	bic.w	r3, r3, #7
 800c59e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	4a15      	ldr	r2, [pc, #84]	; (800c5f8 <prvHeapInit+0xb4>)
 800c5a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c5a6:	4b14      	ldr	r3, [pc, #80]	; (800c5f8 <prvHeapInit+0xb4>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c5ae:	4b12      	ldr	r3, [pc, #72]	; (800c5f8 <prvHeapInit+0xb4>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	68fa      	ldr	r2, [r7, #12]
 800c5be:	1ad2      	subs	r2, r2, r3
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c5c4:	4b0c      	ldr	r3, [pc, #48]	; (800c5f8 <prvHeapInit+0xb4>)
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	4a0a      	ldr	r2, [pc, #40]	; (800c5fc <prvHeapInit+0xb8>)
 800c5d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	4a09      	ldr	r2, [pc, #36]	; (800c600 <prvHeapInit+0xbc>)
 800c5da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c5dc:	4b09      	ldr	r3, [pc, #36]	; (800c604 <prvHeapInit+0xc0>)
 800c5de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c5e2:	601a      	str	r2, [r3, #0]
}
 800c5e4:	bf00      	nop
 800c5e6:	3714      	adds	r7, #20
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr
 800c5f0:	200012b8 	.word	0x200012b8
 800c5f4:	20001eb8 	.word	0x20001eb8
 800c5f8:	20001ec0 	.word	0x20001ec0
 800c5fc:	20001ec8 	.word	0x20001ec8
 800c600:	20001ec4 	.word	0x20001ec4
 800c604:	20001ed4 	.word	0x20001ed4

0800c608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c608:	b480      	push	{r7}
 800c60a:	b085      	sub	sp, #20
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c610:	4b28      	ldr	r3, [pc, #160]	; (800c6b4 <prvInsertBlockIntoFreeList+0xac>)
 800c612:	60fb      	str	r3, [r7, #12]
 800c614:	e002      	b.n	800c61c <prvInsertBlockIntoFreeList+0x14>
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	60fb      	str	r3, [r7, #12]
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	429a      	cmp	r2, r3
 800c624:	d8f7      	bhi.n	800c616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	68ba      	ldr	r2, [r7, #8]
 800c630:	4413      	add	r3, r2
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	429a      	cmp	r2, r3
 800c636:	d108      	bne.n	800c64a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	685a      	ldr	r2, [r3, #4]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	441a      	add	r2, r3
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	68ba      	ldr	r2, [r7, #8]
 800c654:	441a      	add	r2, r3
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d118      	bne.n	800c690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	4b15      	ldr	r3, [pc, #84]	; (800c6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	429a      	cmp	r2, r3
 800c668:	d00d      	beq.n	800c686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	685a      	ldr	r2, [r3, #4]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	441a      	add	r2, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	601a      	str	r2, [r3, #0]
 800c684:	e008      	b.n	800c698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c686:	4b0c      	ldr	r3, [pc, #48]	; (800c6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	601a      	str	r2, [r3, #0]
 800c68e:	e003      	b.n	800c698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c698:	68fa      	ldr	r2, [r7, #12]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d002      	beq.n	800c6a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6a6:	bf00      	nop
 800c6a8:	3714      	adds	r7, #20
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	20001eb8 	.word	0x20001eb8
 800c6b8:	20001ec0 	.word	0x20001ec0

0800c6bc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	4912      	ldr	r1, [pc, #72]	; (800c70c <MX_USB_Device_Init+0x50>)
 800c6c4:	4812      	ldr	r0, [pc, #72]	; (800c710 <MX_USB_Device_Init+0x54>)
 800c6c6:	f7fc f90b 	bl	80088e0 <USBD_Init>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d001      	beq.n	800c6d4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c6d0:	f7f4 f91a 	bl	8000908 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 800c6d4:	490f      	ldr	r1, [pc, #60]	; (800c714 <MX_USB_Device_Init+0x58>)
 800c6d6:	480e      	ldr	r0, [pc, #56]	; (800c710 <MX_USB_Device_Init+0x54>)
 800c6d8:	f7fc f932 	bl	8008940 <USBD_RegisterClass>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d001      	beq.n	800c6e6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c6e2:	f7f4 f911 	bl	8000908 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 800c6e6:	490c      	ldr	r1, [pc, #48]	; (800c718 <MX_USB_Device_Init+0x5c>)
 800c6e8:	4809      	ldr	r0, [pc, #36]	; (800c710 <MX_USB_Device_Init+0x54>)
 800c6ea:	f7fb fd77 	bl	80081dc <USBD_DFU_RegisterMedia>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d001      	beq.n	800c6f8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c6f4:	f7f4 f908 	bl	8000908 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c6f8:	4805      	ldr	r0, [pc, #20]	; (800c710 <MX_USB_Device_Init+0x54>)
 800c6fa:	f7fc f948 	bl	800898e <USBD_Start>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c704:	f7f4 f900 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c708:	bf00      	nop
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	20000074 	.word	0x20000074
 800c710:	20001ed8 	.word	0x20001ed8
 800c714:	2000000c 	.word	0x2000000c
 800c718:	200000c8 	.word	0x200000c8

0800c71c <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b083      	sub	sp, #12
 800c720:	af00      	add	r7, sp, #0
 800c722:	4603      	mov	r3, r0
 800c724:	6039      	str	r1, [r7, #0]
 800c726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	2212      	movs	r2, #18
 800c72c:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 800c72e:	4b03      	ldr	r3, [pc, #12]	; (800c73c <USBD_DFU_DeviceDescriptor+0x20>)
}
 800c730:	4618      	mov	r0, r3
 800c732:	370c      	adds	r7, #12
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr
 800c73c:	20000094 	.word	0x20000094

0800c740 <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c740:	b480      	push	{r7}
 800c742:	b083      	sub	sp, #12
 800c744:	af00      	add	r7, sp, #0
 800c746:	4603      	mov	r3, r0
 800c748:	6039      	str	r1, [r7, #0]
 800c74a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	2204      	movs	r2, #4
 800c750:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c752:	4b03      	ldr	r3, [pc, #12]	; (800c760 <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 800c754:	4618      	mov	r0, r3
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	200000a8 	.word	0x200000a8

0800c764 <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	4603      	mov	r3, r0
 800c76c:	6039      	str	r1, [r7, #0]
 800c76e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c770:	79fb      	ldrb	r3, [r7, #7]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d105      	bne.n	800c782 <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c776:	683a      	ldr	r2, [r7, #0]
 800c778:	4907      	ldr	r1, [pc, #28]	; (800c798 <USBD_DFU_ProductStrDescriptor+0x34>)
 800c77a:	4808      	ldr	r0, [pc, #32]	; (800c79c <USBD_DFU_ProductStrDescriptor+0x38>)
 800c77c:	f7fd f91d 	bl	80099ba <USBD_GetString>
 800c780:	e004      	b.n	800c78c <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	4904      	ldr	r1, [pc, #16]	; (800c798 <USBD_DFU_ProductStrDescriptor+0x34>)
 800c786:	4805      	ldr	r0, [pc, #20]	; (800c79c <USBD_DFU_ProductStrDescriptor+0x38>)
 800c788:	f7fd f917 	bl	80099ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800c78c:	4b02      	ldr	r3, [pc, #8]	; (800c798 <USBD_DFU_ProductStrDescriptor+0x34>)
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3708      	adds	r7, #8
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	200021a8 	.word	0x200021a8
 800c79c:	0800d1b4 	.word	0x0800d1b4

0800c7a0 <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	6039      	str	r1, [r7, #0]
 800c7aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c7ac:	683a      	ldr	r2, [r7, #0]
 800c7ae:	4904      	ldr	r1, [pc, #16]	; (800c7c0 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 800c7b0:	4804      	ldr	r0, [pc, #16]	; (800c7c4 <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 800c7b2:	f7fd f902 	bl	80099ba <USBD_GetString>
  return USBD_StrDesc;
 800c7b6:	4b02      	ldr	r3, [pc, #8]	; (800c7c0 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	200021a8 	.word	0x200021a8
 800c7c4:	0800d1d4 	.word	0x0800d1d4

0800c7c8 <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	6039      	str	r1, [r7, #0]
 800c7d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	221a      	movs	r2, #26
 800c7d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c7da:	f000 f843 	bl	800c864 <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c7de:	4b02      	ldr	r3, [pc, #8]	; (800c7e8 <USBD_DFU_SerialStrDescriptor+0x20>)
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	200000ac 	.word	0x200000ac

0800c7ec <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	6039      	str	r1, [r7, #0]
 800c7f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c7f8:	79fb      	ldrb	r3, [r7, #7]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d105      	bne.n	800c80a <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c7fe:	683a      	ldr	r2, [r7, #0]
 800c800:	4907      	ldr	r1, [pc, #28]	; (800c820 <USBD_DFU_ConfigStrDescriptor+0x34>)
 800c802:	4808      	ldr	r0, [pc, #32]	; (800c824 <USBD_DFU_ConfigStrDescriptor+0x38>)
 800c804:	f7fd f8d9 	bl	80099ba <USBD_GetString>
 800c808:	e004      	b.n	800c814 <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c80a:	683a      	ldr	r2, [r7, #0]
 800c80c:	4904      	ldr	r1, [pc, #16]	; (800c820 <USBD_DFU_ConfigStrDescriptor+0x34>)
 800c80e:	4805      	ldr	r0, [pc, #20]	; (800c824 <USBD_DFU_ConfigStrDescriptor+0x38>)
 800c810:	f7fd f8d3 	bl	80099ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800c814:	4b02      	ldr	r3, [pc, #8]	; (800c820 <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 800c816:	4618      	mov	r0, r3
 800c818:	3708      	adds	r7, #8
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	200021a8 	.word	0x200021a8
 800c824:	0800d1e8 	.word	0x0800d1e8

0800c828 <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	4603      	mov	r3, r0
 800c830:	6039      	str	r1, [r7, #0]
 800c832:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c834:	79fb      	ldrb	r3, [r7, #7]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d105      	bne.n	800c846 <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c83a:	683a      	ldr	r2, [r7, #0]
 800c83c:	4907      	ldr	r1, [pc, #28]	; (800c85c <USBD_DFU_InterfaceStrDescriptor+0x34>)
 800c83e:	4808      	ldr	r0, [pc, #32]	; (800c860 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 800c840:	f7fd f8bb 	bl	80099ba <USBD_GetString>
 800c844:	e004      	b.n	800c850 <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c846:	683a      	ldr	r2, [r7, #0]
 800c848:	4904      	ldr	r1, [pc, #16]	; (800c85c <USBD_DFU_InterfaceStrDescriptor+0x34>)
 800c84a:	4805      	ldr	r0, [pc, #20]	; (800c860 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 800c84c:	f7fd f8b5 	bl	80099ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800c850:	4b02      	ldr	r3, [pc, #8]	; (800c85c <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	200021a8 	.word	0x200021a8
 800c860:	0800d1f4 	.word	0x0800d1f4

0800c864 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c86a:	4b0f      	ldr	r3, [pc, #60]	; (800c8a8 <Get_SerialNum+0x44>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c870:	4b0e      	ldr	r3, [pc, #56]	; (800c8ac <Get_SerialNum+0x48>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c876:	4b0e      	ldr	r3, [pc, #56]	; (800c8b0 <Get_SerialNum+0x4c>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4413      	add	r3, r2
 800c882:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d009      	beq.n	800c89e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c88a:	2208      	movs	r2, #8
 800c88c:	4909      	ldr	r1, [pc, #36]	; (800c8b4 <Get_SerialNum+0x50>)
 800c88e:	68f8      	ldr	r0, [r7, #12]
 800c890:	f000 f814 	bl	800c8bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c894:	2204      	movs	r2, #4
 800c896:	4908      	ldr	r1, [pc, #32]	; (800c8b8 <Get_SerialNum+0x54>)
 800c898:	68b8      	ldr	r0, [r7, #8]
 800c89a:	f000 f80f 	bl	800c8bc <IntToUnicode>
  }
}
 800c89e:	bf00      	nop
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	1fff7590 	.word	0x1fff7590
 800c8ac:	1fff7594 	.word	0x1fff7594
 800c8b0:	1fff7598 	.word	0x1fff7598
 800c8b4:	200000ae 	.word	0x200000ae
 800c8b8:	200000be 	.word	0x200000be

0800c8bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b087      	sub	sp, #28
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	75fb      	strb	r3, [r7, #23]
 800c8d2:	e027      	b.n	800c924 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	0f1b      	lsrs	r3, r3, #28
 800c8d8:	2b09      	cmp	r3, #9
 800c8da:	d80b      	bhi.n	800c8f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	0f1b      	lsrs	r3, r3, #28
 800c8e0:	b2da      	uxtb	r2, r3
 800c8e2:	7dfb      	ldrb	r3, [r7, #23]
 800c8e4:	005b      	lsls	r3, r3, #1
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	440b      	add	r3, r1
 800c8ec:	3230      	adds	r2, #48	; 0x30
 800c8ee:	b2d2      	uxtb	r2, r2
 800c8f0:	701a      	strb	r2, [r3, #0]
 800c8f2:	e00a      	b.n	800c90a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	0f1b      	lsrs	r3, r3, #28
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	7dfb      	ldrb	r3, [r7, #23]
 800c8fc:	005b      	lsls	r3, r3, #1
 800c8fe:	4619      	mov	r1, r3
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	440b      	add	r3, r1
 800c904:	3237      	adds	r2, #55	; 0x37
 800c906:	b2d2      	uxtb	r2, r2
 800c908:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	011b      	lsls	r3, r3, #4
 800c90e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c910:	7dfb      	ldrb	r3, [r7, #23]
 800c912:	005b      	lsls	r3, r3, #1
 800c914:	3301      	adds	r3, #1
 800c916:	68ba      	ldr	r2, [r7, #8]
 800c918:	4413      	add	r3, r2
 800c91a:	2200      	movs	r2, #0
 800c91c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c91e:	7dfb      	ldrb	r3, [r7, #23]
 800c920:	3301      	adds	r3, #1
 800c922:	75fb      	strb	r3, [r7, #23]
 800c924:	7dfa      	ldrb	r2, [r7, #23]
 800c926:	79fb      	ldrb	r3, [r7, #7]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d3d3      	bcc.n	800c8d4 <IntToUnicode+0x18>
  }
}
 800c92c:	bf00      	nop
 800c92e:	bf00      	nop
 800c930:	371c      	adds	r7, #28
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr

0800c93a <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 800c93a:	b480      	push	{r7}
 800c93c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800c93e:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800c940:	4618      	mov	r0, r3
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr

0800c94a <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 800c94a:	b480      	push	{r7}
 800c94c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800c94e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800c950:	4618      	mov	r0, r3
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr

0800c95a <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 800c95a:	b480      	push	{r7}
 800c95c:	b083      	sub	sp, #12
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800c962:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c964:	4618      	mov	r0, r3
 800c966:	370c      	adds	r7, #12
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr

0800c970 <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800c97c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3714      	adds	r7, #20
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr

0800c98a <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800c98a:	b480      	push	{r7}
 800c98c:	b085      	sub	sp, #20
 800c98e:	af00      	add	r7, sp, #0
 800c990:	60f8      	str	r0, [r7, #12]
 800c992:	60b9      	str	r1, [r7, #8]
 800c994:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 800c996:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3714      	adds	r7, #20
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	607a      	str	r2, [r7, #4]
 800c9b0:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800c9b2:	7afb      	ldrb	r3, [r7, #11]
 800c9b4:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800c9b6:	bf00      	nop
  }
  return (USBD_OK);
 800c9b8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3714      	adds	r7, #20
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr
	...

0800c9c8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b098      	sub	sp, #96	; 0x60
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c9d0:	f107 0310 	add.w	r3, r7, #16
 800c9d4:	2250      	movs	r2, #80	; 0x50
 800c9d6:	2100      	movs	r1, #0
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f000 fafd 	bl	800cfd8 <memset>
  if(pcdHandle->Instance==USB)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4a15      	ldr	r2, [pc, #84]	; (800ca38 <HAL_PCD_MspInit+0x70>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d122      	bne.n	800ca2e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c9e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c9ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c9f2:	f107 0310 	add.w	r3, r7, #16
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7f8 f99c 	bl	8004d34 <HAL_RCCEx_PeriphCLKConfig>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800ca02:	f7f3 ff81 	bl	8000908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ca06:	4b0d      	ldr	r3, [pc, #52]	; (800ca3c <HAL_PCD_MspInit+0x74>)
 800ca08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca0a:	4a0c      	ldr	r2, [pc, #48]	; (800ca3c <HAL_PCD_MspInit+0x74>)
 800ca0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ca10:	6593      	str	r3, [r2, #88]	; 0x58
 800ca12:	4b0a      	ldr	r3, [pc, #40]	; (800ca3c <HAL_PCD_MspInit+0x74>)
 800ca14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca1a:	60fb      	str	r3, [r7, #12]
 800ca1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800ca1e:	2200      	movs	r2, #0
 800ca20:	2105      	movs	r1, #5
 800ca22:	2014      	movs	r0, #20
 800ca24:	f7f5 fc1e 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ca28:	2014      	movs	r0, #20
 800ca2a:	f7f5 fc35 	bl	8002298 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ca2e:	bf00      	nop
 800ca30:	3760      	adds	r7, #96	; 0x60
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	40005c00 	.word	0x40005c00
 800ca3c:	40021000 	.word	0x40021000

0800ca40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ca54:	4619      	mov	r1, r3
 800ca56:	4610      	mov	r0, r2
 800ca58:	f7fb ffff 	bl	8008a5a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ca5c:	bf00      	nop
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ca76:	78fa      	ldrb	r2, [r7, #3]
 800ca78:	6879      	ldr	r1, [r7, #4]
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4413      	add	r3, r2
 800ca80:	00db      	lsls	r3, r3, #3
 800ca82:	440b      	add	r3, r1
 800ca84:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	78fb      	ldrb	r3, [r7, #3]
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	f7fc f839 	bl	8008b04 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ca92:	bf00      	nop
 800ca94:	3708      	adds	r7, #8
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b082      	sub	sp, #8
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
 800caa2:	460b      	mov	r3, r1
 800caa4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800caac:	78fa      	ldrb	r2, [r7, #3]
 800caae:	6879      	ldr	r1, [r7, #4]
 800cab0:	4613      	mov	r3, r2
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	4413      	add	r3, r2
 800cab6:	00db      	lsls	r3, r3, #3
 800cab8:	440b      	add	r3, r1
 800caba:	333c      	adds	r3, #60	; 0x3c
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	78fb      	ldrb	r3, [r7, #3]
 800cac0:	4619      	mov	r1, r3
 800cac2:	f7fc f882 	bl	8008bca <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800cac6:	bf00      	nop
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b082      	sub	sp, #8
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cadc:	4618      	mov	r0, r3
 800cade:	f7fc f996 	bl	8008e0e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800cae2:	bf00      	nop
 800cae4:	3708      	adds	r7, #8
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b084      	sub	sp, #16
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800caf2:	2301      	movs	r3, #1
 800caf4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d001      	beq.n	800cb02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cafe:	f7f3 ff03 	bl	8000908 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cb08:	7bfa      	ldrb	r2, [r7, #15]
 800cb0a:	4611      	mov	r1, r2
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7fc f940 	bl	8008d92 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7fc f8ec 	bl	8008cf6 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cb1e:	bf00      	nop
 800cb20:	3710      	adds	r7, #16
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
	...

0800cb28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7fc f93b 	bl	8008db2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	699b      	ldr	r3, [r3, #24]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d005      	beq.n	800cb50 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb44:	4b04      	ldr	r3, [pc, #16]	; (800cb58 <HAL_PCD_SuspendCallback+0x30>)
 800cb46:	691b      	ldr	r3, [r3, #16]
 800cb48:	4a03      	ldr	r2, [pc, #12]	; (800cb58 <HAL_PCD_SuspendCallback+0x30>)
 800cb4a:	f043 0306 	orr.w	r3, r3, #6
 800cb4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cb50:	bf00      	nop
 800cb52:	3708      	adds	r7, #8
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	e000ed00 	.word	0xe000ed00

0800cb5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	699b      	ldr	r3, [r3, #24]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d007      	beq.n	800cb7c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb6c:	4b08      	ldr	r3, [pc, #32]	; (800cb90 <HAL_PCD_ResumeCallback+0x34>)
 800cb6e:	691b      	ldr	r3, [r3, #16]
 800cb70:	4a07      	ldr	r2, [pc, #28]	; (800cb90 <HAL_PCD_ResumeCallback+0x34>)
 800cb72:	f023 0306 	bic.w	r3, r3, #6
 800cb76:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cb78:	f000 f9c8 	bl	800cf0c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fc f92b 	bl	8008dde <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800cb88:	bf00      	nop
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	e000ed00 	.word	0xe000ed00

0800cb94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800cb9c:	4a1e      	ldr	r2, [pc, #120]	; (800cc18 <USBD_LL_Init+0x84>)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4a1c      	ldr	r2, [pc, #112]	; (800cc18 <USBD_LL_Init+0x84>)
 800cba8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800cbac:	4b1a      	ldr	r3, [pc, #104]	; (800cc18 <USBD_LL_Init+0x84>)
 800cbae:	4a1b      	ldr	r2, [pc, #108]	; (800cc1c <USBD_LL_Init+0x88>)
 800cbb0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cbb2:	4b19      	ldr	r3, [pc, #100]	; (800cc18 <USBD_LL_Init+0x84>)
 800cbb4:	2208      	movs	r2, #8
 800cbb6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cbb8:	4b17      	ldr	r3, [pc, #92]	; (800cc18 <USBD_LL_Init+0x84>)
 800cbba:	2202      	movs	r2, #2
 800cbbc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cbbe:	4b16      	ldr	r3, [pc, #88]	; (800cc18 <USBD_LL_Init+0x84>)
 800cbc0:	2202      	movs	r2, #2
 800cbc2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cbc4:	4b14      	ldr	r3, [pc, #80]	; (800cc18 <USBD_LL_Init+0x84>)
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cbca:	4b13      	ldr	r3, [pc, #76]	; (800cc18 <USBD_LL_Init+0x84>)
 800cbcc:	2200      	movs	r2, #0
 800cbce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cbd0:	4b11      	ldr	r3, [pc, #68]	; (800cc18 <USBD_LL_Init+0x84>)
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cbd6:	4b10      	ldr	r3, [pc, #64]	; (800cc18 <USBD_LL_Init+0x84>)
 800cbd8:	2200      	movs	r2, #0
 800cbda:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cbdc:	480e      	ldr	r0, [pc, #56]	; (800cc18 <USBD_LL_Init+0x84>)
 800cbde:	f7f5 fdaf 	bl	8002740 <HAL_PCD_Init>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d001      	beq.n	800cbec <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800cbe8:	f7f3 fe8e 	bl	8000908 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cbf2:	2318      	movs	r3, #24
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	2100      	movs	r1, #0
 800cbf8:	f7f7 fa2a 	bl	8004050 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cc02:	2358      	movs	r3, #88	; 0x58
 800cc04:	2200      	movs	r2, #0
 800cc06:	2180      	movs	r1, #128	; 0x80
 800cc08:	f7f7 fa22 	bl	8004050 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800cc0c:	2300      	movs	r3, #0
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3708      	adds	r7, #8
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	200023a8 	.word	0x200023a8
 800cc1c:	40005c00 	.word	0x40005c00

0800cc20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7f5 fe67 	bl	800290a <HAL_PCD_Start>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc40:	7bfb      	ldrb	r3, [r7, #15]
 800cc42:	4618      	mov	r0, r3
 800cc44:	f000 f968 	bl	800cf18 <USBD_Get_USB_Status>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b084      	sub	sp, #16
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc62:	2300      	movs	r3, #0
 800cc64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7f5 fe6e 	bl	800294e <HAL_PCD_Stop>
 800cc72:	4603      	mov	r3, r0
 800cc74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc76:	7bfb      	ldrb	r3, [r7, #15]
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f000 f94d 	bl	800cf18 <USBD_Get_USB_Status>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc82:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3710      	adds	r7, #16
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b084      	sub	sp, #16
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	4608      	mov	r0, r1
 800cc96:	4611      	mov	r1, r2
 800cc98:	461a      	mov	r2, r3
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	70fb      	strb	r3, [r7, #3]
 800cc9e:	460b      	mov	r3, r1
 800cca0:	70bb      	strb	r3, [r7, #2]
 800cca2:	4613      	mov	r3, r2
 800cca4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cca6:	2300      	movs	r3, #0
 800cca8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ccb4:	78bb      	ldrb	r3, [r7, #2]
 800ccb6:	883a      	ldrh	r2, [r7, #0]
 800ccb8:	78f9      	ldrb	r1, [r7, #3]
 800ccba:	f7f5 ffb6 	bl	8002c2a <HAL_PCD_EP_Open>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccc2:	7bfb      	ldrb	r3, [r7, #15]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f000 f927 	bl	800cf18 <USBD_Get_USB_Status>
 800ccca:	4603      	mov	r3, r0
 800cccc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccce:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	460b      	mov	r3, r1
 800cce2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cce4:	2300      	movs	r3, #0
 800cce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cce8:	2300      	movs	r3, #0
 800ccea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ccf2:	78fa      	ldrb	r2, [r7, #3]
 800ccf4:	4611      	mov	r1, r2
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7f6 f87d 	bl	8002df6 <HAL_PCD_EP_SetStall>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd00:	7bfb      	ldrb	r3, [r7, #15]
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 f908 	bl	800cf18 <USBD_Get_USB_Status>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b084      	sub	sp, #16
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	460b      	mov	r3, r1
 800cd20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd22:	2300      	movs	r3, #0
 800cd24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd26:	2300      	movs	r3, #0
 800cd28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd30:	78fa      	ldrb	r2, [r7, #3]
 800cd32:	4611      	mov	r1, r2
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7f6 f8b0 	bl	8002e9a <HAL_PCD_EP_ClrStall>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd3e:	7bfb      	ldrb	r3, [r7, #15]
 800cd40:	4618      	mov	r0, r3
 800cd42:	f000 f8e9 	bl	800cf18 <USBD_Get_USB_Status>
 800cd46:	4603      	mov	r3, r0
 800cd48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3710      	adds	r7, #16
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b085      	sub	sp, #20
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	da0c      	bge.n	800cd8a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd70:	78fb      	ldrb	r3, [r7, #3]
 800cd72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd76:	68f9      	ldr	r1, [r7, #12]
 800cd78:	1c5a      	adds	r2, r3, #1
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	4413      	add	r3, r2
 800cd80:	00db      	lsls	r3, r3, #3
 800cd82:	440b      	add	r3, r1
 800cd84:	3302      	adds	r3, #2
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	e00b      	b.n	800cda2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd8a:	78fb      	ldrb	r3, [r7, #3]
 800cd8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd90:	68f9      	ldr	r1, [r7, #12]
 800cd92:	4613      	mov	r3, r2
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	4413      	add	r3, r2
 800cd98:	00db      	lsls	r3, r3, #3
 800cd9a:	440b      	add	r3, r1
 800cd9c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cda0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3714      	adds	r7, #20
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b084      	sub	sp, #16
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cdc8:	78fa      	ldrb	r2, [r7, #3]
 800cdca:	4611      	mov	r1, r2
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7f5 ff07 	bl	8002be0 <HAL_PCD_SetAddress>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdd6:	7bfb      	ldrb	r3, [r7, #15]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f000 f89d 	bl	800cf18 <USBD_Get_USB_Status>
 800cdde:	4603      	mov	r3, r0
 800cde0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cde2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3710      	adds	r7, #16
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b086      	sub	sp, #24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	607a      	str	r2, [r7, #4]
 800cdf6:	603b      	str	r3, [r7, #0]
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce00:	2300      	movs	r3, #0
 800ce02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ce0a:	7af9      	ldrb	r1, [r7, #11]
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	f7f5 ffae 	bl	8002d70 <HAL_PCD_EP_Transmit>
 800ce14:	4603      	mov	r3, r0
 800ce16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce18:	7dfb      	ldrb	r3, [r7, #23]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f000 f87c 	bl	800cf18 <USBD_Get_USB_Status>
 800ce20:	4603      	mov	r3, r0
 800ce22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce24:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3718      	adds	r7, #24
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b086      	sub	sp, #24
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	60f8      	str	r0, [r7, #12]
 800ce36:	607a      	str	r2, [r7, #4]
 800ce38:	603b      	str	r3, [r7, #0]
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce42:	2300      	movs	r3, #0
 800ce44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ce4c:	7af9      	ldrb	r1, [r7, #11]
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	f7f5 ff50 	bl	8002cf6 <HAL_PCD_EP_Receive>
 800ce56:	4603      	mov	r3, r0
 800ce58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce5a:	7dfb      	ldrb	r3, [r7, #23]
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f000 f85b 	bl	800cf18 <USBD_Get_USB_Status>
 800ce62:	4603      	mov	r3, r0
 800ce64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce66:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3718      	adds	r7, #24
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ce7c:	78fb      	ldrb	r3, [r7, #3]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d002      	beq.n	800ce88 <HAL_PCDEx_LPM_Callback+0x18>
 800ce82:	2b01      	cmp	r3, #1
 800ce84:	d013      	beq.n	800ceae <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ce86:	e023      	b.n	800ced0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	699b      	ldr	r3, [r3, #24]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d007      	beq.n	800cea0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ce90:	f000 f83c 	bl	800cf0c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce94:	4b10      	ldr	r3, [pc, #64]	; (800ced8 <HAL_PCDEx_LPM_Callback+0x68>)
 800ce96:	691b      	ldr	r3, [r3, #16]
 800ce98:	4a0f      	ldr	r2, [pc, #60]	; (800ced8 <HAL_PCDEx_LPM_Callback+0x68>)
 800ce9a:	f023 0306 	bic.w	r3, r3, #6
 800ce9e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fb ff99 	bl	8008dde <USBD_LL_Resume>
    break;
 800ceac:	e010      	b.n	800ced0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7fb ff7c 	bl	8008db2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	699b      	ldr	r3, [r3, #24]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d005      	beq.n	800cece <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cec2:	4b05      	ldr	r3, [pc, #20]	; (800ced8 <HAL_PCDEx_LPM_Callback+0x68>)
 800cec4:	691b      	ldr	r3, [r3, #16]
 800cec6:	4a04      	ldr	r2, [pc, #16]	; (800ced8 <HAL_PCDEx_LPM_Callback+0x68>)
 800cec8:	f043 0306 	orr.w	r3, r3, #6
 800cecc:	6113      	str	r3, [r2, #16]
    break;
 800cece:	bf00      	nop
}
 800ced0:	bf00      	nop
 800ced2:	3708      	adds	r7, #8
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	e000ed00 	.word	0xe000ed00

0800cedc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cee4:	4b03      	ldr	r3, [pc, #12]	; (800cef4 <USBD_static_malloc+0x18>)
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	370c      	adds	r7, #12
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
 800cef2:	bf00      	nop
 800cef4:	2000269c 	.word	0x2000269c

0800cef8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]

}
 800cf00:	bf00      	nop
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cf10:	f7f3 f9be 	bl	8000290 <SystemClock_Config>
}
 800cf14:	bf00      	nop
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	4603      	mov	r3, r0
 800cf20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf22:	2300      	movs	r3, #0
 800cf24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf26:	79fb      	ldrb	r3, [r7, #7]
 800cf28:	2b03      	cmp	r3, #3
 800cf2a:	d817      	bhi.n	800cf5c <USBD_Get_USB_Status+0x44>
 800cf2c:	a201      	add	r2, pc, #4	; (adr r2, 800cf34 <USBD_Get_USB_Status+0x1c>)
 800cf2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf32:	bf00      	nop
 800cf34:	0800cf45 	.word	0x0800cf45
 800cf38:	0800cf4b 	.word	0x0800cf4b
 800cf3c:	0800cf51 	.word	0x0800cf51
 800cf40:	0800cf57 	.word	0x0800cf57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf44:	2300      	movs	r3, #0
 800cf46:	73fb      	strb	r3, [r7, #15]
    break;
 800cf48:	e00b      	b.n	800cf62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf4a:	2303      	movs	r3, #3
 800cf4c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf4e:	e008      	b.n	800cf62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf50:	2301      	movs	r3, #1
 800cf52:	73fb      	strb	r3, [r7, #15]
    break;
 800cf54:	e005      	b.n	800cf62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf56:	2303      	movs	r3, #3
 800cf58:	73fb      	strb	r3, [r7, #15]
    break;
 800cf5a:	e002      	b.n	800cf62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf5c:	2303      	movs	r3, #3
 800cf5e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf60:	bf00      	nop
  }
  return usb_status;
 800cf62:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3714      	adds	r7, #20
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr

0800cf70 <__libc_init_array>:
 800cf70:	b570      	push	{r4, r5, r6, lr}
 800cf72:	4d0d      	ldr	r5, [pc, #52]	; (800cfa8 <__libc_init_array+0x38>)
 800cf74:	4c0d      	ldr	r4, [pc, #52]	; (800cfac <__libc_init_array+0x3c>)
 800cf76:	1b64      	subs	r4, r4, r5
 800cf78:	10a4      	asrs	r4, r4, #2
 800cf7a:	2600      	movs	r6, #0
 800cf7c:	42a6      	cmp	r6, r4
 800cf7e:	d109      	bne.n	800cf94 <__libc_init_array+0x24>
 800cf80:	4d0b      	ldr	r5, [pc, #44]	; (800cfb0 <__libc_init_array+0x40>)
 800cf82:	4c0c      	ldr	r4, [pc, #48]	; (800cfb4 <__libc_init_array+0x44>)
 800cf84:	f000 f8f2 	bl	800d16c <_init>
 800cf88:	1b64      	subs	r4, r4, r5
 800cf8a:	10a4      	asrs	r4, r4, #2
 800cf8c:	2600      	movs	r6, #0
 800cf8e:	42a6      	cmp	r6, r4
 800cf90:	d105      	bne.n	800cf9e <__libc_init_array+0x2e>
 800cf92:	bd70      	pop	{r4, r5, r6, pc}
 800cf94:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf98:	4798      	blx	r3
 800cf9a:	3601      	adds	r6, #1
 800cf9c:	e7ee      	b.n	800cf7c <__libc_init_array+0xc>
 800cf9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfa2:	4798      	blx	r3
 800cfa4:	3601      	adds	r6, #1
 800cfa6:	e7f2      	b.n	800cf8e <__libc_init_array+0x1e>
 800cfa8:	0800d324 	.word	0x0800d324
 800cfac:	0800d324 	.word	0x0800d324
 800cfb0:	0800d324 	.word	0x0800d324
 800cfb4:	0800d328 	.word	0x0800d328

0800cfb8 <__retarget_lock_acquire_recursive>:
 800cfb8:	4770      	bx	lr

0800cfba <__retarget_lock_release_recursive>:
 800cfba:	4770      	bx	lr

0800cfbc <memcpy>:
 800cfbc:	440a      	add	r2, r1
 800cfbe:	4291      	cmp	r1, r2
 800cfc0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cfc4:	d100      	bne.n	800cfc8 <memcpy+0xc>
 800cfc6:	4770      	bx	lr
 800cfc8:	b510      	push	{r4, lr}
 800cfca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfd2:	4291      	cmp	r1, r2
 800cfd4:	d1f9      	bne.n	800cfca <memcpy+0xe>
 800cfd6:	bd10      	pop	{r4, pc}

0800cfd8 <memset>:
 800cfd8:	4402      	add	r2, r0
 800cfda:	4603      	mov	r3, r0
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d100      	bne.n	800cfe2 <memset+0xa>
 800cfe0:	4770      	bx	lr
 800cfe2:	f803 1b01 	strb.w	r1, [r3], #1
 800cfe6:	e7f9      	b.n	800cfdc <memset+0x4>

0800cfe8 <cleanup_glue>:
 800cfe8:	b538      	push	{r3, r4, r5, lr}
 800cfea:	460c      	mov	r4, r1
 800cfec:	6809      	ldr	r1, [r1, #0]
 800cfee:	4605      	mov	r5, r0
 800cff0:	b109      	cbz	r1, 800cff6 <cleanup_glue+0xe>
 800cff2:	f7ff fff9 	bl	800cfe8 <cleanup_glue>
 800cff6:	4621      	mov	r1, r4
 800cff8:	4628      	mov	r0, r5
 800cffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cffe:	f000 b869 	b.w	800d0d4 <_free_r>
	...

0800d004 <_reclaim_reent>:
 800d004:	4b2c      	ldr	r3, [pc, #176]	; (800d0b8 <_reclaim_reent+0xb4>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4283      	cmp	r3, r0
 800d00a:	b570      	push	{r4, r5, r6, lr}
 800d00c:	4604      	mov	r4, r0
 800d00e:	d051      	beq.n	800d0b4 <_reclaim_reent+0xb0>
 800d010:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d012:	b143      	cbz	r3, 800d026 <_reclaim_reent+0x22>
 800d014:	68db      	ldr	r3, [r3, #12]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d14a      	bne.n	800d0b0 <_reclaim_reent+0xac>
 800d01a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d01c:	6819      	ldr	r1, [r3, #0]
 800d01e:	b111      	cbz	r1, 800d026 <_reclaim_reent+0x22>
 800d020:	4620      	mov	r0, r4
 800d022:	f000 f857 	bl	800d0d4 <_free_r>
 800d026:	6961      	ldr	r1, [r4, #20]
 800d028:	b111      	cbz	r1, 800d030 <_reclaim_reent+0x2c>
 800d02a:	4620      	mov	r0, r4
 800d02c:	f000 f852 	bl	800d0d4 <_free_r>
 800d030:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d032:	b111      	cbz	r1, 800d03a <_reclaim_reent+0x36>
 800d034:	4620      	mov	r0, r4
 800d036:	f000 f84d 	bl	800d0d4 <_free_r>
 800d03a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d03c:	b111      	cbz	r1, 800d044 <_reclaim_reent+0x40>
 800d03e:	4620      	mov	r0, r4
 800d040:	f000 f848 	bl	800d0d4 <_free_r>
 800d044:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d046:	b111      	cbz	r1, 800d04e <_reclaim_reent+0x4a>
 800d048:	4620      	mov	r0, r4
 800d04a:	f000 f843 	bl	800d0d4 <_free_r>
 800d04e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d050:	b111      	cbz	r1, 800d058 <_reclaim_reent+0x54>
 800d052:	4620      	mov	r0, r4
 800d054:	f000 f83e 	bl	800d0d4 <_free_r>
 800d058:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d05a:	b111      	cbz	r1, 800d062 <_reclaim_reent+0x5e>
 800d05c:	4620      	mov	r0, r4
 800d05e:	f000 f839 	bl	800d0d4 <_free_r>
 800d062:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d064:	b111      	cbz	r1, 800d06c <_reclaim_reent+0x68>
 800d066:	4620      	mov	r0, r4
 800d068:	f000 f834 	bl	800d0d4 <_free_r>
 800d06c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d06e:	b111      	cbz	r1, 800d076 <_reclaim_reent+0x72>
 800d070:	4620      	mov	r0, r4
 800d072:	f000 f82f 	bl	800d0d4 <_free_r>
 800d076:	69a3      	ldr	r3, [r4, #24]
 800d078:	b1e3      	cbz	r3, 800d0b4 <_reclaim_reent+0xb0>
 800d07a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d07c:	4620      	mov	r0, r4
 800d07e:	4798      	blx	r3
 800d080:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d082:	b1b9      	cbz	r1, 800d0b4 <_reclaim_reent+0xb0>
 800d084:	4620      	mov	r0, r4
 800d086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d08a:	f7ff bfad 	b.w	800cfe8 <cleanup_glue>
 800d08e:	5949      	ldr	r1, [r1, r5]
 800d090:	b941      	cbnz	r1, 800d0a4 <_reclaim_reent+0xa0>
 800d092:	3504      	adds	r5, #4
 800d094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d096:	2d80      	cmp	r5, #128	; 0x80
 800d098:	68d9      	ldr	r1, [r3, #12]
 800d09a:	d1f8      	bne.n	800d08e <_reclaim_reent+0x8a>
 800d09c:	4620      	mov	r0, r4
 800d09e:	f000 f819 	bl	800d0d4 <_free_r>
 800d0a2:	e7ba      	b.n	800d01a <_reclaim_reent+0x16>
 800d0a4:	680e      	ldr	r6, [r1, #0]
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f000 f814 	bl	800d0d4 <_free_r>
 800d0ac:	4631      	mov	r1, r6
 800d0ae:	e7ef      	b.n	800d090 <_reclaim_reent+0x8c>
 800d0b0:	2500      	movs	r5, #0
 800d0b2:	e7ef      	b.n	800d094 <_reclaim_reent+0x90>
 800d0b4:	bd70      	pop	{r4, r5, r6, pc}
 800d0b6:	bf00      	nop
 800d0b8:	200000e4 	.word	0x200000e4

0800d0bc <__malloc_lock>:
 800d0bc:	4801      	ldr	r0, [pc, #4]	; (800d0c4 <__malloc_lock+0x8>)
 800d0be:	f7ff bf7b 	b.w	800cfb8 <__retarget_lock_acquire_recursive>
 800d0c2:	bf00      	nop
 800d0c4:	20002abc 	.word	0x20002abc

0800d0c8 <__malloc_unlock>:
 800d0c8:	4801      	ldr	r0, [pc, #4]	; (800d0d0 <__malloc_unlock+0x8>)
 800d0ca:	f7ff bf76 	b.w	800cfba <__retarget_lock_release_recursive>
 800d0ce:	bf00      	nop
 800d0d0:	20002abc 	.word	0x20002abc

0800d0d4 <_free_r>:
 800d0d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0d6:	2900      	cmp	r1, #0
 800d0d8:	d044      	beq.n	800d164 <_free_r+0x90>
 800d0da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0de:	9001      	str	r0, [sp, #4]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	f1a1 0404 	sub.w	r4, r1, #4
 800d0e6:	bfb8      	it	lt
 800d0e8:	18e4      	addlt	r4, r4, r3
 800d0ea:	f7ff ffe7 	bl	800d0bc <__malloc_lock>
 800d0ee:	4a1e      	ldr	r2, [pc, #120]	; (800d168 <_free_r+0x94>)
 800d0f0:	9801      	ldr	r0, [sp, #4]
 800d0f2:	6813      	ldr	r3, [r2, #0]
 800d0f4:	b933      	cbnz	r3, 800d104 <_free_r+0x30>
 800d0f6:	6063      	str	r3, [r4, #4]
 800d0f8:	6014      	str	r4, [r2, #0]
 800d0fa:	b003      	add	sp, #12
 800d0fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d100:	f7ff bfe2 	b.w	800d0c8 <__malloc_unlock>
 800d104:	42a3      	cmp	r3, r4
 800d106:	d908      	bls.n	800d11a <_free_r+0x46>
 800d108:	6825      	ldr	r5, [r4, #0]
 800d10a:	1961      	adds	r1, r4, r5
 800d10c:	428b      	cmp	r3, r1
 800d10e:	bf01      	itttt	eq
 800d110:	6819      	ldreq	r1, [r3, #0]
 800d112:	685b      	ldreq	r3, [r3, #4]
 800d114:	1949      	addeq	r1, r1, r5
 800d116:	6021      	streq	r1, [r4, #0]
 800d118:	e7ed      	b.n	800d0f6 <_free_r+0x22>
 800d11a:	461a      	mov	r2, r3
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	b10b      	cbz	r3, 800d124 <_free_r+0x50>
 800d120:	42a3      	cmp	r3, r4
 800d122:	d9fa      	bls.n	800d11a <_free_r+0x46>
 800d124:	6811      	ldr	r1, [r2, #0]
 800d126:	1855      	adds	r5, r2, r1
 800d128:	42a5      	cmp	r5, r4
 800d12a:	d10b      	bne.n	800d144 <_free_r+0x70>
 800d12c:	6824      	ldr	r4, [r4, #0]
 800d12e:	4421      	add	r1, r4
 800d130:	1854      	adds	r4, r2, r1
 800d132:	42a3      	cmp	r3, r4
 800d134:	6011      	str	r1, [r2, #0]
 800d136:	d1e0      	bne.n	800d0fa <_free_r+0x26>
 800d138:	681c      	ldr	r4, [r3, #0]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	6053      	str	r3, [r2, #4]
 800d13e:	4421      	add	r1, r4
 800d140:	6011      	str	r1, [r2, #0]
 800d142:	e7da      	b.n	800d0fa <_free_r+0x26>
 800d144:	d902      	bls.n	800d14c <_free_r+0x78>
 800d146:	230c      	movs	r3, #12
 800d148:	6003      	str	r3, [r0, #0]
 800d14a:	e7d6      	b.n	800d0fa <_free_r+0x26>
 800d14c:	6825      	ldr	r5, [r4, #0]
 800d14e:	1961      	adds	r1, r4, r5
 800d150:	428b      	cmp	r3, r1
 800d152:	bf04      	itt	eq
 800d154:	6819      	ldreq	r1, [r3, #0]
 800d156:	685b      	ldreq	r3, [r3, #4]
 800d158:	6063      	str	r3, [r4, #4]
 800d15a:	bf04      	itt	eq
 800d15c:	1949      	addeq	r1, r1, r5
 800d15e:	6021      	streq	r1, [r4, #0]
 800d160:	6054      	str	r4, [r2, #4]
 800d162:	e7ca      	b.n	800d0fa <_free_r+0x26>
 800d164:	b003      	add	sp, #12
 800d166:	bd30      	pop	{r4, r5, pc}
 800d168:	20002ac0 	.word	0x20002ac0

0800d16c <_init>:
 800d16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d16e:	bf00      	nop
 800d170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d172:	bc08      	pop	{r3}
 800d174:	469e      	mov	lr, r3
 800d176:	4770      	bx	lr

0800d178 <_fini>:
 800d178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d17a:	bf00      	nop
 800d17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d17e:	bc08      	pop	{r3}
 800d180:	469e      	mov	lr, r3
 800d182:	4770      	bx	lr
